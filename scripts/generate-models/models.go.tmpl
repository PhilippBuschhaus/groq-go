{{ define "models" }}
// Code generated by groq-modeler DO NOT EDIT.
//
// Created at: {{ getCurrentDate }}
//
// groq-modeler Version 1.0.0

package groq

// Endpoint is the endpoint for the groq api.
// string
type Endpoint string

// Model is the type for models present on the groq api.
// string
type Model string

// AudioResponseFormat is the response format for the audio API.
//
// Response formatted using AudioResponseFormatJSON by default.
//
// string
type AudioResponseFormat string

// TranscriptionTimestampGranularity is the timestamp granularity for the transcription.
//
// string
type TranscriptionTimestampGranularity string

const (
	completionsSuffix     Endpoint = "/completions"
	chatCompletionsSuffix Endpoint = "/chat/completions"
	transcriptionsSuffix  Endpoint = "/audio/transcriptions"
	translationsSuffix    Endpoint = "/audio/translations"
	embeddingsSuffix      Endpoint = "/embeddings"
	moderationsSuffix     Endpoint = "/moderations"
	
	AudioResponseFormatJSON        AudioResponseFormat = "json"         // AudioResponseFormatJSON is the JSON format of some audio.
	AudioResponseFormatText        AudioResponseFormat = "text"         // AudioResponseFormatText is the text format of some audio.
	AudioResponseFormatSRT         AudioResponseFormat = "srt"          // AudioResponseFormatSRT is the SRT format of some audio.
	AudioResponseFormatVerboseJSON AudioResponseFormat = "verbose_json" // AudioResponseFormatVerboseJSON is the verbose JSON format of some audio.
	AudioResponseFormatVTT         AudioResponseFormat = "vtt"          // AudioResponseFormatVTT is the VTT format of some audio.

	TranscriptionTimestampGranularityWord    TranscriptionTimestampGranularity = "word"    // TranscriptionTimestampGranularityWord is the word timestamp granularity.
	TranscriptionTimestampGranularitySegment TranscriptionTimestampGranularity = "segment" // TranscriptionTimestampGranularitySegment is the segment timestamp granularity.
	
	
	{{- range $model := .Models }}
		Model{{ $model.Name }} Model = "{{ $model.ID }}" // Model{{ $model.Name }} is an AI {{if isTextModel $model}}text{{else if isAudioModel $model}}audio{{else if notModerationModel $model}}moderation{{end}} model provided by {{$model.OwnedBy}}. It has {{$model.ContextWindow}} context window.
		{{- end }}
)

var disabledModelsForEndpoints = map[Endpoint]map[Model]bool{
	completionsSuffix: {
	{{- range $model := .Models }} {{ if isAudioModel $model }}
			Model{{ $model.Name }}: true, {{- end }} {{- end }} 
	},
	chatCompletionsSuffix: {
	{{- range $model := .Models }} {{ if isAudioModel $model }}
			Model{{ $model.Name }}: true, {{- end }} {{- end }}
	},
	transcriptionsSuffix: {
	{{- range $model := .Models }} {{ if isTextModel $model }}
			Model{{ $model.Name }}: true, {{- end }} {{- end }}
	},
	translationsSuffix: {
	{{- range $model := .Models }} {{ if isTextModel $model }}
			Model{{ $model.Name }}: true, {{- end }} {{- end }}
	},
	moderationsSuffix: {
	{{- range $model := .Models }} {{ if notModerationModel $model }}
			Model{{ $model.Name }}: true, {{- end }} {{- end }}
	},
}

func endpointSupportsModel(endpoint Endpoint, model Model) bool {
	return !disabledModelsForEndpoints[endpoint][model]
}
{{ end }}

{{ define "test" }}
package groq_test

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

{{- range $model := .TextModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API, 
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}

{{- range $model := .AudioModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API, 
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}

{{- range $model := .ModerationModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API, 
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}

{{- range $model := .MultiModalModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API, 
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}
{{ end }}
