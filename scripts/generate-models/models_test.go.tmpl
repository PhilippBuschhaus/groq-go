// Code generated by groq-modeler DO NOT EDIT.
//
// Created at: {{ getCurrentDate }}
//
// groq-modeler Version 1.0.0
package groq

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

{{- range $model := .ChatModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}

{{- range $model := .TranscriptionModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }}  transcription model.
//
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected with the api call using this transcription 
// model.
func Test{{ $model.Name }}(t *testing.T) {
	a := assert.New(t)
	ctx := context.Background()
	client, err := NewClient(os.Getenv("GROQ_KEY"))
	a.NoError(err, "NewClient error")
	response, err := client.CreateTranscription(ctx, AudioRequest{
		Model:    ModelWhisperLargeV3,
		FilePath: "./The Roman Emperors who went insane Gregory Aldrete and Lex Fridman.mp3",
	})
	a.NoError(err, "CreateTranscription error")
	a.NotEmpty(response.Text, "response.Text is empty")
}
{{- end }}

{{- range $model := .ModerationModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}

{{- range $model := .MultiModalModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}
