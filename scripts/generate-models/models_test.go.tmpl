// Code generated by groq-modeler DO NOT EDIT.
//
// Created at: {{ getCurrentDate }}
//
// groq-modeler Version 1.1.2
package groq

import (
	"context"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

{{- range $model := .ChatModels }}
// TestChatModels{{ $model.Name }} tests the {{ $model.Name }} model.
//
// It ensures that the model is supported by the groq-go library and the groq 
// API. // and the operations are working as expected for the specific model type.
func TestChatModels{{ $model.Name }}(t *testing.T) {
	if len(os.Getenv("UNIT")) < 1 {
		t.Skip("Skipping {{ $model.Name }} test")
	}
	a := assert.New(t)
	ctx := context.Background()
	client, err := NewClient(os.Getenv("GROQ_KEY"))
	a.NoError(err, "NewClient error")
	response, err := client.CreateChatCompletion(ctx, ChatCompletionRequest{
		Model: Model{{ $model.Name }},
		Messages: []ChatCompletionMessage{
			{
				Role:    ChatMessageRoleUser,
				Content: "What is a proface display?",
			},
		},
		MaxTokens: 10,
		RetryDelay: time.Second * 2,
	})
	a.NoError(err, "CreateChatCompletionJSON error")
	if len(response.Choices[0].Message.Content) == 0 {
		t.Errorf("response.Choices[0].Message.Content is empty for model {{ $model.Name }} calling CreateChatCompletion")
	}
}
{{- end }}

{{- range $model := .TranscriptionModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }}  transcription model.
//
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected with the api call using this transcription 
// model.
func Test{{ $model.Name }}(t *testing.T) {
	if len(os.Getenv("UNIT")) < 1 {
		t.Skip("Skipping {{ $model.Name }} test")
	}
	time.Sleep(time.Second * 5)
	a := assert.New(t)
	ctx := context.Background()
	client, err := NewClient(os.Getenv("GROQ_KEY"))
	a.NoError(err, "NewClient error")
	response, err := client.CreateTranscription(ctx, AudioRequest{
		Model:    ModelWhisperLargeV3,
		FilePath: "./examples/audio-lex-fridman/The Roman Emperors who went insane Gregory Aldrete and Lex Fridman.mp3",
	})
	a.NoError(err, "CreateTranscription error")
	a.NotEmpty(response.Text, "response.Text is empty for model WhisperLargeV3 calling CreateTranscription")
}
{{- end }}

{{- range $model := .ModerationModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
//
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
	if len(os.Getenv("UNIT")) < 1 {
		t.Skip("Skipping {{ $model.Name }} test")
	}
	time.Sleep(time.Second * 5)
	a := assert.New(t)
	ctx := context.Background()
	client, err := NewClient(os.Getenv("GROQ_KEY"))
	a.NoError(err, "NewClient error")
	response, err := client.Moderate(ctx, ModerationRequest{
		Model: Model{{ $model.Name }},
		Messages: []ChatCompletionMessage{
			{
				Role:    ChatMessageRoleUser,
				Content: "I want to kill them.",
			},
		},
	})
	a.NoError(err, "Moderation error")
	a.Equal(true, response.Flagged)
	a.Contains(
		response.Categories,
		CategoryViolentCrimes,
	)
}
{{- end }}

{{- range $model := .MultiModalModels }}
// Test{{ $model.Name }} tests the {{ $model.Name }} model.
//
// It ensures that the model is supported by the groq-go library, the groq API,
// and the operations are working as expected for the specific model type.
func Test{{ $model.Name }}(t *testing.T) {
}
{{- end }}
