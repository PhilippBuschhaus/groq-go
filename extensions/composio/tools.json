[
  {
    "name": "GITHUB_GITHUB_API_ROOT",
    "enum": "GITHUB_GITHUB_API_ROOT",
    "tags": [
      "meta"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Github api root",
    "description": "Get Hypermedia links to resources accessible in GitHub's REST API",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GithubApiRootResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Github api root"
  },
  {
    "name": "GITHUB_META_ROOT",
    "enum": "GITHUB_META_ROOT",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Github api root",
    "description": "Get Hypermedia links to resources accessible in GitHub's REST API\u003c\u003cDEPRECATED\n    use github_api_root\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GithubApiRootResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Github api root"
  },
  {
    "name": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
    "enum": "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List global security advisories",
    "description": "The text describes how to find global security advisories with specific\n    parameters. By default, it excludes malware advisories, which can be included\n    by setting the `type` parameter to `malware`. More on advisory types at\n    GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "affects": {
          "type": "array",
          "description": "If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages. Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1\u0026affects[]=package2@1.0.0` "
        },
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "cve_id": {
          "type": "string",
          "description": "If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. "
        },
        "cwes": {
          "type": "array",
          "description": "If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned. Example: `cwes=79,284,22` or `cwes[]=79\u0026cwes[]=284\u0026cwes[]=22` "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "ecosystem": {
          "type": "string",
          "description": ""
        },
        "ghsa_id": {
          "type": "string",
          "description": "If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. "
        },
        "is_withdrawn": {
          "type": "boolean",
          "description": "Whether to only return advisories that have been withdrawn."
        },
        "modified": {
          "type": "string",
          "description": "If specified, only show advisories that were updated or published on a date or date range. For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "published": {
          "type": "string",
          "description": "If specified, only return advisories that were published on a date or date range. For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "updated": {
          "type": "string",
          "description": "If specified, only return advisories that were updated on a date or date range. For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGlobalSecurityAdvisoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List global security advisories"
  },
  {
    "name": "GITHUB_SECURITY_ADVISORIES_LIST_GLOBAL_ADVISORIES",
    "enum": "GITHUB_SECURITY_ADVISORIES_LIST_GLOBAL_ADVISORIES",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List global security advisories",
    "description": "The text describes how to find global security advisories with specific\n    parameters. By default, it excludes malware advisories, which can be included\n    by setting the `type` parameter to `malware`. More on advisory types at\n    GitHub docs.\u003c\u003cDEPRECATED use list_global_security_advisories\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "affects": {
          "type": "array",
          "description": "If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages. Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1\u0026affects[]=package2@1.0.0` "
        },
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "cve_id": {
          "type": "string",
          "description": "If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. "
        },
        "cwes": {
          "type": "array",
          "description": "If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned. Example: `cwes=79,284,22` or `cwes[]=79\u0026cwes[]=284\u0026cwes[]=22` "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "ecosystem": {
          "type": "string",
          "description": ""
        },
        "ghsa_id": {
          "type": "string",
          "description": "If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. "
        },
        "is_withdrawn": {
          "type": "boolean",
          "description": "Whether to only return advisories that have been withdrawn."
        },
        "modified": {
          "type": "string",
          "description": "If specified, only show advisories that were updated or published on a date or date range. For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "published": {
          "type": "string",
          "description": "If specified, only return advisories that were published on a date or date range. For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "updated": {
          "type": "string",
          "description": "If specified, only return advisories that were updated on a date or date range. For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGlobalSecurityAdvisoriesResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List global security advisories"
  },
  {
    "name": "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY",
    "enum": "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a global security advisory",
    "description": "Gets a global security advisory using its GitHub Security Advisory (GHSA)\n    identifier.",
    "parameters": {
      "type": "object",
      "properties": {
        "ghsa_id": {
          "type": "string",
          "description": "The GHSA (GitHub Security Advisory) identifier of the advisory."
        }
      },
      "required": [
        "ghsa_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGlobalSecurityAdvisoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a global security advisory"
  },
  {
    "name": "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
    "enum": "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a github app from a manifest",
    "description": "This endpoint is for the handshake in the GitHub App Manifest flow, allowing\n    retrieval of app `id`, `pem` (private key), and `webhook_secret` with a\n    temporary `code` after app creation.",
    "parameters": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code"
        }
      },
      "required": [
        "code"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGithubAppFromAManifestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a github app from a manifest"
  },
  {
    "name": "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
    "enum": "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List installation requests for the authenticated app",
    "description": "Lists all the pending installation requests for the authenticated GitHub\n    App.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListInstallationRequestsForTheAuthenticatedAppResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List installation requests for the authenticated app"
  },
  {
    "name": "GITHUB_DELETE_AN_APP_AUTHORIZATION",
    "enum": "GITHUB_DELETE_AN_APP_AUTHORIZATION",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an app authorization",
    "description": "OAuth and GitHub app owners can revoke user grants with Basic Authentication,\n    using `client_id` and `client_secret`, along with a valid `access_token`.\n    This action deletes all OAuth tokens and removes the app from the user's\n    GitHub settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The OAuth access token used to authenticate to the GitHub API."
        },
        "client_id": {
          "type": "string",
          "description": "The client ID of the GitHub app."
        }
      },
      "required": [
        "client_id",
        "access_token"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnAppAuthorizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an app authorization"
  },
  {
    "name": "GITHUB_CHECK_A_TOKEN",
    "enum": "GITHUB_CHECK_A_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check a token",
    "description": "This API method enables OAuth/GitHub apps to verify token validity without\n    facing login rate limits, using Basic Authentication with client_id and\n    client_secret. Invalid tokens return a 404 NOT FOUND.",
    "parameters": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access_token of the OAuth or GitHub application."
        },
        "client_id": {
          "type": "string",
          "description": "The client ID of the GitHub app."
        }
      },
      "required": [
        "client_id",
        "access_token"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckATokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check a token"
  },
  {
    "name": "GITHUB_RESET_A_TOKEN",
    "enum": "GITHUB_RESET_A_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Reset a token",
    "description": "This API method lets OAuth and GitHub apps auto-reset valid OAuth tokens.\n    Apps must save the \"token\" from the response. Basic Authentication with\n    app credentials is needed. Invalid tokens return a `404 NOT FOUND`.",
    "parameters": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access_token of the OAuth or GitHub application."
        },
        "client_id": {
          "type": "string",
          "description": "The client ID of the GitHub app."
        }
      },
      "required": [
        "client_id",
        "access_token"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ResetATokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Reset a token"
  },
  {
    "name": "GITHUB_DELETE_AN_APP_TOKEN",
    "enum": "GITHUB_DELETE_AN_APP_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an app token",
    "description": "Owners of OAuth or GitHub apps can revoke a specific token using Basic Authentication\n    with the app's `client_id` and `client_secret`.",
    "parameters": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The OAuth access token used to authenticate to the GitHub API."
        },
        "client_id": {
          "type": "string",
          "description": "The client ID of the GitHub app."
        }
      },
      "required": [
        "client_id",
        "access_token"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnAppTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an app token"
  },
  {
    "name": "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
    "enum": "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a scoped access token",
    "description": "Create a repo or permission-scoped token using a non-scoped token, specifying\n    accessible repositories and permissions. Invalid tokens yield a 404 error.\n    Use Basic Authentication with the GitHub App's client credentials.",
    "parameters": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access token used to authenticate to the GitHub API."
        },
        "client_id": {
          "type": "string",
          "description": "The client ID of the GitHub app."
        },
        "permissions__actions": {
          "type": "string",
          "description": ""
        },
        "permissions__administration": {
          "type": "string",
          "description": ""
        },
        "permissions__checks": {
          "type": "string",
          "description": ""
        },
        "permissions__codespaces": {
          "type": "string",
          "description": ""
        },
        "permissions__contents": {
          "type": "string",
          "description": ""
        },
        "permissions__dependabot__secrets": {
          "type": "string",
          "description": ""
        },
        "permissions__deployments": {
          "type": "string",
          "description": ""
        },
        "permissions__email__addresses": {
          "type": "string",
          "description": ""
        },
        "permissions__environments": {
          "type": "string",
          "description": ""
        },
        "permissions__followers": {
          "type": "string",
          "description": ""
        },
        "permissions__git__ssh__keys": {
          "type": "string",
          "description": ""
        },
        "permissions__gpg__keys": {
          "type": "string",
          "description": ""
        },
        "permissions__interaction__limits": {
          "type": "string",
          "description": ""
        },
        "permissions__issues": {
          "type": "string",
          "description": ""
        },
        "permissions__members": {
          "type": "string",
          "description": ""
        },
        "permissions__metadata": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__administration": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__announcement__banners": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__copilot__seat__management": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__custom__org__roles": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__custom__properties": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__custom__roles": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__events": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__hooks": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__packages": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__personal__access__token__requests": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__personal__access__tokens": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__plan": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__projects": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__secrets": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__self__hosted__runners": {
          "type": "string",
          "description": ""
        },
        "permissions__organization__user__blocking": {
          "type": "string",
          "description": ""
        },
        "permissions__packages": {
          "type": "string",
          "description": ""
        },
        "permissions__pages": {
          "type": "string",
          "description": ""
        },
        "permissions__profile": {
          "type": "string",
          "description": ""
        },
        "permissions__pull__requests": {
          "type": "string",
          "description": ""
        },
        "permissions__repository__custom__properties": {
          "type": "string",
          "description": ""
        },
        "permissions__repository__hooks": {
          "type": "string",
          "description": ""
        },
        "permissions__repository__projects": {
          "type": "string",
          "description": ""
        },
        "permissions__secret__scanning__alerts": {
          "type": "string",
          "description": ""
        },
        "permissions__secrets": {
          "type": "string",
          "description": ""
        },
        "permissions__security__events": {
          "type": "string",
          "description": ""
        },
        "permissions__single__file": {
          "type": "string",
          "description": ""
        },
        "permissions__starring": {
          "type": "string",
          "description": ""
        },
        "permissions__statuses": {
          "type": "string",
          "description": ""
        },
        "permissions__team__discussions": {
          "type": "string",
          "description": ""
        },
        "permissions__vulnerability__alerts": {
          "type": "string",
          "description": ""
        },
        "permissions__workflows": {
          "type": "string",
          "description": ""
        },
        "repositories": {
          "type": "array",
          "description": "The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified. "
        },
        "repository_ids": {
          "type": "array",
          "description": "The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified. "
        },
        "target": {
          "type": "string",
          "description": "The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified. "
        },
        "target_id": {
          "type": "integer",
          "description": "The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified. "
        }
      },
      "required": [
        "client_id",
        "access_token"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAScopedAccessTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a scoped access token"
  },
  {
    "name": "GITHUB_GET_AN_APP",
    "enum": "GITHUB_GET_AN_APP",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an app",
    "description": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App.\n    You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).",
    "parameters": {
      "type": "object",
      "properties": {
        "app_slug": {
          "type": "string",
          "description": "App Slug"
        }
      },
      "required": [
        "app_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnAppResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an app"
  },
  {
    "name": "GITHUB_GET_AN_ASSIGNMENT",
    "enum": "GITHUB_GET_AN_ASSIGNMENT",
    "tags": [
      "classroom"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an assignment",
    "description": "Gets a GitHub Classroom assignment. Assignment will only be returned if\n    the current user is an administrator of the GitHub Classroom for the assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignment_id": {
          "type": "integer",
          "description": "The unique identifier of the classroom assignment."
        }
      },
      "required": [
        "assignment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnAssignmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an assignment"
  },
  {
    "name": "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
    "enum": "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
    "tags": [
      "classroom"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List accepted assignments for an assignment",
    "description": "Lists any assignment repositories that have been created by students accepting\n    a GitHub Classroom assignment. Accepted assignments will only be returned\n    if the current user is an administrator of the GitHub Classroom for the\n    assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignment_id": {
          "type": "integer",
          "description": "The unique identifier of the classroom assignment."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "assignment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAcceptedAssignmentsForAnAssignmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List accepted assignments for an assignment"
  },
  {
    "name": "GITHUB_GET_ASSIGNMENT_GRADES",
    "enum": "GITHUB_GET_ASSIGNMENT_GRADES",
    "tags": [
      "classroom"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get assignment grades",
    "description": "Gets grades for a GitHub Classroom assignment. Grades will only be returned\n    if the current user is an administrator of the GitHub Classroom for the\n    assignment.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignment_id": {
          "type": "integer",
          "description": "The unique identifier of the classroom assignment."
        }
      },
      "required": [
        "assignment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAssignmentGradesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get assignment grades"
  },
  {
    "name": "GITHUB_LIST_CLASSROOMS",
    "enum": "GITHUB_LIST_CLASSROOMS",
    "tags": [
      "classroom"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List classrooms",
    "description": "Lists GitHub Classroom classrooms for the current user. Classrooms will\n    only be returned if the current user is an administrator of one or more\n    GitHub Classrooms.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListClassroomsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List classrooms"
  },
  {
    "name": "GITHUB_GET_A_CLASSROOM",
    "enum": "GITHUB_GET_A_CLASSROOM",
    "tags": [
      "classroom"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a classroom",
    "description": "Gets a GitHub Classroom classroom for the current user. Classroom will only\n    be returned if the current user is an administrator of the GitHub Classroom.",
    "parameters": {
      "type": "object",
      "properties": {
        "classroom_id": {
          "type": "integer",
          "description": "The unique identifier of the classroom."
        }
      },
      "required": [
        "classroom_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAClassroomResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a classroom"
  },
  {
    "name": "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
    "enum": "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
    "tags": [
      "classroom"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List assignments for a classroom",
    "description": "Lists GitHub Classroom assignments for a classroom. Assignments will only\n    be returned if the current user is an administrator of the GitHub Classroom.",
    "parameters": {
      "type": "object",
      "properties": {
        "classroom_id": {
          "type": "integer",
          "description": "The unique identifier of the classroom."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "classroom_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAssignmentsForAClassroomResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List assignments for a classroom"
  },
  {
    "name": "GITHUB_GET_ALL_CODES_OF_CONDUCT",
    "enum": "GITHUB_GET_ALL_CODES_OF_CONDUCT",
    "tags": [
      "codes-of-conduct"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all codes of conduct",
    "description": "Returns array of all GitHub's codes of conduct.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllCodesOfConductResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all codes of conduct"
  },
  {
    "name": "GITHUB_GET_A_CODE_OF_CONDUCT",
    "enum": "GITHUB_GET_A_CODE_OF_CONDUCT",
    "tags": [
      "codes-of-conduct"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a code of conduct",
    "description": "Returns information about the specified GitHub code of conduct.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key"
        }
      },
      "required": [
        "key"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACodeOfConductResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a code of conduct"
  },
  {
    "name": "GITHUB_GET_EMOJIS",
    "enum": "GITHUB_GET_EMOJIS",
    "tags": [
      "emojis"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get emojis",
    "description": "Lists all the emojis available to use on GitHub.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetEmojisResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get emojis"
  },
  {
    "name": "GITHUB_EMO_J_IS_GET",
    "enum": "GITHUB_EMO_J_IS_GET",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get emojis",
    "description": "Lists all the emojis available to use on GitHub.\u003c\u003cDEPRECATED use get_emojis\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetEmojisResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get emojis"
  },
  {
    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE",
    "enum": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List dependabot alerts for an enterprise",
    "description": "The endpoint lists Dependabot alerts for enterprise-owned repositories,\n    accessible only to enterprise members who are organization owners or security\n    managers. OAuth tokens require `repo` or `security_events` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "ecosystem": {
          "type": "string",
          "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned. Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` "
        },
        "enterprise": {
          "type": "string",
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id. "
        },
        "first": {
          "type": "integer",
          "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results. "
        },
        "last": {
          "type": "integer",
          "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results. "
        },
        "package": {
          "type": "string",
          "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "scope": {
          "type": "string",
          "description": ""
        },
        "severity": {
          "type": "string",
          "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned. Can be: `low`, `medium`, `high`, `critical` "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": "A comma-separated list of states. If specified, only alerts with these states will be returned. Can be: `auto_dismissed`, `dismissed`, `fixed`, `open` "
        }
      },
      "required": [
        "enterprise"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDependabotAlertsForAnEnterpriseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List dependabot alerts for an enterprise"
  },
  {
    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE",
    "enum": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE",
    "tags": [
      "secret-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List secret scanning alerts for an enterprise",
    "description": "This endpoint provides secret scanning alerts for enterprise repositories,\n    focusing on new alerts in organizations where the user holds ownership or\n    security management roles. Access requires proper membership and either\n    `repo` or `security_events` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "enterprise": {
          "type": "string",
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "resolution": {
          "type": "string",
          "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. "
        },
        "secret_type": {
          "type": "string",
          "description": "A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "validity": {
          "type": "string",
          "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. "
        }
      },
      "required": [
        "enterprise"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSecretScanningAlertsForAnEnterpriseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List secret scanning alerts for an enterprise"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_EVENTS",
    "enum": "GITHUB_LIST_PUBLIC_EVENTS",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public events",
    "description": "We delay the public events feed by five minutes, which means the most recent\n    event returned by the public events API actually occurred at least five\n    minutes ago.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicEventsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public events"
  },
  {
    "name": "GITHUB_GET_FEEDS",
    "enum": "GITHUB_GET_FEEDS",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get feeds",
    "description": "GitHub offers authenticated users feeds like public/private timelines, user/organization\n    timelines, \u0026 security advisories in JSON/Atom formats. Private feeds need\n    Basic Auth.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetFeedsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get feeds"
  },
  {
    "name": "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gists for the authenticated user",
    "description": "Lists the authenticated user's gists or if called anonymously, this endpoint\n    returns all public gists:",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGistsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gists for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_GIST",
    "enum": "GITHUB_CREATE_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a gist",
    "description": "Allows you to add a new gist with one or more files. **Note:** Don't name\n    your files \"gistfile\" with a numerical suffix. This is the format of the\n    automatic naming scheme that Gist uses internally.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the gist"
        },
        "files": {
          "type": "object",
          "description": "Names and content for the files that make up the gist"
        },
        "public": {
          "type": "boolean",
          "description": "Public"
        }
      },
      "required": [
        "files"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a gist"
  },
  {
    "name": "GITHUB_GIST_S_CREATE",
    "enum": "GITHUB_GIST_S_CREATE",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a gist",
    "description": "Allows you to add a new gist with one or more files. **Note:** Don't name\n    your files \"gistfile\" with a numerical suffix. This is the format of the\n    automatic naming scheme that Gist uses internally.\u003c\u003cDEPRECATED use create_a_gist\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the gist"
        },
        "files": {
          "type": "object",
          "description": "Names and content for the files that make up the gist"
        },
        "public": {
          "type": "boolean",
          "description": "Public"
        }
      },
      "required": [
        "files"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGistResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create a gist"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_GISTS",
    "enum": "GITHUB_LIST_PUBLIC_GISTS",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public gists",
    "description": "Public gists can be listed from most to least recently updated, with pagination\n    allowing up to 3000 gists retrieval, e.g., 100 pages of 30 gists or 30 pages\n    of 100 gists.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicGistsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public gists"
  },
  {
    "name": "GITHUB_GIST_S_LIST_PUBLIC",
    "enum": "GITHUB_GIST_S_LIST_PUBLIC",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public gists",
    "description": "Public gists can be listed from most to least recently updated, with pagination\n    allowing up to 3000 gists retrieval, e.g., 100 pages of 30 gists or 30 pages\n    of 100 gists.\u003c\u003cDEPRECATED use list_public_gists\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicGistsResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List public gists"
  },
  {
    "name": "GITHUB_LIST_STARRED_GISTS",
    "enum": "GITHUB_LIST_STARRED_GISTS",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List starred gists",
    "description": "List the authenticated user's starred gists:",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListStarredGistsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List starred gists"
  },
  {
    "name": "GITHUB_GET_A_GIST",
    "enum": "GITHUB_GET_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a gist",
    "description": "This endpoint fetches a gist with options for raw markdown (default) or\n    base64-encoded content, supporting custom media types detailed at GitHub\n    docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a gist"
  },
  {
    "name": "GITHUB_UPDATE_A_GIST",
    "enum": "GITHUB_UPDATE_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a gist",
    "description": "Edit a gist by updating its description or files, where unchanged files\n    remain as is. Editing requires at least a description or file change. Supports\n    media types for raw or base64-encoded content.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the gist."
        },
        "files": {
          "type": "object",
          "description": "The gist files to be updated, renamed, or deleted. Each `key` must match the current filename (including extension) of the targeted gist file. For example: `hello.py`. To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be deleted if the specified object does not contain at least one of `content` or `filename`. "
        },
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a gist"
  },
  {
    "name": "GITHUB_DELETE_A_GIST",
    "enum": "GITHUB_DELETE_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a gist",
    "description": "This endpoint deletes a gist using its ID. It returns a 204 on success and\n    error statuses like 404, 304, or 403 for issues. More info at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a gist"
  },
  {
    "name": "GITHUB_LIST_GIST_COMMENTS",
    "enum": "GITHUB_LIST_GIST_COMMENTS",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gist comments",
    "description": "This API endpoint lists gist comments, supporting media types for raw markdown\n    (default) or base64-encoded contents for handling invalid UTF-8 sequences.\n    For more, see GitHub's media types documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGistCommentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gist comments"
  },
  {
    "name": "GITHUB_CREATE_A_GIST_COMMENT",
    "enum": "GITHUB_CREATE_A_GIST_COMMENT",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a gist comment",
    "description": "This endpoint allows comments on gists and supports media types for raw\n    markdown or base64-encoded content. See GitHub's \"Media types\" for more\n    info.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The comment text."
        },
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGistCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a gist comment"
  },
  {
    "name": "GITHUB_GET_A_GIST_COMMENT",
    "enum": "GITHUB_GET_A_GIST_COMMENT",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a gist comment",
    "description": "This endpoint lets you comment on a gist with options for media types: raw\n    markdown (default) and base64-encoded content. For more, visit GitHub's\n    media types documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGistCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a gist comment"
  },
  {
    "name": "GITHUB_UPDATE_A_GIST_COMMENT",
    "enum": "GITHUB_UPDATE_A_GIST_COMMENT",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a gist comment",
    "description": "This endpoint allows updating a gist comment and supports two custom media\n    types: `application/vnd.github.raw+json` for raw markdown (default), and\n    `application/vnd.github.base64+json` for base64-encoded content, useful\n    for invalid UTF-8 sequences.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The comment text."
        },
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id",
        "comment_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAGistCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a gist comment"
  },
  {
    "name": "GITHUB_DELETE_A_GIST_COMMENT",
    "enum": "GITHUB_DELETE_A_GIST_COMMENT",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a gist comment",
    "description": "To delete a gist comment, use the gist and comment IDs. Possible responses:\n    204 (deleted), 304 (not modified), 404 (not found), 403 (forbidden). Details\n    at GitHub API docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAGistCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a gist comment"
  },
  {
    "name": "GITHUB_LIST_GIST_COMMITS",
    "enum": "GITHUB_LIST_GIST_COMMITS",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gist commits",
    "description": "This endpoint fetches a list of gist commits using `gist_id`, offering pagination\n    via `per_page` \u0026 `page`. It provides details like commit URL, version, user\n    info, and date. Check the documentation for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGistCommitsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gist commits"
  },
  {
    "name": "GITHUB_LIST_GIST_FORKS",
    "enum": "GITHUB_LIST_GIST_FORKS",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gist forks",
    "description": "This endpoint lists all forks of a specified gist (`gist_id`), supporting\n    pagination via `per_page` and `page`. It returns gist forks with user info\n    and metadata. For more, see GitHub's Documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGistForksResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gist forks"
  },
  {
    "name": "GITHUB_FORK_A_GIST",
    "enum": "GITHUB_FORK_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Fork a gist",
    "description": "Forks a GitHub gist using its ID, returns forked gist details in JSON with\n    a 201 status for success. Requires `gist_id`. See documentation for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ForkAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Fork a gist"
  },
  {
    "name": "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
    "enum": "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a gist is starred",
    "description": "This endpoint determines if a gist is starred by ID, returning 204 if yes,\n    404 if not found, 304 if unchanged, and 403 if access is denied. More information\n    is available in the GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAGistIsStarredResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a gist is starred"
  },
  {
    "name": "GITHUB_STAR_A_GIST",
    "enum": "GITHUB_STAR_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Star a gist",
    "description": "Note that you'll need to set `Content-Length` to zero when calling out to\n    this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StarAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Star a gist"
  },
  {
    "name": "GITHUB_UNSTAR_A_GIST",
    "enum": "GITHUB_UNSTAR_A_GIST",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unstar a gist",
    "description": "Endpoint supports un-starring a gist via DELETE method, providing responses\n    for success (204), not modified (304), not found (404), and forbidden (403).\n    More details at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        }
      },
      "required": [
        "gist_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnstarAGistResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unstar a gist"
  },
  {
    "name": "GITHUB_GET_A_GIST_REVISION",
    "enum": "GITHUB_GET_A_GIST_REVISION",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a gist revision",
    "description": "This endpoint fetches a specific gist revision, supporting custom media\n    types for raw markdown or base64-encoded content. For details, see GitHub's\n    media types documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "gist_id": {
          "type": "string",
          "description": "The unique identifier of the gist."
        },
        "sha": {
          "type": "string",
          "description": "Sha"
        }
      },
      "required": [
        "gist_id",
        "sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGistRevisionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a gist revision"
  },
  {
    "name": "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
    "enum": "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
    "tags": [
      "gitignore"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all gitignore templates",
    "description": "List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllGitignoreTemplatesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all gitignore templates"
  },
  {
    "name": "GITHUB_GET_A_GITIGNORE_TEMPLATE",
    "enum": "GITHUB_GET_A_GITIGNORE_TEMPLATE",
    "tags": [
      "gitignore"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a gitignore template",
    "description": "This endpoint retrieves the contents of a .gitignore template, supporting\n    custom media types including `application/vnd.github.raw+json` for raw content.\n    More on media types at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        }
      },
      "required": [
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGitignoreTemplateResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a gitignore template"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
    "enum": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories accessible to the app installation",
    "description": "List repositories that an app installation can access.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesAccessibleToTheAppInstallationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories accessible to the app installation"
  },
  {
    "name": "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
    "enum": "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Revoke an installation access token",
    "description": "Revoking an installation token invalidates it, preventing its use for authentication\n    and access. A new token must be created for other endpoints requiring it,\n    via the specified GitHub documentation link.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RevokeAnInstallationAccessTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Revoke an installation access token"
  },
  {
    "name": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issues assigned to the authenticated user",
    "description": "Fetches issues assigned to the user across all repos, using filters to customize\n    the fetch. Issues and pull requests are included, discernible by the `pull_request`\n    key. Supports various media types for responses. Visit GitHub Docs for more\n    info.",
    "parameters": {
      "type": "object",
      "properties": {
        "collab": {
          "type": "boolean",
          "description": "Collab"
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "filter": {
          "type": "string",
          "description": ""
        },
        "labels": {
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`"
        },
        "orgs": {
          "type": "boolean",
          "description": "Orgs"
        },
        "owned": {
          "type": "boolean",
          "description": "Owned"
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pulls": {
          "type": "boolean",
          "description": "Pulls"
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssuesAssignedToTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List issues assigned to the authenticated user"
  },
  {
    "name": "GITHUB_ISSUES_LIST",
    "enum": "GITHUB_ISSUES_LIST",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issues assigned to the authenticated user",
    "description": "Fetches issues assigned to the user across all repos, using filters to customize\n    the fetch. Issues and pull requests are included, discernible by the `pull_request`\n    key. Supports various media types for responses. Visit GitHub Docs for more\n    info.\u003c\u003cDEPRECATED use list_issues_assigned_to_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "collab": {
          "type": "boolean",
          "description": "Collab"
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "filter": {
          "type": "string",
          "description": ""
        },
        "labels": {
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`"
        },
        "orgs": {
          "type": "boolean",
          "description": "Orgs"
        },
        "owned": {
          "type": "boolean",
          "description": "Owned"
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pulls": {
          "type": "boolean",
          "description": "Pulls"
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssuesAssignedToTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List issues assigned to the authenticated user"
  },
  {
    "name": "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
    "enum": "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
    "tags": [
      "licenses"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all commonly used licenses",
    "description": "Lists the most commonly used licenses on GitHub. For more information, see\n    \"[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).\"",
    "parameters": {
      "type": "object",
      "properties": {
        "featured": {
          "type": "boolean",
          "description": "Featured"
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllCommonlyUsedLicensesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all commonly used licenses"
  },
  {
    "name": "GITHUB_GET_A_LICENSE",
    "enum": "GITHUB_GET_A_LICENSE",
    "tags": [
      "licenses"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a license",
    "description": "Gets information about a specific license. For more information, see \"[Licensing\n    a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).\"",
    "parameters": {
      "type": "object",
      "properties": {
        "license": {
          "type": "string",
          "description": "License"
        }
      },
      "required": [
        "license"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetALicenseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a license"
  },
  {
    "name": "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
    "enum": "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
    "tags": [
      "markdown"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Render a markdown document",
    "description": "This endpoint converts Markdown to HTML, offering 'markdown' and 'gfm' modes,\n    with 'gfm' requiring a repo context. See GitHub Docs for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. "
        },
        "mode": {
          "type": "string",
          "description": ""
        },
        "text": {
          "type": "string",
          "description": "The Markdown text to render in HTML."
        }
      },
      "required": [
        "text"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RenderAMarkdownDocumentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Render a markdown document"
  },
  {
    "name": "GITHUB_GET_GITHUB_META_INFORMATION",
    "enum": "GITHUB_GET_GITHUB_META_INFORMATION",
    "tags": [
      "meta"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github meta information",
    "description": "The API provides metadata on GitHub, including its IP addresses (IPv4 and\n    IPv6) and domain names. Refer directly for current values; not all features\n    support IPv6. More info at GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubMetaInformationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github meta information"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
    "enum": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public events for a network of repositories",
    "description": "The \"List public events for a network of repositories\" endpoint lets users\n    explore public repo network activities by `{owner}/{repo}`, with pagination\n    and page filtering options. More info at GitHub's documentation website.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicEventsForANetworkOfRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public events for a network of repositories"
  },
  {
    "name": "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List notifications for the authenticated user",
    "description": "List all notifications for the current user, sorted by most recently updated.",
    "parameters": {
      "type": "object",
      "properties": {
        "all": {
          "type": "boolean",
          "description": "If `true`, show notifications marked as read."
        },
        "before": {
          "type": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "participating": {
          "type": "boolean",
          "description": "If `true`, only shows notifications in which the user is directly participating or mentioned. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 50). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListNotificationsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List notifications for the authenticated user"
  },
  {
    "name": "GITHUB_MARK_NOTIFICATIONS_AS_READ",
    "enum": "GITHUB_MARK_NOTIFICATIONS_AS_READ",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Mark notifications as read",
    "description": "Marks all notifications as \"read\" for the user. If too many to process at\n    once, a `202 Accepted` status is received, and it's handled asynchronously.\n    Check remaining \"unread\" with a specific GitHub endpoint and `all=false`\n    query.",
    "parameters": {
      "type": "object",
      "properties": {
        "last_read_at": {
          "type": "string",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. "
        },
        "read": {
          "type": "boolean",
          "description": "Whether the notification has been read."
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MarkNotificationsAsReadResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Mark notifications as read"
  },
  {
    "name": "GITHUB_GET_A_THREAD",
    "enum": "GITHUB_GET_A_THREAD",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a thread",
    "description": "Gets information about a notification thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "integer",
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). "
        }
      },
      "required": [
        "thread_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAThreadResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a thread"
  },
  {
    "name": "GITHUB_MARK_A_THREAD_AS_READ",
    "enum": "GITHUB_MARK_A_THREAD_AS_READ",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Mark a thread as read",
    "description": "Marks a thread as \"read.\" Marking a thread as \"read\" is equivalent to clicking\n    a notification in your notification inbox on GitHub: https://github.com/notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "integer",
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). "
        }
      },
      "required": [
        "thread_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MarkAThreadAsReadResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Mark a thread as read"
  },
  {
    "name": "GITHUB_MARK_A_THREAD_AS_DONE",
    "enum": "GITHUB_MARK_A_THREAD_AS_DONE",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Mark a thread as done",
    "description": "Marks a thread as \"done.\" Marking a thread as \"done\" is equivalent to marking\n    a notification in your notification inbox on GitHub as done: https://github.com/notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "integer",
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). "
        }
      },
      "required": [
        "thread_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MarkAThreadAsDoneResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Mark a thread as done"
  },
  {
    "name": "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a thread subscription for the authenticated user",
    "description": "This text explains how to verify if a user is subscribed to a thread, noting\n    subscriptions occur only if the user actively participates or manually subscribes.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "integer",
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). "
        }
      },
      "required": [
        "thread_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAThreadSubscriptionForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a thread subscription for the authenticated user"
  },
  {
    "name": "GITHUB_SET_A_THREAD_SUBSCRIPTION",
    "enum": "GITHUB_SET_A_THREAD_SUBSCRIPTION",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set a thread subscription",
    "description": "This endpoint manages repo thread notifications: ignore to halt alerts until\n    mentioned, subscribe to activate alerts, and unsubscribe to delete notifications\n    for a thread.",
    "parameters": {
      "type": "object",
      "properties": {
        "ignored": {
          "type": "boolean",
          "description": "Whether to block all notifications from a thread."
        },
        "thread_id": {
          "type": "integer",
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). "
        }
      },
      "required": [
        "thread_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetAThreadSubscriptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set a thread subscription"
  },
  {
    "name": "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
    "enum": "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a thread subscription",
    "description": "Mutes conversation notifications until you comment or are @mentioned, but\n    still alerts if watching the repository. Use the 'Set a thread subscription'\n    endpoint with `ignore` true to mute while watching a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "thread_id": {
          "type": "integer",
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user)). "
        }
      },
      "required": [
        "thread_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAThreadSubscriptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a thread subscription"
  },
  {
    "name": "GITHUB_GET_OCTOCAT",
    "enum": "GITHUB_GET_OCTOCAT",
    "tags": [
      "meta"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get octocat",
    "description": "Get the octocat as ASCII art",
    "parameters": {
      "type": "object",
      "properties": {
        "s": {
          "type": "string",
          "description": "The words to show in Octocat\"s speech bubble"
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetOctocatResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get octocat"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATIONS",
    "enum": "GITHUB_LIST_ORGANIZATIONS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organizations",
    "description": "The text describes an approach to list organizations by their creation order,\n    utilizing a `since` parameter for pagination, with direction to use the\n    [Link header] for navigating to subsequent pages.",
    "parameters": {
      "type": "object",
      "properties": {
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "integer",
          "description": "An organization ID. Only return organizations with an ID greater than this ID. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organizations"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION",
    "enum": "GITHUB_GET_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization",
    "description": "When `two_factor_requirement_enabled` is true, an organization mandates\n    2FA for all. Details require organization ownership or `admin:org` scope\n    with tokens. GitHub Apps need `Organization plan` permission for plan details.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization"
  },
  {
    "name": "GITHUB_UPDATE_AN_ORGANIZATION",
    "enum": "GITHUB_UPDATE_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an organization",
    "description": "GitHub is updating to allow distinct permissions for different repository\n    types, replacing `members_allowed_repository_creation_type`. Only owners\n    with proper token scopes can make these changes, affecting all and enterprise\n    organizations.",
    "parameters": {
      "type": "object",
      "properties": {
        "advanced_security_enabled_for_new_repositories": {
          "type": "boolean",
          "description": "Whether GitHub Advanced Security is automatically enabled for new repositories. To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\" You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request. "
        },
        "billing_email": {
          "type": "string",
          "description": "Billing email address. This address is not publicized."
        },
        "blog": {
          "type": "string",
          "description": "Blog"
        },
        "company": {
          "type": "string",
          "description": "The company name."
        },
        "default_repository_permission": {
          "type": "string",
          "description": ""
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "type": "boolean",
          "description": "Whether Dependabot alerts is automatically enabled for new repositories. To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\" You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request. "
        },
        "dependabot_security_updates_enabled_for_new_repositories": {
          "type": "boolean",
          "description": "Whether Dependabot security updates is automatically enabled for new repositories. To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\" You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request. "
        },
        "dependency_graph_enabled_for_new_repositories": {
          "type": "boolean",
          "description": "Whether dependency graph is automatically enabled for new repositories. To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\" You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request. "
        },
        "description": {
          "type": "string",
          "description": "The description of the company."
        },
        "email": {
          "type": "string",
          "description": "The publicly visible email address."
        },
        "has_organization_projects": {
          "type": "boolean",
          "description": "Whether an organization can use organization projects."
        },
        "has_repository_projects": {
          "type": "boolean",
          "description": "Whether repositories that belong to the organization can use repository projects. "
        },
        "location": {
          "type": "string",
          "description": "The location."
        },
        "members_allowed_repository_creation_type": {
          "type": "string",
          "description": ""
        },
        "members_can_create_internal_repositories": {
          "type": "boolean",
          "description": "Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation. "
        },
        "members_can_create_pages": {
          "type": "boolean",
          "description": "Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted. "
        },
        "members_can_create_private_pages": {
          "type": "boolean",
          "description": "Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted. "
        },
        "members_can_create_private_repositories": {
          "type": "boolean",
          "description": "Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation. "
        },
        "members_can_create_public_pages": {
          "type": "boolean",
          "description": "Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted. "
        },
        "members_can_create_public_repositories": {
          "type": "boolean",
          "description": "Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation. "
        },
        "members_can_create_repositories": {
          "type": "boolean",
          "description": "Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. "
        },
        "members_can_fork_private_repositories": {
          "type": "boolean",
          "description": "Whether organization members can fork private organization repositories."
        },
        "name": {
          "type": "string",
          "description": "The shorthand name of the company."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_scanning_enabled_for_new_repositories": {
          "type": "boolean",
          "description": "Whether secret scanning is automatically enabled for new repositories. To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\" You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request. "
        },
        "secret_scanning_push_protection_custom_link": {
          "type": "string",
          "description": "If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret. "
        },
        "secret_scanning_push_protection_custom_link_enabled": {
          "type": "boolean",
          "description": "Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. "
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "type": "boolean",
          "description": "Whether secret scanning push protection is automatically enabled for new repositories. To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\" You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request. "
        },
        "twitter_username": {
          "type": "string",
          "description": "The Twitter username of the company."
        },
        "web_commit_signoff_required": {
          "type": "boolean",
          "description": "Whether contributors to organization repositories are required to sign off on commits they make through GitHub\"s web interface. "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an organization"
  },
  {
    "name": "GITHUB_DELETE_AN_ORGANIZATION",
    "enum": "GITHUB_DELETE_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an organization",
    "description": "This process deletes an organization and its repositories, making its login\n    unavailable for 90 days. Users should review the Terms of Service on GitHub's\n    site before deletion.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an organization"
  },
  {
    "name": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github actions cache usage for an organization",
    "description": "This API provides the total GitHub Actions cache usage for an organization,\n    refreshing data roughly every 5 minutes. OAuth and personal access tokens\n    require `read:org` scope for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubActionsCacheUsageForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github actions cache usage for an organization"
  },
  {
    "name": "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
    "enum": "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listreposwithghactionscacheusage",
    "description": "This API lists GitHub Actions cache usage for organizations, refreshing\n    data every ~5 minutes. OAuth and classic personal access tokens must have\n    `read:org` scope for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReposWithGhactionsCacheUsageResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listreposwithghactionscacheusage"
  },
  {
    "name": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
    "enum": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
    "tags": [
      "oidc"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Customoidcsubjectclaimtemplate",
    "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.\n    OAuth app tokens and personal access tokens (classic) need the `read:org`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CustomOidcsubjectClaimTemplateResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Customoidcsubjectclaimtemplate"
  },
  {
    "name": "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
    "enum": "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
    "tags": [
      "oidc"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Configureoidcsubjectclaimtemplate",
    "description": "Creates or updates the customization template for an OpenID Connect (OIDC)\n    subject claim. OAuth app tokens and personal access tokens (classic) need\n    the `write:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "include_claim_keys": {
          "type": "array",
          "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "include_claim_keys"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ConfigureOidcsubjectClaimTemplateResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Configureoidcsubjectclaimtemplate"
  },
  {
    "name": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github actions permissions for an organization",
    "description": "Gets the GitHub Actions permissions policy for repositories and allowed\n    actions and reusable workflows in an organization. OAuth tokens and personal\n    access tokens (classic) need the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubActionsPermissionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github actions permissions for an organization"
  },
  {
    "name": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set github actions permissions for an organization",
    "description": "Sets the GitHub Actions permissions policy for repositories and allowed\n    actions and reusable workflows in an organization. OAuth app tokens and\n    personal access tokens (classic) need the `admin:org` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "allowed_actions": {
          "type": "string",
          "description": ""
        },
        "enabled_repositories": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "enabled_repositories"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetGithubActionsPermissionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set github actions permissions for an organization"
  },
  {
    "name": "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
    "enum": "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listorgreposwithgithubactionsenabled",
    "description": "This endpoint lists repos enabled for GitHub Actions in an org, requiring\n    the `enabled_repositories` set to `selected` and `admin:org` scope for OAuth/personal\n    tokens. See docs for setting permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrgReposWithgithubActionsEnabledResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listorgreposwithgithubactionsenabled"
  },
  {
    "name": "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
    "enum": "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enable github actions in selected repositories",
    "description": "This endpoint allows replacing enabled GitHub Actions repositories in an\n    organization, requiring `selected` permission policy and `admin:org` scope\n    for OAuth or personal tokens. See documentation for setting permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "List of repository IDs to enable for GitHub Actions."
        }
      },
      "required": [
        "org",
        "selected_repository_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnableGithubActionsInSelectedRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enable github actions in selected repositories"
  },
  {
    "name": "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
    "enum": "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enablerepoforgithubactions",
    "description": "This endpoint allows adding a repository to those enabled for GitHub Actions\n    in an organization, requiring the `enabled_repositories` policy set to `selected`\n    and `admin:org` scope for OAuth/personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "The unique identifier of the repository."
        }
      },
      "required": [
        "org",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnableRepoForgithubActionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enablerepoforgithubactions"
  },
  {
    "name": "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
    "enum": "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Disablerepositoryactionsinorg",
    "description": "This endpoint removes a repo from those selected for GitHub Actions in an\n    org, requiring `enabled_repositories` set to `selected` and `admin:org`\n    scope for OAuth/personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "The unique identifier of the repository."
        }
      },
      "required": [
        "org",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DisableRepositoryActionsInOrgResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Disablerepositoryactionsinorg"
  },
  {
    "name": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get allowed actions and reusable workflows for an organization",
    "description": "This endpoint retrieves actions and reusable workflows permitted in an organization,\n    requiring the `allowed_actions` policy to be set to `selected`. It mandates\n    `admin:org` scope for OAuth and classic personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllowedActionsAndReusableWorkflowsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get allowed actions and reusable workflows for an organization"
  },
  {
    "name": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set allowed actions and reusable workflows for an organization",
    "description": "This endpoint configures allowed actions and workflows in an organization,\n    requiring `selected` permission policy and `admin:org` scope for access.\n    See documentation for more on GitHub Actions permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "github_owned_allowed": {
          "type": "boolean",
          "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "patterns_allowed": {
          "type": "array",
          "description": "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`. **Note**: The `patterns_allowed` setting only applies to public repositories. "
        },
        "verified_allowed": {
          "type": "boolean",
          "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators. "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetAllowedActionsAndReusableWorkflowsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set allowed actions and reusable workflows for an organization"
  },
  {
    "name": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get default workflow permissions for an organization",
    "description": "The text outlines how to check default `GITHUB_TOKEN` workflow permissions\n    and GitHub Actions' ability to submit pull request reviews in organizations.\n    It specifies that `admin:org` scope is needed for OAuth/personual access\n    tokens to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetDefaultWorkflowPermissionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get default workflow permissions for an organization"
  },
  {
    "name": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set default workflow permissions for an organization",
    "description": "The text outlines how to set default workflow permissions for the `GITHUB_TOKEN`\n    in an organization and its ability to approve pull requests. It mentions\n    required scopes for OAuth and personal tokens to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "can_approve_pull_request_reviews": {
          "type": "boolean",
          "description": "Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. "
        },
        "default_workflow_permissions": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetDefaultWorkflowPermissionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set default workflow permissions for an organization"
  },
  {
    "name": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List self hosted runners for an organization",
    "description": "This endpoint lists an organization's self-hosted runners, accessible only\n    to admins with `admin:org` scope (OAuth app/personal access tokens). For\n    private repositories, the `repo` scope is also necessary.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a self-hosted runner."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSelfHostedRunnersForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List self hosted runners for an organization"
  },
  {
    "name": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List runner applications for an organization",
    "description": "The text outlines an endpoint for downloading runner application binaries.\n    It's accessible exclusively to users with admin rights and the necessary\n    OAuth or personal access tokens (with `admin:org`, `repo` scopes) for private\n    repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRunnerApplicationsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List runner applications for an organization"
  },
  {
    "name": "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
    "enum": "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Configurejitrunnerfororg",
    "description": "Generates a config for the runner app, requiring admin access and `admin:org`\n    scope for tokens. Private repos need `repo` scope for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100. "
        },
        "name": {
          "type": "string",
          "description": "The name of the new runner."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_group_id": {
          "type": "integer",
          "description": "The ID of the runner group to register the runner to."
        },
        "work_folder": {
          "type": "string",
          "description": "The working directory to be used for job execution, relative to the runner install directory. "
        }
      },
      "required": [
        "org",
        "name",
        "runner_group_id",
        "labels"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ConfigureJitrunnerForOrgResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Configurejitrunnerfororg"
  },
  {
    "name": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a registration token for an organization",
    "description": "Get a token for the `config` script from this endpoint; it expires in an\n    hour. Use it to configure self-hosted runners with admin access required.\n    OAuth and personal tokens need `admin:org` and `repo` scopes for private\n    repos.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARegistrationTokenForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a registration token for an organization"
  },
  {
    "name": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a remove token for an organization",
    "description": "Generates a token for removing a self-hosted runner from an organization,\n    expiring in one hour. Requires `admin:org` scope for public repos, plus\n    `repo` scope for private ones. Admin access is needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARemoveTokenForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a remove token for an organization"
  },
  {
    "name": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a self hosted runner for an organization",
    "description": "This endpoint configures a self-hosted runner in an organization and requires\n    admin access. OAuth app tokens and classic personal access tokens need `admin:org`\n    scope, and private repositories also require `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetASelfHostedRunnerForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a self hosted runner for an organization"
  },
  {
    "name": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
    "enum": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a self hosted runner from an organization",
    "description": "This endpoint enables the deletion of a self-hosted runner from an organization\n    when the machine is unavailable, requiring admin access and specific OAuth\n    scopes (`admin:org` for all, plus `repo` for private repos).",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteASelfHostedRunnerFromAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a self hosted runner from an organization"
  },
  {
    "name": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List labels for a self hosted runner for an organization",
    "description": "This endpoint lists labels for self-hosted runners in an organization, accessible\n    by admins with `admin:org` scope for OAuth or classic tokens. For private\n    repositories, `repo` scope is also needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListLabelsForASelfHostedRunnerForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List labels for a self hosted runner for an organization"
  },
  {
    "name": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add custom labels to a self hosted runner for an organization",
    "description": "This endpoint allows adding custom labels to a self-hosted runner within\n    an organization. Requires admin access and an OAuth or personal access token\n    with `admin:org` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "The names of the custom labels to add to the runner."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id",
        "labels"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddCustomLabelsToASelfHostedRunnerForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add custom labels to a self hosted runner for an organization"
  },
  {
    "name": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set custom labels for a self hosted runner for an organization",
    "description": "Authenticated users with admin access can reset custom labels on a specific\n    self-hosted runner in an organization. OAuth and classic tokens require\n    `admin:org` scope; private repos also need `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id",
        "labels"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetCustomLabelsForASelfHostedRunnerForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set custom labels for a self hosted runner for an organization"
  },
  {
    "name": "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
    "enum": "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Clearselfhostedrunnerorglabels",
    "description": "This endpoint allows admins to remove custom labels from a self-hosted runner\n    in an organization, leaving only read-only labels. It requires `admin:org`\n    scope for OAuth tokens and `repo` scope for private repos.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ClearSelfHostedRunnerOrgLabelsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Clearselfhostedrunnerorglabels"
  },
  {
    "name": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
    "enum": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removecustomlabelfromselfhostedrunner",
    "description": "Removes a custom label from an organization's self-hosted runner, returning\n    remaining labels. Requires `admin:org` scope and `repo` scope for private\n    repositories. A `404` status appears if the label is missing. Admin access\n    is required.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a self-hosted runner\"s custom label."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "org",
        "runner_id",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveCustomLabelFromSelfHostedRunnerResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removecustomlabelfromselfhostedrunner"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_SECRETS",
    "enum": "GITHUB_LIST_ORGANIZATION_SECRETS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization secrets",
    "description": "This text outlines a system allowing authed users with collaborator access\n    to list all org secrets without showing encrypted values. OAuth and personal\n    tokens with `admin:org` and `repo` scope for private repos are necessary\n    for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationSecretsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization secrets"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
    "enum": "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization public key",
    "description": "To encrypt secrets, acquire your public key. Authenticated users need collaborator\n    access for operations. For private repositories or org scope, `admin:org`\n    and `repo` scopes are necessary for OAuth and personal access tokens respectively.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationPublicKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization public key"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_GET_AN_ORGANIZATION_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization secret",
    "description": "This text outlines accessing a single organization secret without showing\n    its encrypted value. The user must be a collaborator with the `admin:org`\n    scope for OAuth/personal tokens. Private repos require an additional `repo`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization secret"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update an organization secret",
    "description": "This text explains how to create or update an organization secret by encrypting\n    it with LibSodium. It mentions the necessity for users to have collaborator\n    access and the required scopes for OAuth and personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "secret_name",
        "visibility"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update an organization secret"
  },
  {
    "name": "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an organization secret",
    "description": "Deletes an organization's secret using its name. Users need collaborator\n    access or `admin:org` scope (for OAuth/personal access tokens) to manage\n    secrets. Private repository actions require the `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an organization secret"
  },
  {
    "name": "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
    "enum": "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Manage secrets in selected repositories with proper access",
    "description": "With 'selected' access, only chosen repositories appear. Users need collaborator\n    status and `admin:org`, `repo` scopes for managing secrets in private repositories\n    using OAuth and personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ManageSecretsInSelectedRepositoriesWithProperAccessResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Manage secrets in selected repositories with proper access"
  },
  {
    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set selected repositories for an organization secret",
    "description": "When the `visibility` of an organization secret is set to `selected`, it\n    replaces all repositories' access. Users need collaborator access or `admin:org`\n    scope (plus `repo` for private repositories) to manage secrets.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints. "
        }
      },
      "required": [
        "org",
        "secret_name",
        "selected_repository_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetSelectedRepositoriesForAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set selected repositories for an organization secret"
  },
  {
    "name": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
    "enum": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Addrepotoorgsecretwithselectedaccess",
    "description": "To add a repo to an org secret with \"selected\" access, one must have collaborator\n    rights for secret management and either `admin:org` or `repo` scope for\n    tokens. Details at GitHub Docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddRepoToOrgSecretWithSelectedAccessResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Addrepotoorgsecretwithselectedaccess"
  },
  {
    "name": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove selected repository from an organization secret",
    "description": "Removes a repo from an org secret when visibility is set to 'selected'.\n    Users need collaborator access or 'admin:org' scope with OAuth tokens. For\n    private repos, 'repo' scope is needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveSelectedRepositoryFromAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove selected repository from an organization secret"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_VARIABLES",
    "enum": "GITHUB_LIST_ORGANIZATION_VARIABLES",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization variables",
    "description": "Authenticated users need collaborator access to manage organization variables.\n    To use this endpoint, OAuth apps and classic personal access tokens require\n    `admin:org` scope; `repo` scope is also needed for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationVariablesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization variables"
  },
  {
    "name": "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization variable",
    "description": "This text describes how to create an organization variable in GitHub Actions,\n    specifying that users need collaborator access, and OAuth/personal access\n    tokens require `admin:org` and `repo` scopes for public and private repositories,\n    respectively.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. "
        },
        "value": {
          "type": "string",
          "description": "The value of the variable."
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "name",
        "value",
        "visibility"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an organization variable"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization variable",
    "description": "To access a specific variable within an organization, users need collaborator\n    access. For creating, updating, or reading variables, OAuth or personal\n    access tokens with `admin:org` scope are required, and `repo` scope is needed\n    for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization variable"
  },
  {
    "name": "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an organization variable",
    "description": "This GitHub feature allows updating an organization variable for workflow\n    reference. Users need collaborator access or `admin:org` and `repo` scopes\n    for private repositories using OAuth or classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. "
        },
        "value": {
          "type": "string",
          "description": "The value of the variable."
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an organization variable"
  },
  {
    "name": "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an organization variable",
    "description": "Deletes an organization variable using its name. Authenticated users need\n    collaborator access to create, update, or read variables. OAuth and personal\n    access tokens require `admin:org` scope, and `repo` scope for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an organization variable"
  },
  {
    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List selected repositories for an organization variable",
    "description": "To access an organization variable, authenticated users need collaborator\n    access. Creating, updating, or reading variables requires `admin:org` scope\n    for OAuth app and personal tokens, and `repo` scope for private repos.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSelectedRepositoriesForAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List selected repositories for an organization variable"
  },
  {
    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set selected repositories for an organization variable",
    "description": "The text explains replacing organization variables in chosen repositories,\n    needing the `visibility` field as `selected` and user access including collaborator\n    or `admin:org` and `repo` scopes for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "The IDs of the repositories that can access the organization variable."
        }
      },
      "required": [
        "org",
        "name",
        "selected_repository_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetSelectedRepositoriesForAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set selected repositories for an organization variable"
  },
  {
    "name": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add selected repository to an organization variable",
    "description": "This text describes adding a repo to an org variable with `visibility` set\n    to `selected`, accessible only to collaborators. For secret access, `admin:org`\n    and `repo` scopes are needed for OAuth and personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        }
      },
      "required": [
        "org",
        "name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddSelectedRepositoryToAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add selected repository to an organization variable"
  },
  {
    "name": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
    "enum": "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove selected repository from an organization variable",
    "description": "Removes a repository from an org variable with `visibility` set to `selected`.\n    Authenticated users need collaborator access for variable actions. OAuth\n    and classic tokens require `admin:org` scope, and `repo` scope for private\n    repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        }
      },
      "required": [
        "org",
        "name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveSelectedRepositoryFromAnOrganizationVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove selected repository from an organization variable"
  },
  {
    "name": "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List users blocked by an organization",
    "description": "List the users blocked by an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUsersBlockedByAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List users blocked by an organization"
  },
  {
    "name": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
    "enum": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a user is blocked by an organization",
    "description": "Returns a 204 if the given user is blocked by the given organization. Returns\n    a 404 if the organization is not blocking the user, or if the user account\n    has been identified as spam by GitHub.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAUserIsBlockedByAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a user is blocked by an organization"
  },
  {
    "name": "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
    "enum": "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Block a user from an organization",
    "description": "Blocks the given user on behalf of the specified organization and returns\n    a 204. If the organization cannot block the given user a 422 is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "BlockAUserFromAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Block a user from an organization"
  },
  {
    "name": "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
    "enum": "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unblock a user from an organization",
    "description": "Unblocks the given user on behalf of the specified organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnblockAUserFromAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unblock a user from an organization"
  },
  {
    "name": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List code scanning alerts for an organization",
    "description": "The text outlines a feature for listing code scanning alerts on default\n    branches in eligible repos. It requires OAuth/access tokens with specific\n    permissions for org owners or security managers, with additional notes on\n    security management.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "tool_guid": {
          "type": "string",
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. "
        },
        "tool_name": {
          "type": "string",
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodeScanningAlertsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List code scanning alerts for an organization"
  },
  {
    "name": "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
    "enum": "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List codespaces for the organization",
    "description": "Lists the codespaces associated to a specified organization. OAuth app tokens\n    and personal access tokens (classic) need the `admin:org` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodespacesForTheOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List codespaces for the organization"
  },
  {
    "name": "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
    "enum": "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Manage access control for organization codespaces",
    "description": "This text outlines how to manage user access to codespaces in an organization\n    by adjusting permissions, and specifies that OAuth app tokens and personal\n    access tokens (classic) require the `admin:org` scope to access this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_usernames": {
          "type": "array",
          "description": "The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "visibility"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ManageAccessControlForOrganizationCodespacesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Manage access control for organization codespaces"
  },
  {
    "name": "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add users to codespaces access for an organization",
    "description": "Organization codespaces billing is applied to specified users. Access requires\n    `selected_members` setting and `admin:org` scope for OAuth or personal tokens.\n    See docs for access control management.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_usernames": {
          "type": "array",
          "description": "The usernames of the organization members whose codespaces be billed to the organization. "
        }
      },
      "required": [
        "org",
        "selected_usernames"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddUsersToCodespacesAccessForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add users to codespaces access for an organization"
  },
  {
    "name": "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove users from codespaces access for an organization",
    "description": "Codespaces billing for certain users will stop. Access requires `selected_members`\n    settings. To modify, see the guide. OAuth and classic tokens need `admin:org`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_usernames": {
          "type": "array",
          "description": "The usernames of the organization members whose codespaces should not be billed to the organization. "
        }
      },
      "required": [
        "org",
        "selected_usernames"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveUsersFromCodespacesAccessForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove users from codespaces access for an organization"
  },
  {
    "name": "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
    "enum": "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List org level codespaces secrets",
    "description": "Lists all Codespaces development environment secrets available at the organization-level\n    without revealing their encrypted values. OAuth app tokens and personal\n    access tokens (classic) need the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrgLevelCodespacesSecretsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List org level codespaces secrets"
  },
  {
    "name": "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
    "enum": "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Encryptorgsecretsusingpublickey",
    "description": "To encrypt secrets for an organization, you must first obtain its public\n    key. This process requires an OAuth or personal access token with `admin:org`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EncryptOrgSecretsUsingPublicKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Encryptorgsecretsusingpublickey"
  },
  {
    "name": "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
    "enum": "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get org dev environment secret safely",
    "description": "Gets an organization development environment secret without revealing its\n    encrypted value. OAuth app tokens and personal access tokens (classic) need\n    the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetOrgDevEnvironmentSecretSafelyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get org dev environment secret safely"
  },
  {
    "name": "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
    "enum": "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Encryptorgdevenvsecret",
    "description": "This text explains how to create or update an organization development environment\n    secret by encrypting it using LibSodium. It requires `admin:org` scope for\n    OAuth or classic tokens. See more on encrypting secrets for REST API at\n    GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "The ID of the key you used to encrypt the secret."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "secret_name",
        "visibility"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EncryptOrgDevEnvSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Encryptorgdevenvsecret"
  },
  {
    "name": "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
    "enum": "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove org dev env secret by name",
    "description": "Deletes an organization development environment secret using the secret\n    name. OAuth app tokens and personal access tokens (classic) need the `admin:org`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveOrgDevEnvSecretByNameResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove org dev env secret by name"
  },
  {
    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List selected repositories for an organization secret",
    "description": "Lists all repositories that have been selected when the `visibility` for\n    repository access to a secret is set to `selected`. OAuth app tokens and\n    personal access tokens (classic) need the `admin:org` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSelectedRepositoriesForAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List selected repositories for an organization secret"
  },
  {
    "name": "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
    "enum": "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Replace repo access on org dev env secret set",
    "description": "When setting an org development environment secret to `selected` visibility,\n    replace all repo access. Requires `admin:org` scope for OAuth app and personal\n    access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints. "
        }
      },
      "required": [
        "org",
        "secret_name",
        "selected_repository_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReplaceRepoAccessOnOrgDevEnvSecretSetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Replace repo access on org dev env secret set"
  },
  {
    "name": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
    "enum": "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add selected repository to an organization secret",
    "description": "Adds a repo to an org's dev environment secret when its access is 'selected'.\n    Set during secret creation/update. OAuth and classic tokens require `admin:org`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddSelectedRepositoryToAnOrganizationSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add selected repository to an organization secret"
  },
  {
    "name": "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
    "enum": "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removerepofromorgdevenvsecret",
    "description": "Removes a repo from an org development environment secret when access is\n    set to 'selected'. Requires 'admin:org' scope for OAuth app tokens and personal\n    access tokens to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveRepoFromOrgDevEnvSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removerepofromorgdevenvsecret"
  },
  {
    "name": "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get copilot seat information and settings for an organization",
    "description": "This beta endpoint provides details on an organization's Copilot subscription,\n    including seat breakdown and code policies. Accessible only by org owners\n    via GitHub settings. Requires `manage_billing:copilot` scope for OAuth and\n    classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetCopilotSeatInformationAndSettingsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get copilot seat information and settings for an organization"
  },
  {
    "name": "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List all copilot seat assignments for an organization",
    "description": "This beta endpoint displays the status of billed Copilot seats within an\n    organization, accessible only to owners with the `manage_billing:copilot`\n    scope, for managing/viewing Copilot Business/Enterprise subscriptions.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAllCopilotSeatAssignmentsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List all copilot seat assignments for an organization"
  },
  {
    "name": "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add teams to the copilot subscription for an organization",
    "description": "The beta endpoint enables organization owners with Copilot Business or Enterprise\n    subscriptions to buy Copilot seats for teams, charging the organization.\n    Access requires a `manage_billing:copilot` scope. For prices and setup,\n    see GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_teams": {
          "type": "array",
          "description": "List of team names within the organization to which to grant access to GitHub Copilot. "
        }
      },
      "required": [
        "org",
        "selected_teams"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddTeamsToTheCopilotSubscriptionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add teams to the copilot subscription for an organization"
  },
  {
    "name": "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove teams from the copilot subscription for an organization",
    "description": "Endpoint cancels GitHub Copilot seat assignments for specified teams, ending\n    access after the billing cycle without further charges. Only owners can\n    configure. OAuth and personal tokens require `manage_billing:copilot` scope\n    for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_teams": {
          "type": "array",
          "description": "The names of teams from which to revoke access to GitHub Copilot."
        }
      },
      "required": [
        "org",
        "selected_teams"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveTeamsFromTheCopilotSubscriptionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove teams from the copilot subscription for an organization"
  },
  {
    "name": "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add users to the copilot subscription for an organization",
    "description": "This beta endpoint allows organization owners with a Copilot Business or\n    Enterprise subscription to purchase GitHub Copilot seats, billed accordingly.\n    OAuth tokens require the `manage_billing:copilot` scope. See docs for pricing\n    and setup details.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_usernames": {
          "type": "array",
          "description": "The usernames of the organization members to be granted access to GitHub Copilot. "
        }
      },
      "required": [
        "org",
        "selected_usernames"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddUsersToTheCopilotSubscriptionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add users to the copilot subscription for an organization"
  },
  {
    "name": "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove users from the copilot subscription for an organization",
    "description": "The endpoint cancels GitHub Copilot seat assignments for specified users,\n    preventing further billing for those users post-current billing cycle. Only\n    organization owners can manage this, requiring `manage_billing:copilot`-scoped\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "selected_usernames": {
          "type": "array",
          "description": "The usernames of the organization members for which to revoke access to GitHub Copilot. "
        }
      },
      "required": [
        "org",
        "selected_usernames"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveUsersFromTheCopilotSubscriptionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove users from the copilot subscription for an organization"
  },
  {
    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List dependabot alerts for an organization",
    "description": "This endpoint allows organization owners or security managers to view Dependabot\n    alerts. Access requires an OAuth or personal access token with `security_events`\n    scope, or `public_repo` scope for public repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "ecosystem": {
          "type": "string",
          "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned. Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` "
        },
        "first": {
          "type": "integer",
          "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results. "
        },
        "last": {
          "type": "integer",
          "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package": {
          "type": "string",
          "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "scope": {
          "type": "string",
          "description": ""
        },
        "severity": {
          "type": "string",
          "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned. Can be: `low`, `medium`, `high`, `critical` "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": "A comma-separated list of states. If specified, only alerts with these states will be returned. Can be: `auto_dismissed`, `dismissed`, `fixed`, `open` "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDependabotAlertsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List dependabot alerts for an organization"
  },
  {
    "name": "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
    "enum": "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listorgsecretswithoutvalues",
    "description": "Lists all secrets available in an organization without revealing their encrypted\n    values. OAuth app tokens and personal access tokens (classic) need the `admin:org`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrgSecretsWithoutValuesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listorgsecretswithoutvalues"
  },
  {
    "name": "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
    "enum": "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Fetchpublickeyforsecretencryption",
    "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt\n    a secret before you can create or update secrets. OAuth app tokens and personal\n    access tokens (classic) need the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "FetchPublicKeyForSecretEncryptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Fetchpublickeyforsecretencryption"
  },
  {
    "name": "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
    "enum": "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get single org secret without decryption",
    "description": "Gets a single organization secret without revealing its encrypted value.\n    OAuth app tokens and personal access tokens (classic) need the `admin:org`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetSingleOrgSecretWithoutDecryptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get single org secret without decryption"
  },
  {
    "name": "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
    "enum": "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Createupdateorgsecretwithlibsodium",
    "description": "This text explains how to create/update an organization secret with LibSodium,\n    requiring `admin:org` scope for access. It emphasizes using GitHub's REST\n    API encryption documentation for encrypting secrets.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "secret_name",
        "visibility"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateUpdateOrgSecretWithLibSodiumResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Createupdateorgsecretwithlibsodium"
  },
  {
    "name": "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
    "enum": "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removeorgsecretbyname",
    "description": "Deletes a secret in an organization using the secret name. OAuth app tokens\n    and personal access tokens (classic) need the `admin:org` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveOrgSecretByNameResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removeorgsecretbyname"
  },
  {
    "name": "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
    "enum": "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listselectedreposforsecretaccess",
    "description": "Lists all repositories that have been selected when the `visibility` for\n    repository access to a secret is set to `selected`. OAuth app tokens and\n    personal access tokens (classic) need the `admin:org` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSelectedReposForSecretAccessResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listselectedreposforsecretaccess"
  },
  {
    "name": "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
    "enum": "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Replace org secret visibility to selected",
    "description": "When setting an organization secret's `visibility` to `selected`, it replaces\n    all repositories. Requires the `admin:org` scope for OAuth and personal\n    access tokens to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints. "
        }
      },
      "required": [
        "org",
        "secret_name",
        "selected_repository_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReplaceOrgSecretVisibilityToSelectedResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Replace org secret visibility to selected"
  },
  {
    "name": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
    "enum": "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add repo to org secret with selected visibility",
    "description": "This text explains how to add a repository to an organization secret with\n    \"selected\" visibility by creating or updating it via a specific GitHub documentation\n    link. OAuth and personal access tokens require `admin:org` scope for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddRepoToOrgSecretWithSelectedVisibilityResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add repo to org secret with selected visibility"
  },
  {
    "name": "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
    "enum": "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removerepofromorgsecretwithselectedvisibility",
    "description": "Removes a repository from an organization secret with \"selected\" visibility,\n    set during secret creation/update. Requires `admin:org` scope for OAuth\n    app and classic tokens to access endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "org",
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveRepoFromOrgSecretWithSelectedVisibilityResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removerepofromorgsecretwithselectedvisibility"
  },
  {
    "name": "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS",
    "enum": "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listdockermigrationconflicts",
    "description": "This endpoint lists packages in a specific organization, readable by the\n    user, that had conflicts during Docker migration. It requires OAuth app\n    tokens or classic personal access tokens with the `read:packages` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDockerMigrationConflictsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listdockermigrationconflicts"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
    "enum": "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public organization events",
    "description": "This GitHub API endpoint lists public events for organizations, like watch\n    and push events. It supports pagination and requires the organization name.\n    Useful for monitoring activities in org repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicOrganizationEventsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public organization events"
  },
  {
    "name": "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS",
    "enum": "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List failed organization invitations",
    "description": "The return hash contains `failed_at` and `failed_reason` fields which represent\n    the time at which the invitation failed and the reason for the failure.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListFailedOrganizationInvitationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List failed organization invitations"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
    "enum": "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization webhooks",
    "description": "To use this endpoint, you must be an organization owner and have `admin:org_hook`\n    scope. OAuth apps can't interact with webhooks they didn't create; users\n    have similar restrictions with OAuth app-created webhooks.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationWebhooksResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization webhooks"
  },
  {
    "name": "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization webhook",
    "description": "To use the endpoint for posting JSON payloads, one must be an organization\n    owner with `admin:org_hook` scope for OAuth or classic tokens. OAuth apps\n    can't interact with non-owned webhooks, and users can't manage webhooks\n    made by OAuth apps.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. "
        },
        "config__content__type": {
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. "
        },
        "config__insecure__ssl": {
          "type": "string",
          "description": "Insecure Ssl"
        },
        "config__password": {
          "type": "string",
          "description": "Password"
        },
        "config__secret": {
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). "
        },
        "config__url": {
          "type": "string",
          "description": "The URL to which the payloads will be delivered."
        },
        "config__username": {
          "type": "string",
          "description": "Username"
        },
        "events": {
          "type": "array",
          "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `[\"*\"]` to receive all possible events. "
        },
        "name": {
          "type": "string",
          "description": "Must be passed as \"web\"."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an organization webhook"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization webhook",
    "description": "The text describes an API endpoint to get an organization's webhook config.\n    Only organization owners can use it, requiring `admin:org_hook` scope for\n    OAuth and personal tokens. OAuth apps can't interact with webhooks they\n    didn't create.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization webhook"
  },
  {
    "name": "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an organization webhook",
    "description": "Updating an organization's webhook could reset its `secret`. Supply the\n    same or new `secret` to prevent deletion. Use a designated endpoint for\n    `config` changes. User role and OAuth app abilities restrict webhook management.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. "
        },
        "config__content__type": {
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. "
        },
        "config__insecure__ssl": {
          "type": "string",
          "description": "Insecure Ssl"
        },
        "config__secret": {
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). "
        },
        "config__url": {
          "type": "string",
          "description": "The URL to which the payloads will be delivered."
        },
        "events": {
          "type": "array",
          "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. "
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an organization webhook"
  },
  {
    "name": "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an organization webhook",
    "description": "To use this endpoint, you must be an organization owner and have tokens\n    with `admin:org_hook` scope. OAuth apps can't manage webhooks they didn't\n    create, nor can users manage those created by OAuth apps.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an organization webhook"
  },
  {
    "name": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a webhook configuration for an organization",
    "description": "The text discusses retrieving an organization's webhook configuration, requiring\n    ownership and `admin:org_hook` scope for access. It notes limitations on\n    viewing or editing webhooks based on their creation origin.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAWebhookConfigurationForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a webhook configuration for an organization"
  },
  {
    "name": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a webhook configuration for an organization",
    "description": "Updates webhook config for organizations, allowing changes to `active` state\n    and `events`. Requires organization owner status and `admin:org_hook` scope\n    for tokens. Restrictions apply to OAuth apps and users on editing webhooks.",
    "parameters": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. "
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "insecure_ssl": {
          "type": "string",
          "description": "Insecure Ssl"
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "secret": {
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). "
        },
        "url": {
          "type": "string",
          "description": "The URL to which the payloads will be delivered."
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAWebhookConfigurationForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a webhook configuration for an organization"
  },
  {
    "name": "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List deliveries for an organization webhook",
    "description": "This endpoint lists webhook deliveries for an organization's webhook, accessible\n    to organization owners with `admin:org_hook` scope. OAuth apps can only\n    manage their own webhooks.",
    "parameters": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. "
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "redelivery": {
          "type": "boolean",
          "description": "Redelivery"
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDeliveriesForAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List deliveries for an organization webhook"
  },
  {
    "name": "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a webhook delivery for an organization webhook",
    "description": "This endpoint lets organization owners retrieve a delivery for their organization's\n    webhook, requiring `admin:org_hook` scope. OAuth apps can't manage others'\n    webhooks, and users can't manage those created by OAuth apps.",
    "parameters": {
      "type": "object",
      "properties": {
        "delivery_id": {
          "type": "integer",
          "description": "Delivery Id"
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id",
        "delivery_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAWebhookDeliveryForAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a webhook delivery for an organization webhook"
  },
  {
    "name": "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Redeliver a delivery for an organization webhook",
    "description": "To redeliver a webhook delivery in an organization, you must be the owner.\n    Use `admin:org_hook` scope with OAuth or personal access tokens. OAuth apps\n    can't interact with non-owned webhooks, nor can users with those created\n    by OAuth apps.",
    "parameters": {
      "type": "object",
      "properties": {
        "delivery_id": {
          "type": "integer",
          "description": "Delivery Id"
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id",
        "delivery_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RedeliverADeliveryForAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Redeliver a delivery for an organization webhook"
  },
  {
    "name": "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
    "enum": "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Ping an organization webhook",
    "description": "Triggering a ping event requires being an organization owner and the `admin:org_hook`\n    scope for OAuth or classic tokens. OAuth apps can't interact with non-self-created\n    webhooks, nor can users with those created by OAuth apps.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "PingAnOrganizationWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Ping an organization webhook"
  },
  {
    "name": "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List app installations for an organization",
    "description": "This endpoint provides a list of all GitHub Apps installed on repositories\n    within an organization, viewable by organization owners. OAuth and personal\n    access tokens require `admin:read` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAppInstallationsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List app installations for an organization"
  },
  {
    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get interaction restrictions for an organization",
    "description": "Shows which type of GitHub user can interact with this organization and\n    when the restriction expires. If there is no restrictions, you will see\n    an empty response.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetInteractionRestrictionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get interaction restrictions for an organization"
  },
  {
    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set interaction restrictions for an organization",
    "description": "Temporarily restricts interactions in public repositories to specific GitHub\n    users in an organization. Only organization owners can set these limits,\n    which override individual repository settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "expiry": {
          "type": "string",
          "description": ""
        },
        "limit": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "limit"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetInteractionRestrictionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set interaction restrictions for an organization"
  },
  {
    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove interaction restrictions for an organization",
    "description": "Removes all interaction restrictions from public repositories in the given\n    organization. You must be an organization owner to remove restrictions.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveInteractionRestrictionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove interaction restrictions for an organization"
  },
  {
    "name": "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS",
    "enum": "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pending organization invitations",
    "description": "The return hash includes a `role` field indicating the Organization Invitation\n    role (values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`).\n    If non-GitHub member, `login` field is `null`.",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_source": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "role": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPendingOrganizationInvitationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List pending organization invitations"
  },
  {
    "name": "GITHUB_CREATE_AN_ORGANIZATION_INVITATION",
    "enum": "GITHUB_CREATE_AN_ORGANIZATION_INVITATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization invitation",
    "description": "Owners can invite users to an organization via GitHub ID or email. Invitations\n    trigger notifications and rapid use may cause rate limiting. Check GitHub's\n    API rate limits and best practices for more info.",
    "parameters": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. "
        },
        "invitee_id": {
          "type": "integer",
          "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role": {
          "type": "string",
          "description": ""
        },
        "team_ids": {
          "type": "array",
          "description": "Specify IDs for the teams you want to invite new members to."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationInvitationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an organization invitation"
  },
  {
    "name": "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION",
    "enum": "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Cancel an organization invitation",
    "description": "To cancel an organization invitation, the user must be an organization owner.\n    This action also triggers notifications.",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "integer",
          "description": "The unique identifier of the invitation."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "invitation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CancelAnOrganizationInvitationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Cancel an organization invitation"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS",
    "enum": "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization invitation teams",
    "description": "List all teams associated with an invitation. In order to see invitations\n    in an organization, the authenticated user must be an organization owner.",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "integer",
          "description": "The unique identifier of the invitation."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org",
        "invitation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationInvitationTeamsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization invitation teams"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization issues assigned to the authenticated user",
    "description": "GitHub's REST API shows both issues \u0026 PRs for users, marking PRs with `pull_request`\n    key. For PR ids, check \"List pull requests\" link. It also supports different\n    media types for issue content.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "filter": {
          "type": "string",
          "description": ""
        },
        "labels": {
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`"
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationIssuesAssignedToTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization issues assigned to the authenticated user"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_MEMBERS",
    "enum": "GITHUB_LIST_ORGANIZATION_MEMBERS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization members",
    "description": "List all users who are members of an organization. If the authenticated\n    user is also a member of this organization then both concealed and public\n    members will be returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "role": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationMembersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization members"
  },
  {
    "name": "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check organization membership for a user",
    "description": "Check if a user is, publicly or privately, a member of the organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckOrganizationMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check organization membership for a user"
  },
  {
    "name": "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
    "enum": "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove an organization member",
    "description": "Removing a user from this list will remove them from all teams and they\n    will no longer have any access to the organization's repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAnOrganizationMemberResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove an organization member"
  },
  {
    "name": "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
    "enum": "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List codespaces for a user in organization",
    "description": "Lists the codespaces that a member of an organization has for repositories\n    in that organization. OAuth app tokens and personal access tokens (classic)\n    need the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodespacesForAUserInOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List codespaces for a user in organization"
  },
  {
    "name": "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
    "enum": "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a codespace from the organization",
    "description": "Deletes a user's codespace. OAuth app tokens and personal access tokens\n    (classic) need the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username",
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteACodespaceFromTheOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a codespace from the organization"
  },
  {
    "name": "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
    "enum": "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Stop a codespace for an organization user",
    "description": "Stops a user's codespace. OAuth app tokens and personal access tokens (classic)\n    need the `admin:org` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username",
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StopACodespaceForAnOrganizationUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Stop a codespace for an organization user"
  },
  {
    "name": "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER",
    "enum": "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER",
    "tags": [
      "copilot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get copilot seat assignment details for a user",
    "description": "Organization owners can view members' GitHub Copilot seat assignments using\n    OAuth or personal access tokens with `manage_billing:copilot` scope. This\n    beta feature requires specific access permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetCopilotSeatAssignmentDetailsForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get copilot seat assignment details for a user"
  },
  {
    "name": "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get organization membership for a user",
    "description": "In order to get a user's membership with an organization, the authenticated\n    user must be an organization member. The `state` parameter in the response\n    can be used to identify the user's membership status.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetOrganizationMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get organization membership for a user"
  },
  {
    "name": "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set organization membership for a user",
    "description": "Only organization owners can add or update members' roles; new invites and\n    role changes prompt email notifications. Invitation limits are 50 or 500\n    per day based on the organization's age and plan.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetOrganizationMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set organization membership for a user"
  },
  {
    "name": "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove organization membership for a user",
    "description": "To remove a user from an organization, the actioner must be an owner. This\n    process ejects active members or cancels pending invitations, with the specified\n    user notified by email.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveOrganizationMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove organization membership for a user"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_MIGRATIONS",
    "enum": "GITHUB_LIST_ORGANIZATION_MIGRATIONS",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization migrations",
    "description": "Lists the most recent migrations, including both exports (which can be started\n    through the REST API) and imports (which cannot be started using the REST\n    API). A list of `repositories` is only returned for export migrations.",
    "parameters": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "array",
          "description": "Exclude attributes from the API response to improve performance"
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationMigrationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization migrations"
  },
  {
    "name": "GITHUB_START_AN_ORGANIZATION_MIGRATION",
    "enum": "GITHUB_START_AN_ORGANIZATION_MIGRATION",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Start an organization migration",
    "description": "Initiates the generation of a migration archive.",
    "parameters": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "array",
          "description": "Exclude related items from being returned in the response in order to improve performance of the request. "
        },
        "exclude_attachments": {
          "type": "boolean",
          "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). "
        },
        "exclude_git_data": {
          "type": "boolean",
          "description": "Indicates whether the repository git data should be excluded from the migration. "
        },
        "exclude_metadata": {
          "type": "boolean",
          "description": "Indicates whether metadata should be excluded and only git source should be included for the migration. "
        },
        "exclude_owner_projects": {
          "type": "boolean",
          "description": "Indicates whether projects owned by the organization or users should be excluded. from the migration. "
        },
        "exclude_releases": {
          "type": "boolean",
          "description": "Indicates whether releases should be excluded from the migration (to reduce migration archive file size). "
        },
        "lock_repositories": {
          "type": "boolean",
          "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "org_metadata_only": {
          "type": "boolean",
          "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags). "
        },
        "repositories": {
          "type": "array",
          "description": "A list of arrays indicating which repositories should be migrated."
        }
      },
      "required": [
        "org",
        "repositories"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StartAnOrganizationMigrationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Start an organization migration"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS",
    "enum": "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization migration status",
    "description": "The text describes a migration status check, where the `state` can be `pending`\n    (not started), `exporting` (in progress), `exported` (completed successfully),\n    or `failed` (unsuccessful).",
    "parameters": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "array",
          "description": "Exclude attributes from the API response to improve performance"
        },
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationMigrationStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization migration status"
  },
  {
    "name": "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE",
    "enum": "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download an organization migration archive",
    "description": "Fetches the URL to a migration archive.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadAnOrganizationMigrationArchiveResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download an organization migration archive"
  },
  {
    "name": "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE",
    "enum": "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an organization migration archive",
    "description": "Deletes a previous migration archive. Migration archives are automatically\n    deleted after seven days.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnOrganizationMigrationArchiveResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an organization migration archive"
  },
  {
    "name": "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
    "enum": "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unlock an organization repository",
    "description": "Unlocks a repository that was locked for migration. You should unlock each\n    migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository)\n    when the migration is complete and you no longer need the source data.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "repo_name": {
          "type": "string",
          "description": "repo_name parameter"
        }
      },
      "required": [
        "org",
        "migration_id",
        "repo_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnlockAnOrganizationRepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unlock an organization repository"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION",
    "enum": "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories in an organization migration",
    "description": "List all the repositories for this organization migration.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org",
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesInAnOrganizationMigrationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories in an organization migration"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization fine grained permissions for an organization",
    "description": "Guidance on using fine-grained permissions for custom organization and repository\n    roles, including required user status and tokens with `admin:org` scope.\n    For more, visit GitHub docs on organization access management and endpoint\n    usage.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationFineGrainedPermissionsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization fine grained permissions for an organization"
  },
  {
    "name": "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all organization roles for an organization",
    "description": "The text lists roles in an organization, specifying access requires being\n    an administrator, a user with specific permissions, or using tokens with\n    `admin:org` scope. For more, see the provided link.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllOrganizationRolesForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all organization roles for an organization"
  },
  {
    "name": "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
    "enum": "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a custom organization role",
    "description": "Custom organization roles allow for tailored permissions, requiring admin\n    status or certain permissions to access. OAuth tokens must have `admin:org`\n    scope. For more, see GitHub's documentation on managing these roles.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A short description about the intended usage of this role or what permissions it grants. "
        },
        "name": {
          "type": "string",
          "description": "The name of the custom role."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "permissions": {
          "type": "array",
          "description": "A list of additional permissions included in this role."
        }
      },
      "required": [
        "org",
        "name",
        "permissions"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACustomOrganizationRoleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a custom organization role"
  },
  {
    "name": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
    "enum": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove all organization roles for a team",
    "description": "This endpoint removes all organization roles from a team, requiring an admin\n    user with `admin:org` scope via OAuth or personal access tokens. For details\n    on roles, check GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAllOrganizationRolesForATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove all organization roles for a team"
  },
  {
    "name": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
    "enum": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Assign an organization role to a team",
    "description": "The text details how to assign an organization role to a team, requiring\n    an admin user and `admin:org` scope for OAuth or personal access tokens.\n    For more, visit the provided GitHub documentation link.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AssignAnOrganizationRoleToATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Assign an organization role to a team"
  },
  {
    "name": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
    "enum": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove an organization role from a team",
    "description": "This endpoint allows organization administrators to remove a role from a\n    team, requiring `admin:org` scope for OAuth or personal access tokens. For\n    details on organization roles, visit GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAnOrganizationRoleFromATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove an organization role from a team"
  },
  {
    "name": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
    "enum": "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove all organization roles for a user",
    "description": "This endpoint allows an organization's admin to revoke all assigned roles\n    from a user. It requires an `admin:org` scope for OAuth and personal access\n    tokens to access. For more on roles, visit GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAllOrganizationRolesForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove all organization roles for a user"
  },
  {
    "name": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
    "enum": "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Assign an organization role to a user",
    "description": "This text explains how to assign organization roles to members, requiring\n    administrator access and `admin:org` scope for OAuth or personal tokens.\n    More info at GitHub Docs on managing access with roles.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AssignAnOrganizationRoleToAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Assign an organization role to a user"
  },
  {
    "name": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
    "enum": "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove an organization role from a user",
    "description": "To remove a user's org role, admins must use the `admin:org` endpoint with\n    OAuth or personal tokens. See GitHub documentation for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAnOrganizationRoleFromAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove an organization role from a user"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_ROLE",
    "enum": "GITHUB_GET_AN_ORGANIZATION_ROLE",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization role",
    "description": "This text explains how to get an organization role, requiring the user to\n    be an admin or have specific permissions. For details, see GitHub's documentation\n    on managing access with roles. OAuth app tokens need `admin:org` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        }
      },
      "required": [
        "org",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationRoleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization role"
  },
  {
    "name": "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
    "enum": "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a custom organization role",
    "description": "Updates an existing custom org role, affecting all assignees. Requires administrator\n    status or specific permissions. OAuth and personal access tokens need `admin:org`\n    scope for access. More details at GitHub docs on managing access with roles.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A short description about the intended usage of this role or what permissions it grants. "
        },
        "name": {
          "type": "string",
          "description": "The name of the custom role."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "permissions": {
          "type": "array",
          "description": "A list of additional permissions included in this role."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        }
      },
      "required": [
        "org",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateACustomOrganizationRoleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a custom organization role"
  },
  {
    "name": "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
    "enum": "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a custom organization role",
    "description": "Deletes a custom org role, requiring the user to be an org admin or have\n    specific permissions. OAuth tokens need `admin:org` scope. More info at\n    GitHub docs on managing access with roles.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        }
      },
      "required": [
        "org",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteACustomOrganizationRoleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a custom organization role"
  },
  {
    "name": "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
    "enum": "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List teams that are assigned to an organization role",
    "description": "This text details an API endpoint for listing teams by organization role,\n    requiring admin status and `admin:org` scope for access. For details on\n    roles, visit the provided GitHub link.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        }
      },
      "required": [
        "org",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamsThatAreAssignedToAnOrganizationRoleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List teams that are assigned to an organization role"
  },
  {
    "name": "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
    "enum": "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List users that are assigned to an organization role",
    "description": "This text describes an API endpoint for listing organization members by\n    role, requiring administrator access and the `admin:org` scope for OAuth\n    or classic tokens. More details on roles are available in a linked GitHub\n    doc.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "role_id": {
          "type": "integer",
          "description": "The unique identifier of the role."
        }
      },
      "required": [
        "org",
        "role_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUsersThatAreAssignedToAnOrganizationRoleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List users that are assigned to an organization role"
  },
  {
    "name": "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List outside collaborators for an organization",
    "description": "List all users who are outside collaborators of an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOutsideCollaboratorsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List outside collaborators for an organization"
  },
  {
    "name": "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
    "enum": "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Convert an organization member to outside collaborator",
    "description": "Converting an organization member to an outside collaborator restricts access\n    to only those repositories allowed by current team membership, removing\n    them from the organization. This action may be limited by enterprise administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "async": {
          "type": "boolean",
          "description": "When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ConvertAnOrganizationMemberToOutsideCollaboratorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Convert an organization member to outside collaborator"
  },
  {
    "name": "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
    "enum": "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove outside collaborator from an organization",
    "description": "Removing a user from this list will remove them from all the organization's\n    repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveOutsideCollaboratorFromAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove outside collaborator from an organization"
  },
  {
    "name": "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List packages for an organization",
    "description": "This endpoint lists user-readable packages in an organization, requiring\n    `read:packages` scope for OAuth and classic tokens. For certain registries,\n    `repo` scope is also needed. Details on these registries at GitHub's documentation\n    on package permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPackagesForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List packages for an organization"
  },
  {
    "name": "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a package for an organization",
    "description": "To access a package within an organization, OAuth and personal access tokens\n    need `read:packages` scope. If the package is in a registry requiring repository-scoped\n    permissions, `repo` scope is also necessary. See GitHub documentation for\n    specifics.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPackageForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a package for an organization"
  },
  {
    "name": "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a package for an organization",
    "description": "To delete an organization's package, you must be an admin. You can't delete\n    public packages with over 5,000 downloads (contact support). Requires `read:packages`\n    and `delete:packages` scopes, and `repo` scope for certain registries.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPackageForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a package for an organization"
  },
  {
    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Restore a package for an organization",
    "description": "A package in an organization can be restored within 30 days of deletion,\n    provided its namespace and version aren't reused. Admin permissions and\n    relevant token scopes are required for restoration.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "token": {
          "type": "string",
          "description": "package token"
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RestoreAPackageForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Restore a package for an organization"
  },
  {
    "name": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List package versions for a package owned by an organization",
    "description": "This endpoint displays organization-owned package versions, requiring `repo`\n    scope for access if the package is in a GitHub Packages registry with repository-scoped\n    permissions only. Visit GitHub Docs for more on registry specifics.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPackageVersionsForAPackageOwnedByAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List package versions for a package owned by an organization"
  },
  {
    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a package version for an organization",
    "description": "Fetching a specific package version in an organization requires `read:packages`\n    scope and potentially `repo` scope for certain package types, as per GitHub's\n    documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPackageVersionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a package version for an organization"
  },
  {
    "name": "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete package version for an organization",
    "description": "To remove a package version with \u003e5,000 downloads in an organization, an\n    admin must contact GitHub support and have the right admin permissions and\n    tokens with `read:packages`, `delete:packages`, and `repo` scopes for some\n    registries.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeletePackageVersionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete package version for an organization"
  },
  {
    "name": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Restore package version for an organization",
    "description": "A deleted organizational package can be restored within 30 days unless its\n    namespace and version are reused. Admin permissions and appropriate OAuth\n    scopes for GitHub Packages are needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "org",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RestorePackageVersionForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Restore package version for an organization"
  },
  {
    "name": "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
    "enum": "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listorgresourceswithpersonaltokens",
    "description": "Lists requests from organization members to access organization resources\n    with a fine-grained personal access token. Only GitHub Apps can use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "last_used_after": {
          "type": "string",
          "description": "Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "last_used_before": {
          "type": "string",
          "description": "Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "owner": {
          "type": "array",
          "description": "A list of owner usernames to use to filter the results."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "permission": {
          "type": "string",
          "description": "The permission to use to filter the results."
        },
        "repository": {
          "type": "string",
          "description": "The name of the repository to use to filter the results."
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrgResourcesWithPersonalTokensResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listorgresourceswithpersonaltokens"
  },
  {
    "name": "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
    "enum": "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Reviewresourcerequestswithfinegrainedtokens",
    "description": "Approves or denies multiple pending requests to access organization resources\n    via a fine-grained personal access token. Only GitHub Apps can use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "pat_request_ids": {
          "type": "array",
          "description": "Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values. "
        },
        "reason": {
          "type": "string",
          "description": "Reason for approving or denying the requests. Max 1024 characters."
        }
      },
      "required": [
        "org",
        "action"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReviewResourceRequestsWithFineGrainedTokensResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Reviewresourcerequestswithfinegrainedtokens"
  },
  {
    "name": "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
    "enum": "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Reviewaccesswithpersonaltoken",
    "description": "Approves or denies a pending request to access organization resources via\n    a fine-grained personal access token. Only GitHub Apps can use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "pat_request_id": {
          "type": "integer",
          "description": "Unique identifier of the request for access via fine-grained personal access token. "
        },
        "reason": {
          "type": "string",
          "description": "Reason for approving or denying the request. Max 1024 characters."
        }
      },
      "required": [
        "org",
        "pat_request_id",
        "action"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReviewAccessWithPersonalTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Reviewaccesswithpersonaltoken"
  },
  {
    "name": "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
    "enum": "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listrepoaccessbytoken",
    "description": "Lists the repositories a fine-grained personal access token request is requesting\n    access to. Only GitHub Apps can use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pat_request_id": {
          "type": "integer",
          "description": "Unique identifier of the request for access via fine-grained personal access token. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org",
        "pat_request_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepoAccessByTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listrepoaccessbytoken"
  },
  {
    "name": "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
    "enum": "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listorgresourceaccesstokens",
    "description": "Lists approved fine-grained personal access tokens owned by organization\n    members that can access organization resources. Only GitHub Apps can use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "last_used_after": {
          "type": "string",
          "description": "Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "last_used_before": {
          "type": "string",
          "description": "Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "owner": {
          "type": "array",
          "description": "A list of owner usernames to use to filter the results."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "permission": {
          "type": "string",
          "description": "The permission to use to filter the results."
        },
        "repository": {
          "type": "string",
          "description": "The name of the repository to use to filter the results."
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrgResourceAccessTokensResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listorgresourceaccesstokens"
  },
  {
    "name": "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
    "enum": "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Updateresourceaccesswithtokens",
    "description": "Updates the access organization members have to organization resources via\n    fine-grained personal access tokens. Limited to revoking a token's existing\n    access. Only GitHub Apps can use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "pat_ids": {
          "type": "array",
          "description": "The IDs of the fine-grained personal access tokens."
        }
      },
      "required": [
        "org",
        "action",
        "pat_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateResourceAccessWithTokensResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Updateresourceaccesswithtokens"
  },
  {
    "name": "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
    "enum": "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Updatetokenorgaccess",
    "description": "Updates the access an organization member has to organization resources\n    via a fine-grained personal access token. Limited to revoking the token's\n    existing access. Limited to revoking a token's existing access. Only GitHub\n    Apps can use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "pat_id": {
          "type": "integer",
          "description": "The unique identifier of the fine-grained personal access token."
        }
      },
      "required": [
        "org",
        "pat_id",
        "action"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateTokenOrgAccessResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Updatetokenorgaccess"
  },
  {
    "name": "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
    "enum": "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listtokenaccessrepositories",
    "description": "Lists the repositories a fine-grained personal access token has access to.\n    Only GitHub Apps can use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pat_id": {
          "type": "integer",
          "description": "Unique identifier of the fine-grained personal access token."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org",
        "pat_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTokenAccessRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listtokenaccessrepositories"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_PROJECTS",
    "enum": "GITHUB_LIST_ORGANIZATION_PROJECTS",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization projects",
    "description": "Lists the projects in an organization. Returns a `404 Not Found` status\n    if projects are disabled in the organization. If you do not have sufficient\n    privileges to perform this action, a `401 Unauthorized` or `410 Gone` status\n    is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationProjectsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization projects"
  },
  {
    "name": "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
    "enum": "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization project",
    "description": "Creates an organization project board. Returns `410 Gone` if projects are\n    disabled or absent in the organization, and `401 Unauthorized` or `410 Gone`\n    if the user lacks sufficient privileges.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The description of the project."
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an organization project"
  },
  {
    "name": "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all custom properties for an organization",
    "description": "Gets all custom properties defined for an organization. Organization members\n    can read these properties.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllCustomPropertiesForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all custom properties for an organization"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update custom properties for an organization",
    "description": "The endpoint allows creating or updating custom properties for an organization\n    in bulk, accessible to organization administrators or users with the `custom_properties_org_definitions_manager`\n    permission.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "properties": {
          "type": "array",
          "description": "The array of custom properties to create or update."
        }
      },
      "required": [
        "org",
        "properties"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateCustomPropertiesForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update custom properties for an organization"
  },
  {
    "name": "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a custom property for an organization",
    "description": "Gets a custom property that is defined for an organization. Organization\n    members can read these properties.",
    "parameters": {
      "type": "object",
      "properties": {
        "custom_property_name": {
          "type": "string",
          "description": "The custom property name. The name is case sensitive."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "custom_property_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACustomPropertyForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a custom property for an organization"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update a custom property for an organization",
    "description": "This endpoint allows creating or updating an organization's custom property.\n    It requires the user to be an administrator or have specific permission\n    (`custom_properties_org definitions_manager`).",
    "parameters": {
      "type": "object",
      "properties": {
        "allowed_values": {
          "type": "array",
          "description": "An ordered list of the allowed values of the property. The property can have up to 200 allowed values. "
        },
        "custom_property_name": {
          "type": "string",
          "description": "The custom property name. The name is case sensitive."
        },
        "default_value": {
          "type": "string",
          "description": "Default value of the property"
        },
        "description": {
          "type": "string",
          "description": "Short description of the property"
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "required": {
          "type": "boolean",
          "description": "Whether the property is required."
        },
        "value_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "custom_property_name",
        "value_type"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateACustomPropertyForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update a custom property for an organization"
  },
  {
    "name": "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a custom property for an organization",
    "description": "This endpoint deletes an organization's custom property. It requires the\n    user to be an organization admin or a user/team with the `custom_properties_org_definitions_manager`\n    permission.",
    "parameters": {
      "type": "object",
      "properties": {
        "custom_property_name": {
          "type": "string",
          "description": "The custom property name. The name is case sensitive."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org",
        "custom_property_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveACustomPropertyForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a custom property for an organization"
  },
  {
    "name": "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
    "enum": "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List custom property values for organization repositories",
    "description": "Lists organization repositories with all of their custom property values.\n    Organization members can read these properties.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repository_query": {
          "type": "string",
          "description": "Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCustomPropertyValuesForOrganizationRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List custom property values for organization repositories"
  },
  {
    "name": "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
    "enum": "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Managecustompropertiesfororgrepos",
    "description": "Update or create custom properties for up to 30 org. repositories per request.\n    Null values remove the property. Requires org admin or specific permission.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "properties": {
          "type": "array",
          "description": "List of custom property names and associated values to apply to the repositories. "
        },
        "repository_names": {
          "type": "array",
          "description": "The names of repositories that the custom property values will be applied to. "
        }
      },
      "required": [
        "org",
        "repository_names",
        "properties"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ManageCustomPropertiesForOrgReposResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Managecustompropertiesfororgrepos"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
    "enum": "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public organization members",
    "description": "Members of an organization can choose to have their membership publicized\n    or not.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicOrganizationMembersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public organization members"
  },
  {
    "name": "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check public organization membership for a user",
    "description": "Check if the provided user is a public member of the organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckPublicOrganizationMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check public organization membership for a user"
  },
  {
    "name": "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set public organization membership for the authenticated user",
    "description": "Users can publicize only their own memberships. When using this endpoint,\n    set the `Content-Length` to zero. For more, see GitHub's HTTP method guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetPublicOrganizationMembershipForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set public organization membership for the authenticated user"
  },
  {
    "name": "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
    "enum": "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removepublicorgmembership",
    "description": "Removes the public membership for the authenticated user from the specified\n    organization, unless public visibility is enforced by default.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemovePublicOrgMembershipResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removepublicorgmembership"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
    "enum": "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization repositories",
    "description": "Lists repositories for an organization. Viewing `security_and_analysis`\n    requires admin permissions for the repository or being an organization owner\n    or security manager. More info on managing security managers available.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization repositories"
  },
  {
    "name": "GITHUB_REPO_S_LIST_FOR_ORG",
    "enum": "GITHUB_REPO_S_LIST_FOR_ORG",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization repositories",
    "description": "Lists repositories for an organization. Viewing `security_and_analysis`\n    requires admin permissions for the repository or being an organization owner\n    or security manager. More info on managing security managers available.\u003c\u003cDEPRECATED\n    use list_organization_repositories\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationRepositoriesResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List organization repositories"
  },
  {
    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
    "enum": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization repository",
    "description": "A new repository can be created in a specific organization by a member.\n    OAuth and personal access tokens require `public_repo` or `repo` scope for\n    public, and `repo` scope for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_auto_merge": {
          "type": "boolean",
          "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. "
        },
        "allow_merge_commit": {
          "type": "boolean",
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. "
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. "
        },
        "allow_squash_merge": {
          "type": "boolean",
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. "
        },
        "auto_init": {
          "type": "boolean",
          "description": "Pass `true` to create an initial commit with empty README."
        },
        "custom_properties": {
          "type": "object",
          "description": "The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values. "
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.** "
        },
        "description": {
          "type": "string",
          "description": "A short description of the repository."
        },
        "gitignore_template": {
          "type": "string",
          "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\". "
        },
        "has_downloads": {
          "type": "boolean",
          "description": "Whether downloads are enabled."
        },
        "has_issues": {
          "type": "boolean",
          "description": "Either `true` to enable issues for this repository or `false` to disable them. "
        },
        "has_projects": {
          "type": "boolean",
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you\"re creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. "
        },
        "has_wiki": {
          "type": "boolean",
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it. "
        },
        "homepage": {
          "type": "string",
          "description": "A URL with more information about the repository."
        },
        "is_template": {
          "type": "boolean",
          "description": "Either `true` to make this repo available as a template repository or `false` to prevent it. "
        },
        "license_template": {
          "type": "string",
          "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\". "
        },
        "merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the repository."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "private": {
          "type": "boolean",
          "description": "Whether the repository is private."
        },
        "squash_merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "squash_merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. "
        },
        "use_squash_pr_title_as_default": {
          "type": "boolean",
          "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationRepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an organization repository"
  },
  {
    "name": "GITHUB_REPO_S_CREATE_IN_ORG",
    "enum": "GITHUB_REPO_S_CREATE_IN_ORG",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization repository",
    "description": "A new repository can be created in a specific organization by a member.\n    OAuth and personal access tokens require `public_repo` or `repo` scope for\n    public, and `repo` scope for private repositories.\u003c\u003cDEPRECATED use create_an_organization_repository\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_auto_merge": {
          "type": "boolean",
          "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. "
        },
        "allow_merge_commit": {
          "type": "boolean",
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. "
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. "
        },
        "allow_squash_merge": {
          "type": "boolean",
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. "
        },
        "auto_init": {
          "type": "boolean",
          "description": "Pass `true` to create an initial commit with empty README."
        },
        "custom_properties": {
          "type": "object",
          "description": "The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values. "
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.** "
        },
        "description": {
          "type": "string",
          "description": "A short description of the repository."
        },
        "gitignore_template": {
          "type": "string",
          "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\". "
        },
        "has_downloads": {
          "type": "boolean",
          "description": "Whether downloads are enabled."
        },
        "has_issues": {
          "type": "boolean",
          "description": "Either `true` to enable issues for this repository or `false` to disable them. "
        },
        "has_projects": {
          "type": "boolean",
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you\"re creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. "
        },
        "has_wiki": {
          "type": "boolean",
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it. "
        },
        "homepage": {
          "type": "string",
          "description": "A URL with more information about the repository."
        },
        "is_template": {
          "type": "boolean",
          "description": "Either `true` to make this repo available as a template repository or `false` to prevent it. "
        },
        "license_template": {
          "type": "string",
          "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\". "
        },
        "merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the repository."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "private": {
          "type": "boolean",
          "description": "Whether the repository is private."
        },
        "squash_merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "squash_merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. "
        },
        "use_squash_pr_title_as_default": {
          "type": "boolean",
          "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationRepositoryResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create an organization repository"
  },
  {
    "name": "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS",
    "enum": "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all organization repository rulesets",
    "description": "Get all the repository rulesets for an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllOrganizationRepositoryRulesetsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all organization repository rulesets"
  },
  {
    "name": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET",
    "enum": "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an organization repository ruleset",
    "description": "Create a repository ruleset for an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "bypass_actors": {
          "type": "array",
          "description": "The actors that can bypass the rules in this ruleset"
        },
        "enforcement": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the ruleset."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "rules": {
          "type": "array",
          "description": "An array of rules within the ruleset."
        },
        "target": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "name",
        "enforcement"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnOrganizationRepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an organization repository ruleset"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_RULE_SUITES",
    "enum": "GITHUB_LIST_ORGANIZATION_RULE_SUITES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization rule suites",
    "description": "Summarizes how to manage and view rule evaluations for repositories within\n    an organization, with detailed guidance available at the provided GitHub\n    documentation link.",
    "parameters": {
      "type": "object",
      "properties": {
        "actor_name": {
          "type": "string",
          "description": "The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. "
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repository_name": {
          "type": "integer",
          "description": "The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned. "
        },
        "rule_suite_result": {
          "type": "string",
          "description": ""
        },
        "time_period": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationRuleSuitesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization rule suites"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE",
    "enum": "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization rule suite",
    "description": "The text provides details on obtaining data about various rule evaluations\n    in an organization, guiding users to manage rulesets for repositories. For\n    further info, visit GitHub's documentation on managing rulesets.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "rule_suite_id": {
          "type": "integer",
          "description": "The unique identifier of the rule suite result. To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites) for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites) for organizations. "
        }
      },
      "required": [
        "org",
        "rule_suite_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationRuleSuiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization rule suite"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET",
    "enum": "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization repository ruleset",
    "description": "Get a repository ruleset for an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "ruleset_id": {
          "type": "integer",
          "description": "The ID of the ruleset."
        }
      },
      "required": [
        "org",
        "ruleset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationRepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization repository ruleset"
  },
  {
    "name": "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET",
    "enum": "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an organization repository ruleset",
    "description": "Update a ruleset for an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "bypass_actors": {
          "type": "array",
          "description": "The actors that can bypass the rules in this ruleset"
        },
        "enforcement": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the ruleset."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "rules": {
          "type": "array",
          "description": "An array of rules within the ruleset."
        },
        "ruleset_id": {
          "type": "integer",
          "description": "The ID of the ruleset."
        },
        "target": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "ruleset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnOrganizationRepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an organization repository ruleset"
  },
  {
    "name": "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET",
    "enum": "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an organization repository ruleset",
    "description": "Delete a ruleset for an organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "ruleset_id": {
          "type": "integer",
          "description": "The ID of the ruleset."
        }
      },
      "required": [
        "org",
        "ruleset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnOrganizationRepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an organization repository ruleset"
  },
  {
    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
    "tags": [
      "secret-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List secret scanning alerts for an organization",
    "description": "This endpoint displays secret scanning alerts for organization repositories,\n    requiring admin/security manager roles and specific token scopes (`repo`,\n    `security_events`, `public_repo`) for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "resolution": {
          "type": "string",
          "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. "
        },
        "secret_type": {
          "type": "string",
          "description": "A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "validity": {
          "type": "string",
          "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSecretScanningAlertsForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List secret scanning alerts for an organization"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository security advisories for an organization",
    "description": "This endpoint lists security advisories for an organization, accessible\n    only by its owners or security managers. OAuth and personal tokens require\n    the `repo` or `repository_advisories:write` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of advisories to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositorySecurityAdvisoriesForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository security advisories for an organization"
  },
  {
    "name": "GITHUB_LIST_SECURITY_MANAGER_TEAMS",
    "enum": "GITHUB_LIST_SECURITY_MANAGER_TEAMS",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List security manager teams",
    "description": "The text explains managing security in an organization, stating administrators\n    or security managers need OAuth or tokens with `read:org` scope. Details\n    are on GitHub.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSecurityManagerTeamsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List security manager teams"
  },
  {
    "name": "GITHUB_ADD_A_SECURITY_MANAGER_TEAM",
    "enum": "GITHUB_ADD_A_SECURITY_MANAGER_TEAM",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add a security manager team",
    "description": "This text outlines how to add a team as a security manager in an organization.\n    The user must be an admin and use tokens with `write:org` scope. More info\n    is available in the provided GitHub link.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddASecurityManagerTeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add a security manager team"
  },
  {
    "name": "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM",
    "enum": "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a security manager team",
    "description": "Removes the security manager role from a team in an organization. Administrators\n    with `admin:org` scope via OAuth or personal access tokens can use this\n    endpoint. For more, visit GitHub docs on managing security managers.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveASecurityManagerTeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a security manager team"
  },
  {
    "name": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION",
    "tags": [
      "billing"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github actions billing for an organization",
    "description": "The summary discusses GitHub Actions' usage, focusing on paid minutes for\n    private repo workflows and job reruns on GitHub-hosted runners. It mentions\n    OS-specific minute multipliers and the necessity of specific scopes for\n    OAuth tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubActionsBillingForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github actions billing for an organization"
  },
  {
    "name": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION",
    "tags": [
      "billing"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github packages billing for an organization",
    "description": "GitHub Packages tracks free and paid storage usage in GB. Paid storage is\n    for private repos only. OAuth or personal access tokens with `repo` or `admin:org`\n    scope are needed. Details at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubPackagesBillingForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github packages billing for an organization"
  },
  {
    "name": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION",
    "tags": [
      "billing"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get shared storage billing for an organization",
    "description": "This text details getting estimates for paid minutes and storage used by\n    GitHub Actions and GitHub Packages, highlighting that charges apply only\n    to private repos. It also mentions necessary token scopes (`repo`, `admin:org`)\n    for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetSharedStorageBillingForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get shared storage billing for an organization"
  },
  {
    "name": "GITHUB_LIST_TEAMS",
    "enum": "GITHUB_LIST_TEAMS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List teams",
    "description": "Lists all teams in an organization that are visible to the authenticated\n    user.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List teams"
  },
  {
    "name": "GITHUB_CREATE_A_TEAM",
    "enum": "GITHUB_CREATE_A_TEAM",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a team",
    "description": "In `{org}`, authenticated users can create teams if they're members or owners,\n    with all members having default creation rights. Owners can limit this ability.\n    Creators automatically become team maintainers. For permissions and more,\n    check GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the team."
        },
        "maintainers": {
          "type": "array",
          "description": "List GitHub IDs for organization members who will become team maintainers. "
        },
        "name": {
          "type": "string",
          "description": "The name of the team."
        },
        "notification_setting": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "parent_team_id": {
          "type": "integer",
          "description": "The ID of a team to set as the parent team."
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "privacy": {
          "type": "string",
          "description": ""
        },
        "repo_names": {
          "type": "array",
          "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to. "
        }
      },
      "required": [
        "org",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a team"
  },
  {
    "name": "GITHUB_GET_A_TEAM_BY_NAME",
    "enum": "GITHUB_GET_A_TEAM_BY_NAME",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a team by name",
    "description": "Retrieves a GitHub team using its `slug`, created by lowercasing the name,\n    replacing spaces with `-`, and special characters. Alternatively, specify\n    a team by `org_id` and `team_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetATeamByNameResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a team by name"
  },
  {
    "name": "GITHUB_UPDATE_A_TEAM",
    "enum": "GITHUB_UPDATE_A_TEAM",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a team",
    "description": "To edit a team, the authenticated user must either be an organization owner\n    or a team maintainer. **Note:** You can also specify a team by `org_id`\n    and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the team."
        },
        "name": {
          "type": "string",
          "description": "The name of the team."
        },
        "notification_setting": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "parent_team_id": {
          "type": "integer",
          "description": "The ID of a team to set as the parent team."
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "privacy": {
          "type": "string",
          "description": ""
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a team"
  },
  {
    "name": "GITHUB_DELETE_A_TEAM",
    "enum": "GITHUB_DELETE_A_TEAM",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a team",
    "description": "To delete a team, one must be an organization owner or a team maintainer.\n    Deleting a parent team also removes its child teams. Teams can be specified\n    for deletion using `org_id` and `team_id` via the specified route.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a team"
  },
  {
    "name": "GITHUB_LIST_DISCUSSIONS",
    "enum": "GITHUB_LIST_DISCUSSIONS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List discussions",
    "description": "Access all discussions on a team's page via `GET /organizations/{org_id}/team/{team_id}/discussions`,\n    needing OAuth or classic tokens with `read:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pinned": {
          "type": "string",
          "description": "Pinned discussions only filter"
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDiscussionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List discussions"
  },
  {
    "name": "GITHUB_CREATE_A_DISCUSSION",
    "enum": "GITHUB_CREATE_A_DISCUSSION",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a discussion",
    "description": "New endpoint allows creating posts on a team's page, triggering notifications.\n    Excessive use may lead to rate limiting. Supports specifying teams by `org_id`\n    and `team_id`. Requires `write:discussion` scope for OAuth and personal\n    access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion post\"s body text."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "private": {
          "type": "boolean",
          "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        },
        "title": {
          "type": "string",
          "description": "The discussion post\"s title."
        }
      },
      "required": [
        "org",
        "team_slug",
        "title",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADiscussionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a discussion"
  },
  {
    "name": "GITHUB_GET_A_DISCUSSION",
    "enum": "GITHUB_GET_A_DISCUSSION",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a discussion",
    "description": "Access a discussion on a team's page via `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.\n    Use OAuth or personal access tokens with `read:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADiscussionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a discussion"
  },
  {
    "name": "GITHUB_UPDATE_A_DISCUSSION",
    "enum": "GITHUB_UPDATE_A_DISCUSSION",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a discussion",
    "description": "This endpoint allows editing titles and bodies of discussion posts. Updates\n    are made with specific parameters. For team-specific discussions, use the\n    route with `org_id` and `team_id`. OAuth and personal tokens require `write:discussion`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion post\"s body text."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        },
        "title": {
          "type": "string",
          "description": "The discussion post\"s title."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateADiscussionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a discussion"
  },
  {
    "name": "GITHUB_DELETE_A_DISCUSSION",
    "enum": "GITHUB_DELETE_A_DISCUSSION",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a discussion",
    "description": "To remove a team discussion, use `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`\n    specifying `org_id` and `team_id`. OAuth and classic tokens require `write:discussion`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADiscussionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a discussion"
  },
  {
    "name": "GITHUB_LIST_DISCUSSION_COMMENTS",
    "enum": "GITHUB_LIST_DISCUSSION_COMMENTS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List discussion comments",
    "description": "Retrieve all comments from a team discussion by using the endpoint `GET\n    /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.\n    You need `read:discussion` scope on OAuth or personal tokens for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDiscussionCommentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List discussion comments"
  },
  {
    "name": "GITHUB_CREATE_A_DISCUSSION_COMMENT",
    "enum": "GITHUB_CREATE_A_DISCUSSION_COMMENT",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a discussion comment",
    "description": "The endpoint enables comment creation on team discussions with notifications;\n    usage may be rate limited. Requires OAuth or tokens with `write:discussion`\n    scope. An alternate route exists for team ID.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion comment\"s body text."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADiscussionCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a discussion comment"
  },
  {
    "name": "GITHUB_GET_A_DISCUSSION_COMMENT",
    "enum": "GITHUB_GET_A_DISCUSSION_COMMENT",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a discussion comment",
    "description": "To get a specific comment from a team discussion, use `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.\n    Ensure OAuth or personal access tokens have `read:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "comment_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADiscussionCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a discussion comment"
  },
  {
    "name": "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
    "enum": "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a discussion comment",
    "description": "This text outlines how to edit discussion comments, specifying teams with\n    `org_id` and `team_id`. It requires `write:discussion` scope for OAuth and\n    classic personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion comment\"s body text."
        },
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "comment_number",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateADiscussionCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a discussion comment"
  },
  {
    "name": "GITHUB_DELETE_A_DISCUSSION_COMMENT",
    "enum": "GITHUB_DELETE_A_DISCUSSION_COMMENT",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a discussion comment",
    "description": "This text explains how to delete a comment in a team discussion, either\n    by specifying an organization and team ID or directly. It notes that OAuth\n    or personal access tokens with the \"write:discussion\" scope are required.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "comment_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADiscussionCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a discussion comment"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a team discussion comment",
    "description": "API endpoint retrieves reactions to a team discussion comment; specify by\n    `org_id` and `team_id`. Requires `read:discussion` scope with OAuth or personal\n    access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "comment_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForATeamDiscussionCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a team discussion comment"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a team discussion comment",
    "description": "Adding a reaction to a team discussion comment via GitHub's API results\n    in HTTP `200` if the reaction exists. Specify teams by `org_id` and `team_id`.\n    OAuth tokens require `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "comment_number",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForATeamDiscussionCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a team discussion comment"
  },
  {
    "name": "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
    "enum": "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete team discussion comment reaction",
    "description": "To remove a team discussion comment reaction, use DELETE with specific IDs,\n    requiring `write:discussion` scope via OAuth/personal tokens. See documentation\n    for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "comment_number",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteTeamDiscussionCommentReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete team discussion comment reaction"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a team discussion",
    "description": "Access reactions to a team discussion via GET request, specifying by `org_id`\n    and `team_id`. OAuth and personal access tokens with `read:discussion` scope\n    are necessary.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForATeamDiscussionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a team discussion"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a team discussion",
    "description": "Adding a reaction to a team discussion via GitHub API returns HTTP `200`\n    if the reaction exists. Use `POST` with `org_id` and `team_id` for specific\n    teams. OAuth tokens require `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForATeamDiscussionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a team discussion"
  },
  {
    "name": "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
    "enum": "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete team discussion reaction",
    "description": "Use route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`\n    to remove a reaction from team discussions. Required `write:discussion`\n    scope for OAuth and personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "discussion_number",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteTeamDiscussionReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete team discussion reaction"
  },
  {
    "name": "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
    "enum": "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pending team invitations",
    "description": "The return hash from an Organization Invitation includes a `role` field\n    with values like `direct_member`, `admin`, etc. The `login` field is `null`\n    if the invitee isn't a GitHub member. Optionally, specify a team with `org_id`\n    and `team_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPendingTeamInvitationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List pending team invitations"
  },
  {
    "name": "GITHUB_LIST_TEAM_MEMBERS",
    "enum": "GITHUB_LIST_TEAM_MEMBERS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List team members",
    "description": "Team members will include the members of child teams. To list members in\n    a team, the team must be visible to the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "role": {
          "type": "string",
          "description": ""
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamMembersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List team members"
  },
  {
    "name": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get team membership for a user",
    "description": "To access team memberships, which include child members, team visibility\n    is needed. Use specific API endpoints to check membership details like `state`\n    and `role`, noting organization owners are `maintainers`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "team_slug",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTeamMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get team membership for a user"
  },
  {
    "name": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add or update team membership for a user",
    "description": "Organization owners or team maintainers can add members, with non-members\n    receiving email invites. Team sync is available for GitHub Enterprise Cloud,\n    allowing IdP to manage memberships. Use `org_id` and `team_id` for team\n    updates.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "role": {
          "type": "string",
          "description": ""
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "team_slug",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddOrUpdateTeamMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add or update team membership for a user"
  },
  {
    "name": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
    "enum": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove team membership for a user",
    "description": "To remove a team member, 'admin' rights or ownership is needed without deleting\n    the user. On GitHub Enterprise Cloud, team sync is supported, yet API edits\n    to membership with sync on can lead to errors. Teams can be managed through\n    IdP as well.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "org",
        "team_slug",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveTeamMembershipForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove team membership for a user"
  },
  {
    "name": "GITHUB_LIST_TEAM_PROJECTS",
    "enum": "GITHUB_LIST_TEAM_PROJECTS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List team projects",
    "description": "Lists the organization projects for a team. **Note:** You can also specify\n    a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamProjectsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List team projects"
  },
  {
    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
    "enum": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check team permissions for a project",
    "description": "The text explains how to check a team's permissions (`read`, `write`, `admin`)\n    on an organization project, including inherited projects. It also notes\n    the option to specify a team by `org_id` and `team_id` for project access.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckTeamPermissionsForAProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check team permissions for a project"
  },
  {
    "name": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
    "enum": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add or update team project permissions",
    "description": "To add or update a team's project, the user needs 'admin' rights. Projects\n    and teams must belong to the same organization. A team can be specified\n    by `org_id` and `team_id` via `PUT` request.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddOrUpdateTeamProjectPermissionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add or update team project permissions"
  },
  {
    "name": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
    "enum": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a project from a team",
    "description": "An organization owner or a team maintainer can remove a project from a team.\n    Organization members need `read` or `admin` access to do so. The action\n    doesn't delete the project. Teams can also be specified by `org_id` and\n    `team_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAProjectFromATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a project from a team"
  },
  {
    "name": "GITHUB_LIST_TEAM_REPOSITORIES",
    "enum": "GITHUB_LIST_TEAM_REPOSITORIES",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List team repositories",
    "description": "Lists a team's repositories visible to the authenticated user. **Note:**\n    You can also specify a team by `org_id` and `team_id` using the route `GET\n    /organizations/{org_id}/team/{team_id}/repos`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List team repositories"
  },
  {
    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check team permissions for a repository",
    "description": "The text guides on verifying a team's permissions for a repository, including\n    inherited permissions, by using a special media type. It elaborates on the\n    necessary permissions for private repositories and an alternative way to\n    specify a team.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckTeamPermissionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check team permissions for a repository"
  },
  {
    "name": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
    "enum": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add or update team repository permissions",
    "description": "To modify a team's repo permissions, admin access is needed along with team\n    visibility. Repos must be owned or forked by the org. Follow specific conditions\n    and set `Content-Length` to zero for empty parameters to avoid errors.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "permission": {
          "type": "string",
          "description": "The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team\"s `permission` attribute will be used to determine what permission to grant the team on this repository. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddOrUpdateTeamRepositoryPermissionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add or update team repository permissions"
  },
  {
    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
    "enum": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a repository from a team",
    "description": "Organization owners or team maintainers can remove repositories from their\n    team if they are authenticated. Members need admin access to remove a repository.\n    Removal doesn't delete the repo. Teams specified by `org_id` and `team_id`\n    with a DELETE route.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug",
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveARepositoryFromATeamResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a repository from a team"
  },
  {
    "name": "GITHUB_LIST_CHILD_TEAMS",
    "enum": "GITHUB_LIST_CHILD_TEAMS",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List child teams",
    "description": "Lists the child teams of the team specified by `{team_slug}`. **Note:**\n    You can also specify a team by `org_id` and `team_id` using the route `GET\n    /organizations/{org_id}/team/{team_id}/teams`.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_slug": {
          "type": "string",
          "description": "The slug of the team name."
        }
      },
      "required": [
        "org",
        "team_slug"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListChildTeamsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List child teams"
  },
  {
    "name": "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION",
    "enum": "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enable or disable a security feature for an organization",
    "description": "This text outlines how to enable/disable security features for all eligible\n    repositories in an organization, requiring the user to be an owner or a\n    security manager with `write:org` scope for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "enablement": {
          "type": "string",
          "description": ""
        },
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "query_suite": {
          "type": "string",
          "description": ""
        },
        "security_product": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "security_product",
        "enablement"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnableOrDisableASecurityFeatureForAnOrganizationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enable or disable a security feature for an organization"
  },
  {
    "name": "GITHUB_GET_A_PROJECT_CARD",
    "enum": "GITHUB_GET_A_PROJECT_CARD",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a project card",
    "description": "Gets information about a project card.",
    "parameters": {
      "type": "object",
      "properties": {
        "card_id": {
          "type": "integer",
          "description": "The unique identifier of the card."
        }
      },
      "required": [
        "card_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAProjectCardResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a project card"
  },
  {
    "name": "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
    "enum": "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an existing project card",
    "description": "Update an existing project card by specifying its unique ID. Allows modifying\n    notes and the archival status. Returns updated card details. For more info,\n    visit: https://docs.github.com/rest/projects/cards#update-an-existing-project-card",
    "parameters": {
      "type": "object",
      "properties": {
        "archived": {
          "type": "boolean",
          "description": "Whether or not the card is archived"
        },
        "card_id": {
          "type": "integer",
          "description": "The unique identifier of the card."
        },
        "note": {
          "type": "string",
          "description": "The project card\"s note"
        }
      },
      "required": [
        "card_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnExistingProjectCardResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an existing project card"
  },
  {
    "name": "GITHUB_DELETE_A_PROJECT_CARD",
    "enum": "GITHUB_DELETE_A_PROJECT_CARD",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a project card",
    "description": "Deletes a project card",
    "parameters": {
      "type": "object",
      "properties": {
        "card_id": {
          "type": "integer",
          "description": "The unique identifier of the card."
        }
      },
      "required": [
        "card_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAProjectCardResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a project card"
  },
  {
    "name": "GITHUB_MOVE_A_PROJECT_CARD",
    "enum": "GITHUB_MOVE_A_PROJECT_CARD",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Move a project card",
    "description": "This endpoint moves a project card to a specified column position using\n    `POST` with `card_id`, `column_id`, and `position` (top, bottom, or after\n    another card). Authentication needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "card_id": {
          "type": "integer",
          "description": "The unique identifier of the card."
        },
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column the card should be moved to"
        },
        "position": {
          "type": "string",
          "description": "The position of the card in a column. Can be one of: `top`, `bottom`, or `after:\u003ccard_id\u003e` to place after the specified card. "
        }
      },
      "required": [
        "card_id",
        "position"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MoveAProjectCardResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Move a project card"
  },
  {
    "name": "GITHUB_GET_A_PROJECT_COLUMN",
    "enum": "GITHUB_GET_A_PROJECT_COLUMN",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a project column",
    "description": "Gets information about a project column.",
    "parameters": {
      "type": "object",
      "properties": {
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column."
        }
      },
      "required": [
        "column_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAProjectColumnResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a project column"
  },
  {
    "name": "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
    "enum": "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an existing project column",
    "description": "Update an existing GitHub project column by ID. Requires column ID in the\n    path and a JSON request body with column's new name. Supports renaming project\n    columns. Refer to official documentation for more details.",
    "parameters": {
      "type": "object",
      "properties": {
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column."
        },
        "name": {
          "type": "string",
          "description": "Name of the project column"
        }
      },
      "required": [
        "column_id",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnExistingProjectColumnResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an existing project column"
  },
  {
    "name": "GITHUB_DELETE_A_PROJECT_COLUMN",
    "enum": "GITHUB_DELETE_A_PROJECT_COLUMN",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a project column",
    "description": "Deletes a project column.",
    "parameters": {
      "type": "object",
      "properties": {
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column."
        }
      },
      "required": [
        "column_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAProjectColumnResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a project column"
  },
  {
    "name": "GITHUB_LIST_PROJECT_CARDS",
    "enum": "GITHUB_LIST_PROJECT_CARDS",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List project cards",
    "description": "Lists the project cards in a project.",
    "parameters": {
      "type": "object",
      "properties": {
        "archived_state": {
          "type": "string",
          "description": ""
        },
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "column_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListProjectCardsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List project cards"
  },
  {
    "name": "GITHUB_CREATE_A_PROJECT_CARD",
    "enum": "GITHUB_CREATE_A_PROJECT_CARD",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a project card",
    "description": "To create a project card, submit a `POST` request with `column_id` and a\n    note or repository content details. Successful submissions return a 201\n    response with card details.",
    "parameters": {
      "type": "object",
      "properties": {
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column."
        }
      },
      "required": [
        "column_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAProjectCardResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a project card"
  },
  {
    "name": "GITHUB_MOVE_A_PROJECT_COLUMN",
    "enum": "GITHUB_MOVE_A_PROJECT_COLUMN",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Move a project column",
    "description": "The endpoint enables moving a project column to positions like 'first',\n    'last', or after a specified column ID, needing a column ID and position.\n    See more at GitHub API docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "column_id": {
          "type": "integer",
          "description": "The unique identifier of the column."
        },
        "position": {
          "type": "string",
          "description": "The position of the column in a project. Can be one of: `first`, `last`, or `after:\u003ccolumn_id\u003e` to place after the specified column. "
        }
      },
      "required": [
        "column_id",
        "position"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MoveAProjectColumnResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Move a project column"
  },
  {
    "name": "GITHUB_GET_A_PROJECT",
    "enum": "GITHUB_GET_A_PROJECT",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a project",
    "description": "Gets a project by its `id`. Returns a `404 Not Found` status if projects\n    are disabled. If you do not have sufficient privileges to perform this action,\n    a `401 Unauthorized` or `410 Gone` status is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        }
      },
      "required": [
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a project"
  },
  {
    "name": "GITHUB_UPDATE_A_PROJECT",
    "enum": "GITHUB_UPDATE_A_PROJECT",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a project",
    "description": "Updates a project board's information. Returns a `404 Not Found` status\n    if projects are disabled. If you do not have sufficient privileges to perform\n    this action, a `401 Unauthorized` or `410 Gone` status is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Body of the project"
        },
        "name": {
          "type": "string",
          "description": "Name of the project"
        },
        "organization_permission": {
          "type": "string",
          "description": ""
        },
        "private": {
          "type": "boolean",
          "description": "Whether or not this project can be seen by everyone."
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "state": {
          "type": "string",
          "description": "State of the project; either \"open\" or \"closed\""
        }
      },
      "required": [
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a project"
  },
  {
    "name": "GITHUB_DELETE_A_PROJECT",
    "enum": "GITHUB_DELETE_A_PROJECT",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a project",
    "description": "Deletes a project board. Returns a `404 Not Found` status if projects are\n    disabled.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        }
      },
      "required": [
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a project"
  },
  {
    "name": "GITHUB_LIST_PROJECT_COLLABORATORS",
    "enum": "GITHUB_LIST_PROJECT_COLLABORATORS",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List project collaborators",
    "description": "The project's collaborators list encompasses outside participants, direct\n    collaborators, team members, those with default permissions, and org owners.\n    Only org owners or project admins can view this list.",
    "parameters": {
      "type": "object",
      "properties": {
        "affiliation": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        }
      },
      "required": [
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListProjectCollaboratorsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List project collaborators"
  },
  {
    "name": "GITHUB_ADD_PROJECT_COLLABORATOR",
    "enum": "GITHUB_ADD_PROJECT_COLLABORATOR",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add project collaborator",
    "description": "Adds a collaborator to an organization project and sets their permission\n    level. You must be an organization owner or a project `admin` to add a collaborator.",
    "parameters": {
      "type": "object",
      "properties": {
        "permission": {
          "type": "string",
          "description": ""
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "project_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddProjectCollaboratorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add project collaborator"
  },
  {
    "name": "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
    "enum": "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove user as a collaborator",
    "description": "Removes a collaborator from an organization project. You must be an organization\n    owner or a project `admin` to remove a collaborator.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "project_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveUserAsACollaboratorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove user as a collaborator"
  },
  {
    "name": "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
    "enum": "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get project permission for a user",
    "description": "Returns the collaborator's permission level for an organization project.\n    Possible values for the `permission` key: `admin`, `write`, `read`, `none`.\n    You must be an organization owner or a project `admin` to review a user's\n    permission level.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "project_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetProjectPermissionForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get project permission for a user"
  },
  {
    "name": "GITHUB_LIST_PROJECT_COLUMNS",
    "enum": "GITHUB_LIST_PROJECT_COLUMNS",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List project columns",
    "description": "Lists the project columns in a project.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        }
      },
      "required": [
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListProjectColumnsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List project columns"
  },
  {
    "name": "GITHUB_CREATE_A_PROJECT_COLUMN",
    "enum": "GITHUB_CREATE_A_PROJECT_COLUMN",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a project column",
    "description": "Creates a new project column.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the project column"
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        }
      },
      "required": [
        "project_id",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAProjectColumnResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a project column"
  },
  {
    "name": "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "rate-limit"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get rate limit status for the authenticated user",
    "description": "The API divides rate limits into categories like `core`, `search`, and others.\n    Certain endpoint uses don't impact REST API limits. The `rate` object is\n    now deprecated; use `core`.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRateLimitStatusForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get rate limit status for the authenticated user"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY",
    "enum": "GITHUB_GET_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository",
    "description": "In a forked repository, `parent` is the direct source it was forked from,\n    and `source` is the original network source. Viewing `security_and_analysis`\n    requires admin, owner, or security manager permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository"
  },
  {
    "name": "GITHUB_UPDATE_A_REPOSITORY",
    "enum": "GITHUB_UPDATE_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a repository",
    "description": "**Note**: To edit a repository's topics, use the [Replace all repository\n    topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics)\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_auto_merge": {
          "type": "boolean",
          "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. "
        },
        "allow_forking": {
          "type": "boolean",
          "description": "Either `true` to allow private forks, or `false` to prevent private forks. "
        },
        "allow_merge_commit": {
          "type": "boolean",
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. "
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. "
        },
        "allow_squash_merge": {
          "type": "boolean",
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. "
        },
        "allow_update_branch": {
          "type": "boolean",
          "description": "Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise. "
        },
        "archived": {
          "type": "boolean",
          "description": "Whether to archive this repository. `false` will unarchive a previously archived repository. "
        },
        "default_branch": {
          "type": "string",
          "description": "Updates the default branch for this repository."
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. "
        },
        "description": {
          "type": "string",
          "description": "A short description of the repository."
        },
        "has_issues": {
          "type": "boolean",
          "description": "Either `true` to enable issues for this repository or `false` to disable them. "
        },
        "has_projects": {
          "type": "boolean",
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you\"re creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. "
        },
        "has_wiki": {
          "type": "boolean",
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it. "
        },
        "homepage": {
          "type": "string",
          "description": "A URL with more information about the repository."
        },
        "is_template": {
          "type": "boolean",
          "description": "Either `true` to make this repo available as a template repository or `false` to prevent it. "
        },
        "merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the repository."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "private": {
          "type": "boolean",
          "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "security__and__analysis__advanced__security__status": {
          "type": "string",
          "description": "Can be `enabled` or `disabled`."
        },
        "security__and__analysis__secret__scanning__push__protection__status": {
          "type": "string",
          "description": "Can be `enabled` or `disabled`."
        },
        "security__and__analysis__secret__scanning__status": {
          "type": "string",
          "description": "Can be `enabled` or `disabled`."
        },
        "squash_merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "squash_merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "use_squash_pr_title_as_default": {
          "type": "boolean",
          "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead. "
        },
        "visibility": {
          "type": "string",
          "description": ""
        },
        "web_commit_signoff_required": {
          "type": "boolean",
          "description": "Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a repository"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY",
    "enum": "GITHUB_DELETE_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository",
    "description": "Deleting a repository needs admin rights. If prevented by an organization\n    owner, a `403 Forbidden` response occurs. OAuth app tokens and classic personal\n    access tokens require the `delete_repo` scope for this action.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository"
  },
  {
    "name": "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List artifacts for a repository",
    "description": "Lists all artifacts for a repository. Anyone with read access to the repository\n    can use this endpoint. OAuth app tokens and personal access tokens (classic)\n    need the `repo` scope to use this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name field of an artifact. When specified, only artifacts with this name will be returned. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListArtifactsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List artifacts for a repository"
  },
  {
    "name": "GITHUB_GET_AN_ARTIFACT",
    "enum": "GITHUB_GET_AN_ARTIFACT",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an artifact",
    "description": "Gets a specific artifact for a workflow run. Anyone with read access to\n    the repository can use this endpoint. If the repository is private, OAuth\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "type": "integer",
          "description": "The unique identifier of the artifact."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "artifact_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnArtifactResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an artifact"
  },
  {
    "name": "GITHUB_DELETE_AN_ARTIFACT",
    "enum": "GITHUB_DELETE_AN_ARTIFACT",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an artifact",
    "description": "Deletes an artifact for a workflow run. OAuth tokens and personal access\n    tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "type": "integer",
          "description": "The unique identifier of the artifact."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "artifact_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnArtifactResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an artifact"
  },
  {
    "name": "GITHUB_DOWNLOAD_AN_ARTIFACT",
    "enum": "GITHUB_DOWNLOAD_AN_ARTIFACT",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download an artifact",
    "description": "This endpoint provides a temporary URL to download a repository archive\n    in zip format, expiring after 1 minute. Check the `Location:` in the response\n    for the URL. Requires `repo` scope for OAuth and personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "archive_format": {
          "type": "string",
          "description": "Archive Format"
        },
        "artifact_id": {
          "type": "integer",
          "description": "The unique identifier of the artifact."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "artifact_id",
        "archive_format"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadAnArtifactResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download an artifact"
  },
  {
    "name": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github actions cache usage for a repository",
    "description": "This API fetches GitHub Actions cache usage for a repository, updating roughly\n    every 5 minutes. It's accessible by anyone with read access, but private\n    repos require OAuth or personal access tokens with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubActionsCacheUsageForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github actions cache usage for a repository"
  },
  {
    "name": "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List github actions caches for a repository",
    "description": "Lists the GitHub Actions caches for a repository. OAuth tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "key": {
          "type": "string",
          "description": "An explicit key or prefix for identifying the cache"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/\u003cbranch name\u003e`. To reference a pull request use `refs/pull/\u003cnumber\u003e/merge`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGithubActionsCachesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List github actions caches for a repository"
  },
  {
    "name": "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
    "enum": "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Clearrepositorycachebykey",
    "description": "The text outlines the process of deleting GitHub Actions caches for a repository\n    via a full cache key, offering an option to use a Git ref for precise removals.\n    It mentions that OAuth and personal access tokens need the `repo` scope\n    for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "A key for identifying the cache."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/\u003cbranch name\u003e`. To reference a pull request use `refs/pull/\u003cnumber\u003e/merge`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "key"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ClearRepositoryCacheByKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Clearrepositorycachebykey"
  },
  {
    "name": "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
    "enum": "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete github actions cache by id",
    "description": "Deletes a GitHub Actions cache for a repository, using a cache ID. OAuth\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "cache_id": {
          "type": "integer",
          "description": "The unique identifier of the GitHub Actions cache."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "cache_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteGithubActionsCacheByIdResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete github actions cache by id"
  },
  {
    "name": "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a job for a workflow run",
    "description": "Gets a specific job in a workflow run. Anyone with read access to the repository\n    can use this endpoint. If the repository is private, OAuth tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "integer",
          "description": "The unique identifier of the job."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "job_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAJobForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a job for a workflow run"
  },
  {
    "name": "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download job logs for a workflow run",
    "description": "Obtain a temporary (1-minute expiry) redirect URL for downloading plain\n    text workflow job logs from the `Location:` response header. Access needs\n    repository read rights, with private repositories requiring OAuth or tokens\n    with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "integer",
          "description": "The unique identifier of the job."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "job_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadJobLogsForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download job logs for a workflow run"
  },
  {
    "name": "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
    "enum": "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Re run a job from a workflow run",
    "description": "Re-run a job and its dependent jobs in a workflow run. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "enable_debug_logging": {
          "type": "boolean",
          "description": "Whether to enable debug logging for the re-run."
        },
        "job_id": {
          "type": "integer",
          "description": "The unique identifier of the job."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "job_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReRunAJobFromAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Re run a job from a workflow run"
  },
  {
    "name": "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
    "enum": "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Customize oidc subject claim template",
    "description": "Gets the customization template for an OpenID Connect (OIDC) subject claim.\n    OAuth tokens and personal access tokens (classic) need the `repo` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CustomizeOidcSubjectClaimTemplateResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Customize oidc subject claim template"
  },
  {
    "name": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
    "enum": "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Customoidcsubjectclaimtemplatesetter",
    "description": "Sets the customization template and `opt-in` or `opt-out` flag for an OpenID\n    Connect (OIDC) subject claim for a repository. OAuth app tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "include_claim_keys": {
          "type": "array",
          "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "use_default": {
          "type": "boolean",
          "description": "Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. "
        }
      },
      "required": [
        "owner",
        "repo",
        "use_default"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CustomOidcsubjectClaimTemplateSetterResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Customoidcsubjectclaimtemplatesetter"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
    "enum": "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository organization secrets",
    "description": "This text outlines that authorized users with collaborator access can manage\n    organization secrets linked to a repository, without seeing their encrypted\n    values. OAuth or personal access tokens with `repo` scope are required for\n    access.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryOrganizationSecretsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository organization secrets"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
    "enum": "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository organization variables",
    "description": "This text outlines that to create, update, or read organization variables\n    shared with a repository, authenticated users need collaborator access.\n    Using the endpoint requires OAuth or classic personal access tokens with\n    `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryOrganizationVariablesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository organization variables"
  },
  {
    "name": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github actions permissions for a repository",
    "description": "The text outlines retrieving the GitHub Actions permissions policy for a\n    repository, highlighting the enabled status, allowed actions/workflows,\n    and the requirement for `repo` scope in OAuth and classic personal access\n    tokens to access this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubActionsPermissionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github actions permissions for a repository"
  },
  {
    "name": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set github actions permissions for a repository",
    "description": "Sets the GitHub Actions permissions policy for enabling GitHub Actions and\n    allowed actions and reusable workflows in the repository. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "allowed_actions": {
          "type": "string",
          "description": ""
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether GitHub Actions is enabled on the repository."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "enabled"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetGithubActionsPermissionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set github actions permissions for a repository"
  },
  {
    "name": "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
    "enum": "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the level of access for workflows outside of the repository",
    "description": "This endpoint determines access levels for workflows outside a private repository\n    to its actions and reusable workflows. Relevant for private repositories,\n    requiring `repo` scope for OAuth and classic personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheLevelOfAccessForWorkflowsOutsideOfTheRepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the level of access for workflows outside of the repository"
  },
  {
    "name": "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
    "enum": "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set the level of access for workflows outside of the repository",
    "description": "This endpoint controls the access level for external workflows to actions\n    and reusable workflows in private repositories. It requires `repo` scope\n    for OAuth and classic personal access tokens. For details, refer to GitHub\n    documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "access_level": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "access_level"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetTheLevelOfAccessForWorkflowsOutsideOfTheRepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set the level of access for workflows outside of the repository"
  },
  {
    "name": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get allowed actions and reusable workflows for a repository",
    "description": "This endpoint retrieves settings for allowed actions and workflows in a\n    repository with `allowed_actions` set to `selected`. Requires `repo` scope\n    for OAuth/personal access tokens. See guide for setting permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllowedActionsAndReusableWorkflowsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get allowed actions and reusable workflows for a repository"
  },
  {
    "name": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
    "enum": "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set allowed actions and reusable workflows for a repository",
    "description": "This endpoint configures allowed actions and workflows in a repository,\n    requiring the `repo` scope for OAuth and classic tokens. The `allowed_actions`\n    policy must be set to `selected`. See documentation for setting GitHub Actions\n    permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "github_owned_allowed": {
          "type": "boolean",
          "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "patterns_allowed": {
          "type": "array",
          "description": "Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`. **Note**: The `patterns_allowed` setting only applies to public repositories. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "verified_allowed": {
          "type": "boolean",
          "description": "Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetAllowedActionsAndReusableWorkflowsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set allowed actions and reusable workflows for a repository"
  },
  {
    "name": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get default workflow permissions for a repository",
    "description": "This document details the default workflow permissions of the `GITHUB_TOKEN`\n    and its ability to approve pull requests in repositories. It also notes\n    that OAuth and personal access tokens need `repo` scope. For more, visit\n    GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetDefaultWorkflowPermissionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get default workflow permissions for a repository"
  },
  {
    "name": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set default workflow permissions for a repository",
    "description": "Defines default `GITHUB_TOKEN` permissions and control over GitHub Actions'\n    ability to authorize pull requests. Requires `repo` scope for OAuth or personal\n    tokens. Details at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "can_approve_pull_request_reviews": {
          "type": "boolean",
          "description": "Whether GitHub Actions can approve pull requests. Enabling this can be a security risk. "
        },
        "default_workflow_permissions": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetDefaultWorkflowPermissionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set default workflow permissions for a repository"
  },
  {
    "name": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List self hosted runners for a repository",
    "description": "Lists all self-hosted runners configured in a repository. Authenticated\n    users must have admin access to the repository to use this endpoint. OAuth\n    app tokens and personal access tokens (classic) need the `repo` scope to\n    use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a self-hosted runner."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSelfHostedRunnersForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List self hosted runners for a repository"
  },
  {
    "name": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List runner applications for a repository",
    "description": "Lists binaries for the runner application that you can download and run.\n    Authenticated users must have admin access to the repository to use this\n    endpoint. OAuth app tokens and personal access tokens (classic) need the\n    `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRunnerApplicationsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List runner applications for a repository"
  },
  {
    "name": "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create configuration for a just in time runner for a repository",
    "description": "Generates a configuration that can be passed to the runner application at\n    startup. The authenticated user must have admin access to the repository.\n    OAuth tokens and personal access tokens (classic) need the`repo` scope to\n    use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100. "
        },
        "name": {
          "type": "string",
          "description": "The name of the new runner."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_group_id": {
          "type": "integer",
          "description": "The ID of the runner group to register the runner to."
        },
        "work_folder": {
          "type": "string",
          "description": "The working directory to be used for job execution, relative to the runner install directory. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name",
        "runner_group_id",
        "labels"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateConfigurationForAJustInTimeRunnerForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create configuration for a just in time runner for a repository"
  },
  {
    "name": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a registration token for a repository",
    "description": "This endpoint provides a registration token for configuring a self-hosted\n    runner, which expires in 1 hour. It requires admin access to the repository\n    and OAuth or personal access tokens with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARegistrationTokenForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a registration token for a repository"
  },
  {
    "name": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a remove token for a repository",
    "description": "This endpoint provides a token to remove a self-hosted runner from a repository,\n    expiring in 1 hour. Users require admin access and the `repo` scope for\n    OAuth/personal tokens to use it.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARemoveTokenForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a remove token for a repository"
  },
  {
    "name": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a self hosted runner for a repository",
    "description": "Gets a specific self-hosted runner configured in a repository. Authenticated\n    users must have admin access to the repository to use this endpoint. OAuth\n    app tokens and personal access tokens (classic) need the `repo` scope to\n    use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetASelfHostedRunnerForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a self hosted runner for a repository"
  },
  {
    "name": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
    "enum": "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a self hosted runner from a repository",
    "description": "This endpoint allows admins to remove a self-hosted runner from a repository,\n    especially useful if the machine is no longer available. Users must have\n    admin access and the `repo` scope on their OAuth or personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteASelfHostedRunnerFromARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a self hosted runner from a repository"
  },
  {
    "name": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List labels for a self hosted runner for a repository",
    "description": "Lists all labels for a self-hosted runner configured in a repository. Authenticated\n    users must have admin access to the repository to use this endpoint. OAuth\n    app tokens and personal access tokens (classic) need the `repo` scope to\n    use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListLabelsForASelfHostedRunnerForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List labels for a self hosted runner for a repository"
  },
  {
    "name": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "enum": "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add custom labels to a self hosted runner for a repository",
    "description": "Adds custom labels to a self-hosted runner configured in a repository. Authenticated\n    users must have admin access to the organization to use this endpoint. OAuth\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "The names of the custom labels to add to the runner."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id",
        "labels"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddCustomLabelsToASelfHostedRunnerForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add custom labels to a self hosted runner for a repository"
  },
  {
    "name": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "enum": "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set custom labels for a self hosted runner for a repository",
    "description": "To remove existing and set new custom labels for a self-hosted runner in\n    a repository, admin access is needed. OAuth and classic personal tokens\n    require `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id",
        "labels"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetCustomLabelsForASelfHostedRunnerForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set custom labels for a self hosted runner for a repository"
  },
  {
    "name": "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
    "enum": "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removecustomlabelsfromselfhostedrepositoryrunner",
    "description": "This endpoint removes custom labels from a self-hosted runner in a repository,\n    returning any read-only labels. Admin access is required, and OAuth or personal\n    access tokens need `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveCustomLabelsFromSelfHostedRepositoryRunnerResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removecustomlabelsfromselfhostedrepositoryrunner"
  },
  {
    "name": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
    "enum": "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Removecustomlabelfromreporunner",
    "description": "This endpoint allows admin users to remove a custom label from a self-hosted\n    runner in a repository, returning the remaining labels. A `404` status occurs\n    if the label is absent. OAuth app tokens and personal access tokens require\n    `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a self-hosted runner\"s custom label."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "runner_id": {
          "type": "integer",
          "description": "Unique identifier of the self-hosted runner."
        }
      },
      "required": [
        "owner",
        "repo",
        "runner_id",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveCustomLabelFromRepoRunnerResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Removecustomlabelfromreporunner"
  },
  {
    "name": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List workflow runs for a repository",
    "description": "This document explains how to access and filter workflow runs in a GitHub\n    repository for users with read access, requiring `repo` scope for private\n    ones. It limits searches to 1,000 results per query with parameters.",
    "parameters": {
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "description": "Returns someone\"s workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. "
        },
        "branch": {
          "type": "string",
          "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`. "
        },
        "check_suite_id": {
          "type": "integer",
          "description": "Returns workflow runs with the `check_suite_id` that you specify."
        },
        "created": {
          "type": "string",
          "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        },
        "event": {
          "type": "string",
          "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" "
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "description": "If `true` pull requests are omitted from the response (empty array)."
        },
        "head_sha": {
          "type": "string",
          "description": "Only returns workflow runs that are associated with the specified `head_sha`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "status": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListWorkflowRunsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List workflow runs for a repository"
  },
  {
    "name": "GITHUB_GET_A_WORKFLOW_RUN",
    "enum": "GITHUB_GET_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a workflow run",
    "description": "Gets a specific workflow run. Anyone with read access to the repository\n    can use this endpoint. OAuth app tokens and personal access tokens (classic)\n    need the `repo` scope to use this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "exclude_pull_requests": {
          "type": "boolean",
          "description": "If `true` pull requests are omitted from the response (empty array)."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a workflow run"
  },
  {
    "name": "GITHUB_DELETE_A_WORKFLOW_RUN",
    "enum": "GITHUB_DELETE_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a workflow run",
    "description": "Deletes a specific workflow run. Anyone with write access to the repository\n    can use this endpoint. If the repository is private, OAuth tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a workflow run"
  },
  {
    "name": "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the review history for a workflow run",
    "description": "Anyone with read access to the repository can use this endpoint. OAuth app\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheReviewHistoryForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the review history for a workflow run"
  },
  {
    "name": "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
    "enum": "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Approve a workflow run for a fork pull request",
    "description": "The text outlines how to approve workflow runs for pull requests from new\n    contributors using public forks, highlighting the need for `repo` scope\n    with OAuth and personal access tokens. Detailed guidance is provided in\n    a GitHub documentation link.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ApproveAWorkflowRunForAForkPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Approve a workflow run for a fork pull request"
  },
  {
    "name": "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
    "enum": "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List workflow run artifacts",
    "description": "Lists artifacts for a workflow run. Anyone with read access to the repository\n    can use this endpoint. OAuth app tokens and personal access tokens (classic)\n    need the `repo` scope to use this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name field of an artifact. When specified, only artifacts with this name will be returned. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListWorkflowRunArtifactsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List workflow run artifacts"
  },
  {
    "name": "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
    "enum": "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a workflow run attempt",
    "description": "Gets a specific workflow run attempt. Anyone with read access to the repository\n    can use this endpoint. OAuth app tokens and personal access tokens (classic)\n    need the `repo` scope to use this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_number": {
          "type": "integer",
          "description": "The attempt number of the workflow run."
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "description": "If `true` pull requests are omitted from the response (empty array)."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id",
        "attempt_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAWorkflowRunAttemptResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a workflow run attempt"
  },
  {
    "name": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
    "enum": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List jobs for a workflow run attempt",
    "description": "An API endpoint lists workflow run jobs, supports filtering, and is accessible\n    with repository read access. It requires `repo` scope for private repositories\n    when using OAuth or personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_number": {
          "type": "integer",
          "description": "The attempt number of the workflow run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id",
        "attempt_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListJobsForAWorkflowRunAttemptResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List jobs for a workflow run attempt"
  },
  {
    "name": "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
    "enum": "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download workflow run attempt logs",
    "description": "This endpoint guides users to a URL to download a workflow run's logs, expiring\n    in 1 minute, found in the `Location:` header, accessible to those with repo\n    read access. Private repos need OAuth or personal access tokens with `repo`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "attempt_number": {
          "type": "integer",
          "description": "The attempt number of the workflow run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id",
        "attempt_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadWorkflowRunAttemptLogsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download workflow run attempt logs"
  },
  {
    "name": "GITHUB_CANCEL_A_WORKFLOW_RUN",
    "enum": "GITHUB_CANCEL_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Cancel a workflow run",
    "description": "Cancels a workflow run using its `id`. OAuth tokens and personal access\n    tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CancelAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Cancel a workflow run"
  },
  {
    "name": "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Review custom deployment protection rules for a workflow run",
    "description": "Approve or reject GitHub App custom deployment protection rules for workflow\n    runs. Only the app's rules can be reviewed. Use specific personal or OAuth\n    app tokens with 'repo' scope for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReviewCustomDeploymentProtectionRulesForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Review custom deployment protection rules for a workflow run"
  },
  {
    "name": "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
    "enum": "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Force cancel a workflow run",
    "description": "This endpoint cancels a workflow run, overriding any conditions like `always()`\n    that would continue execution. It's for unresponsive workflows. Use requires\n    `repo` scope on OAuth or personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ForceCancelAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Force cancel a workflow run"
  },
  {
    "name": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List jobs for a workflow run",
    "description": "The text outlines an endpoint to list workflow run jobs with filter options.\n    It's open to users with read access to the repository, but private repos\n    need 'repo' scope for OAuth and classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListJobsForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List jobs for a workflow run"
  },
  {
    "name": "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
    "enum": "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download workflow run logs",
    "description": "This service provides a temporary URL to download a workflow run's log archive,\n    expiring in 1 minute. Accessible to users with read access, private repos\n    require OAuth or classic tokens with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadWorkflowRunLogsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download workflow run logs"
  },
  {
    "name": "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
    "enum": "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete workflow run logs",
    "description": "Deletes all logs for a workflow run. OAuth tokens and personal access tokens\n    (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteWorkflowRunLogsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete workflow run logs"
  },
  {
    "name": "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get pending deployments for a workflow run",
    "description": "This endpoint retrieves deployment environments awaiting protection rule\n    clearance in a workflow run, accessible to anyone with repository read access.\n    For private repositories, OAuth and classic personal access tokens require\n    the `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetPendingDeploymentsForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get pending deployments for a workflow run"
  },
  {
    "name": "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
    "enum": "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Review pending deployments for a workflow run",
    "description": "Approve or reject pending deployments needing reviewer approval. Reviewers\n    with read access and OAuth or classic tokens with `repo` scope can use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "description": "A comment to accompany the deployment review"
        },
        "environment_ids": {
          "type": "array",
          "description": "The list of environment ids to approve or reject"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id",
        "environment_ids",
        "state",
        "comment"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReviewPendingDeploymentsForAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Review pending deployments for a workflow run"
  },
  {
    "name": "GITHUB_RE_RUN_A_WORKFLOW",
    "enum": "GITHUB_RE_RUN_A_WORKFLOW",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Re run a workflow",
    "description": "Re-runs your workflow run using its `id`. OAuth app tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "enable_debug_logging": {
          "type": "boolean",
          "description": "Whether to enable debug logging for the re-run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReRunAWorkflowResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Re run a workflow"
  },
  {
    "name": "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
    "enum": "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Re run failed jobs from a workflow run",
    "description": "Re-run all of the failed jobs and their dependent jobs in a workflow run\n    using the `id` of the workflow run. OAuth app tokens and personal access\n    tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "enable_debug_logging": {
          "type": "boolean",
          "description": "Whether to enable debug logging for the re-run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReRunFailedJobsFromAWorkflowRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Re run failed jobs from a workflow run"
  },
  {
    "name": "GITHUB_GET_WORKFLOW_RUN_USAGE",
    "enum": "GITHUB_GET_WORKFLOW_RUN_USAGE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get workflow run usage",
    "description": "GitHub bills minutes for private repo workflows, tracking job re-runs and\n    milliseconds but excludes OS multipliers. Requires read permissions and\n    certain token scopes. A further document is available for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "run_id": {
          "type": "integer",
          "description": "The unique identifier of the workflow run."
        }
      },
      "required": [
        "owner",
        "repo",
        "run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetWorkflowRunUsageResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get workflow run usage"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_SECRETS",
    "enum": "GITHUB_LIST_REPOSITORY_SECRETS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository secrets",
    "description": "This endpoint lists all secrets in a repository without showing encrypted\n    values. It requires users to be collaborators and OAuth app tokens or classic\n    personal access tokens with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositorySecretsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository secrets"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
    "enum": "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository public key",
    "description": "This endpoint allows users with read access to obtain a public key for encrypting\n    secrets. For private repositories, OAuth or personal access tokens with\n    `repo` scope are required.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryPublicKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository public key"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_SECRET",
    "enum": "GITHUB_GET_A_REPOSITORY_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository secret",
    "description": "This endpoint allows fetching a single repository secret without disclosing\n    its encrypted value. It requires the user to have collaborator access and\n    OAuth or classic personal access tokens with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositorySecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository secret"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
    "enum": "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update a repository secret",
    "description": "This text explains how to create or update a repository secret with an encrypted\n    value using LibSodium. It requires collaborator access and an OAuth or personal\n    access token with `repo` scope. For encryption details, visit GitHub's guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateARepositorySecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update a repository secret"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY_SECRET",
    "enum": "GITHUB_DELETE_A_REPOSITORY_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository secret",
    "description": "Deletes a secret in a repository using the secret name. Authenticated users\n    must have collaborator access to a repository to create, update, or read\n    secrets. OAuth tokens and personal access tokens (classic) need the `repo`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositorySecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository secret"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_VARIABLES",
    "enum": "GITHUB_LIST_REPOSITORY_VARIABLES",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository variables",
    "description": "Lists all repository variables. Authenticated users must have collaborator\n    access to a repository to create, update, or read variables. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryVariablesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository variables"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
    "enum": "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository variable",
    "description": "To create, update, or read variables in a GitHub Actions workflow, authenticated\n    collaborators need `repo` scope on OAuth/personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "value": {
          "type": "string",
          "description": "The value of the variable."
        }
      },
      "required": [
        "owner",
        "repo",
        "name",
        "value"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository variable"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_VARIABLE",
    "enum": "GITHUB_GET_A_REPOSITORY_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository variable",
    "description": "Gets a specific variable in a repository. The authenticated user must have\n    collaborator access to the repository to use this endpoint. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository variable"
  },
  {
    "name": "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
    "enum": "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a repository variable",
    "description": "To create, update, or read variables in a GitHub Actions workflow, authenticated\n    users need collaborator access, and OAuth app tokens or classic personal\n    access tokens must have the `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "value": {
          "type": "string",
          "description": "The value of the variable."
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateARepositoryVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a repository variable"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
    "enum": "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository variable",
    "description": "Deletes a repository variable using the variable name. Authenticated users\n    must have collaborator access to a repository to create, update, or read\n    variables. OAuth tokens and personal access tokens (classic) need the `repo`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositoryVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository variable"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_WORKFLOWS",
    "enum": "GITHUB_LIST_REPOSITORY_WORKFLOWS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository workflows",
    "description": "Lists the workflows in a repository. Anyone with read access to the repository\n    can use this endpoint. OAuth app tokens and personal access tokens (classic)\n    need the `repo` scope to use this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryWorkflowsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository workflows"
  },
  {
    "name": "GITHUB_GET_A_WORKFLOW",
    "enum": "GITHUB_GET_A_WORKFLOW",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a workflow",
    "description": "This endpoint fetches a specific workflow using its file name (e.g., `main.yaml`)\n    for users with read repository access. Access to private repositories needs\n    `repo` scope for OAuth and personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "workflow_id": {
          "type": "integer",
          "description": "The ID of the workflow. You can also pass the workflow file name as a string. "
        }
      },
      "required": [
        "owner",
        "repo",
        "workflow_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAWorkflowResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a workflow"
  },
  {
    "name": "GITHUB_DISABLE_A_WORKFLOW",
    "enum": "GITHUB_DISABLE_A_WORKFLOW",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Disable a workflow",
    "description": "Disables a workflow, setting its `state` to `disabled_manually`, by replacing\n    `workflow_id` with the workflow file name, e.g., `main.yaml`. Requires `repo`\n    scope for OAuth and classic personal access tokens to access this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "workflow_id": {
          "type": "integer",
          "description": "The ID of the workflow. You can also pass the workflow file name as a string. "
        }
      },
      "required": [
        "owner",
        "repo",
        "workflow_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DisableAWorkflowResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Disable a workflow"
  },
  {
    "name": "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
    "enum": "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a workflow dispatch event",
    "description": "Manually trigger a GitHub Actions workflow by replacing `workflow_id` with\n    the file name (e.g., `main.yaml`). Ensure it's set to activate on a `workflow_dispatch`\n    event with properly configured `inputs`. OAuth/personal tokens require `repo`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "object",
          "description": "Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The git reference for the workflow. The reference can be a branch or tag name. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "workflow_id": {
          "type": "integer",
          "description": "The ID of the workflow. You can also pass the workflow file name as a string. "
        }
      },
      "required": [
        "owner",
        "repo",
        "workflow_id",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAWorkflowDispatchEventResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a workflow dispatch event"
  },
  {
    "name": "GITHUB_ENABLE_A_WORKFLOW",
    "enum": "GITHUB_ENABLE_A_WORKFLOW",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enable a workflow",
    "description": "Activates a workflow with `workflow_id` or filename (e.g., `main.yaml`),\n    requiring the `repo` scope for OAuth or classic personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "workflow_id": {
          "type": "integer",
          "description": "The ID of the workflow. You can also pass the workflow file name as a string. "
        }
      },
      "required": [
        "owner",
        "repo",
        "workflow_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnableAWorkflowResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enable a workflow"
  },
  {
    "name": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
    "enum": "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List workflow runs for a workflow",
    "description": "List all workflow runs using `workflow_id` or the file name like `main.yaml`.\n    Parameters can refine results. It's accessible to those with read access,\n    and private repositories require `repo` scope via OAuth or personal access\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "description": "Returns someone\"s workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. "
        },
        "branch": {
          "type": "string",
          "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`. "
        },
        "check_suite_id": {
          "type": "integer",
          "description": "Returns workflow runs with the `check_suite_id` that you specify."
        },
        "created": {
          "type": "string",
          "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" "
        },
        "event": {
          "type": "string",
          "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" "
        },
        "exclude_pull_requests": {
          "type": "boolean",
          "description": "If `true` pull requests are omitted from the response (empty array)."
        },
        "head_sha": {
          "type": "string",
          "description": "Only returns workflow runs that are associated with the specified `head_sha`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "status": {
          "type": "string",
          "description": ""
        },
        "workflow_id": {
          "type": "integer",
          "description": "The ID of the workflow. You can also pass the workflow file name as a string. "
        }
      },
      "required": [
        "owner",
        "repo",
        "workflow_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListWorkflowRunsForAWorkflowResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List workflow runs for a workflow"
  },
  {
    "name": "GITHUB_GET_WORKFLOW_USAGE",
    "enum": "GITHUB_GET_WORKFLOW_USAGE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get workflow usage",
    "description": "The text details billing for GitHub private repo workflows by OS, excluding\n    macOS/Windows adjustments, and recommends using `workflow_id` for file names.\n    It mentions needing read access and `repo` scope for tokens. For more, see\n    GitHub documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "workflow_id": {
          "type": "integer",
          "description": "The ID of the workflow. You can also pass the workflow file name as a string. "
        }
      },
      "required": [
        "owner",
        "repo",
        "workflow_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetWorkflowUsageResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get workflow usage"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_ACTIVITIES",
    "enum": "GITHUB_LIST_REPOSITORY_ACTIVITIES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository activities",
    "description": "This text details how to view a repository's history, including pushes,\n    merges, and branch changes linked to commits/users. For more, see GitHub's\n    guide on viewing repository activity.",
    "parameters": {
      "type": "object",
      "properties": {
        "activity_type": {
          "type": "string",
          "description": ""
        },
        "actor": {
          "type": "string",
          "description": "The GitHub username to use to filter by the actor who performed the activity. "
        },
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The Git reference for the activities you want to list. The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "time_period": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryActivitiesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository activities"
  },
  {
    "name": "GITHUB_LIST_ASSIGNEES",
    "enum": "GITHUB_LIST_ASSIGNEES",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List assignees",
    "description": "Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/)\n    for issues in a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAssigneesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List assignees"
  },
  {
    "name": "GITHUB_ISSUES_LIST_ASSIGN_EES",
    "enum": "GITHUB_ISSUES_LIST_ASSIGN_EES",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List assignees",
    "description": "Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/)\n    for issues in a repository.\u003c\u003cDEPRECATED use list_assignees\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAssigneesResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List assignees"
  },
  {
    "name": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
    "enum": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a user can be assigned",
    "description": "Checks if a user has permission to be assigned to an issue in this repository.\n    If the `assignee` can be assigned to issues in the repository, a `204` header\n    with no content is returned. Otherwise a `404` status code is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Assignee"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "assignee"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAUserCanBeAssignedResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a user can be assigned"
  },
  {
    "name": "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
    "enum": "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all autolinks of a repository",
    "description": "Gets all autolinks that are configured for a repository. Information about\n    autolinks are only available to repository administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllAutolinksOfARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all autolinks of a repository"
  },
  {
    "name": "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an autolink reference for a repository",
    "description": "Users with admin access to the repository can create an autolink.",
    "parameters": {
      "type": "object",
      "properties": {
        "is_alphanumeric": {
          "type": "boolean",
          "description": "Whether this autolink reference matches alphanumeric characters. If true, the `\u003cnum\u003e` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters. "
        },
        "key_prefix": {
          "type": "string",
          "description": "This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "url_template": {
          "type": "string",
          "description": "The URL must contain `\u003cnum\u003e` for the reference number. `\u003cnum\u003e` matches different characters depending on the value of `is_alphanumeric`. "
        }
      },
      "required": [
        "owner",
        "repo",
        "key_prefix",
        "url_template"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnAutolinkReferenceForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an autolink reference for a repository"
  },
  {
    "name": "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
    "enum": "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an autolink reference of a repository",
    "description": "This returns a single autolink reference by ID that was configured for the\n    given repository. Information about autolinks are only available to repository\n    administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "autolink_id": {
          "type": "integer",
          "description": "The unique identifier of the autolink."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "autolink_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnAutolinkReferenceOfARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an autolink reference of a repository"
  },
  {
    "name": "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
    "enum": "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an autolink reference from a repository",
    "description": "This deletes a single autolink reference by ID that was configured for the\n    given repository. Information about autolinks are only available to repository\n    administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "autolink_id": {
          "type": "integer",
          "description": "The unique identifier of the autolink."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "autolink_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnAutolinkReferenceFromARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an autolink reference from a repository"
  },
  {
    "name": "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY",
    "enum": "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if automated security fixes are enabled for a repository",
    "description": "This text outlines the ability to check if automated security fixes are\n    enabled, disabled, or paused for a repository, which requires the user to\n    have admin read access. For details, visit the provided GitHub documentation\n    link.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAutomatedSecurityFixesAreEnabledForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if automated security fixes are enabled for a repository"
  },
  {
    "name": "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES",
    "enum": "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enable automated security fixes",
    "description": "Enables automated security fixes for a repository. The authenticated user\n    must have admin access to the repository. For more information, see \"[Configuring\n    automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)\".",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnableAutomatedSecurityFixesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enable automated security fixes"
  },
  {
    "name": "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES",
    "enum": "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Disable automated security fixes",
    "description": "Disables automated security fixes for a repository. The authenticated user\n    must have admin access to the repository. For more information, see \"[Configuring\n    automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)\".",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DisableAutomatedSecurityFixesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Disable automated security fixes"
  },
  {
    "name": "GITHUB_LIST_BRANCHES",
    "enum": "GITHUB_LIST_BRANCHES",
    "tags": [
      "repos",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List branches",
    "description": "This API endpoint returns a repository's branch list, allows filtering by\n    protection status, supports pagination (30 results/page), and is detailed\n    in GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "protected": {
          "type": "boolean",
          "description": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListBranchesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List branches"
  },
  {
    "name": "GITHUB_REPO_S_LIST_BRANCHES",
    "enum": "GITHUB_REPO_S_LIST_BRANCHES",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List branches",
    "description": "This API endpoint returns a repository's branch list, allows filtering by\n    protection status, supports pagination (30 results/page), and is detailed\n    in GitHub's documentation.\u003c\u003cDEPRECATED use list_branches\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "protected": {
          "type": "boolean",
          "description": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListBranchesResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List branches"
  },
  {
    "name": "GITHUB_GET_A_BRANCH",
    "enum": "GITHUB_GET_A_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a branch",
    "description": "This API endpoint fetches details of a repository branch including commit\n    info and protection status, requiring repo owner and branch name. It supports\n    conditional requests, GitHub Apps, and offers detailed commit data and API\n    links.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetABranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a branch"
  },
  {
    "name": "GITHUB_GET_BRANCH_PROTECTION",
    "enum": "GITHUB_GET_BRANCH_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get branch protection",
    "description": "Protected branches are available in public repositories with GitHub Free,\n    across all repos for organizations, GitHub Pro, Team, Enterprise Cloud,\n    and Server. Details are in GitHub's product documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetBranchProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get branch protection"
  },
  {
    "name": "GITHUB_UPDATE_BRANCH_PROTECTION",
    "enum": "GITHUB_UPDATE_BRANCH_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update branch protection",
    "description": "Protected branches are enabled across various GitHub plans, requiring admin\n    permissions to set up. Note that updating `users` and `teams` arrays overwrites\n    existing ones, with a total limit of 100 items for users, apps, and teams\n    combined.",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_deletions": {
          "type": "boolean",
          "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation. "
        },
        "allow_force_pushes": {
          "type": "boolean",
          "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\" "
        },
        "allow_fork_syncing": {
          "type": "boolean",
          "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`. "
        },
        "block_creations": {
          "type": "boolean",
          "description": "If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. "
        },
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "enforce_admins": {
          "type": "boolean",
          "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. "
        },
        "lock_branch": {
          "type": "boolean",
          "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "required__pull__request__reviews__bypass__pull__request__allowances__apps": {
          "type": "array",
          "description": "The list of app `slug`s allowed to bypass pull request requirements."
        },
        "required__pull__request__reviews__bypass__pull__request__allowances__teams": {
          "type": "array",
          "description": "The list of team `slug`s allowed to bypass pull request requirements."
        },
        "required__pull__request__reviews__bypass__pull__request__allowances__users": {
          "type": "array",
          "description": "The list of user `login`s allowed to bypass pull request requirements."
        },
        "required__pull__request__reviews__dismiss__stale__reviews": {
          "type": "boolean",
          "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. "
        },
        "required__pull__request__reviews__dismissal__restrictions__apps": {
          "type": "array",
          "description": "The list of app `slug`s with dismissal access"
        },
        "required__pull__request__reviews__dismissal__restrictions__teams": {
          "type": "array",
          "description": "The list of team `slug`s with dismissal access"
        },
        "required__pull__request__reviews__dismissal__restrictions__users": {
          "type": "array",
          "description": "The list of user `login`s with dismissal access"
        },
        "required__pull__request__reviews__require__code__owner__reviews": {
          "type": "boolean",
          "description": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. "
        },
        "required__pull__request__reviews__require__last__push__approval": {
          "type": "boolean",
          "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`. "
        },
        "required__pull__request__reviews__required__approving__review__count": {
          "type": "integer",
          "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. "
        },
        "required__status__checks__checks": {
          "type": "array",
          "description": "The list of status checks to require in order to merge into this branch."
        },
        "required__status__checks__contexts": {
          "type": "array",
          "description": "**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.  "
        },
        "required__status__checks__strict": {
          "type": "boolean",
          "description": "Require branches to be up to date before merging."
        },
        "required_conversation_resolution": {
          "type": "boolean",
          "description": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. "
        },
        "required_linear_history": {
          "type": "boolean",
          "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation. "
        },
        "restrictions__apps": {
          "type": "array",
          "description": "The list of app `slug`s with push access"
        },
        "restrictions__teams": {
          "type": "array",
          "description": "The list of team `slug`s with push access"
        },
        "restrictions__users": {
          "type": "array",
          "description": "The list of user `login`s with push access"
        }
      },
      "required": [
        "owner",
        "repo",
        "branch",
        "enforce_admins"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateBranchProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update branch protection"
  },
  {
    "name": "GITHUB_DELETE_BRANCH_PROTECTION",
    "enum": "GITHUB_DELETE_BRANCH_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete branch protection",
    "description": "Protected branches are available in public repos with GitHub Free/Org, and\n    in both public/private repos with GitHub Pro, Team, Enterprise Cloud, and\n    Server. For details, see GitHub's products documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteBranchProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete branch protection"
  },
  {
    "name": "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
    "enum": "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get admin branch protection",
    "description": "GitHub Free allows protected branches in public repos and for organizations;\n    GitHub Pro, Team, Enterprise Cloud, and Server expands this to private repos\n    as well. Further details in GitHub Help documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAdminBranchProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get admin branch protection"
  },
  {
    "name": "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
    "enum": "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set admin branch protection",
    "description": "Protected branches in GitHub, available across Free, Pro, Team, and Enterprise\n    plans for both public and private repositories, require admin or owner permissions\n    for enforcement due to enabled branch protection.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetAdminBranchProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set admin branch protection"
  },
  {
    "name": "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
    "enum": "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete admin branch protection",
    "description": "Protected branches are accessible in both free and paid GitHub public/private\n    repositories. Removing admin enforcement needs admin/owner rights and branch\n    protection activation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAdminBranchProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete admin branch protection"
  },
  {
    "name": "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
    "enum": "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get pull request review protection",
    "description": "Protected branches can be used in public repos for GitHub Free users and\n    organizations, and in both public and private repos with GitHub Pro, Team,\n    Enterprise Cloud, and Server. More info is in GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetPullRequestReviewProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get pull request review protection"
  },
  {
    "name": "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
    "enum": "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update pull request review protection",
    "description": "Protected branches are supported in various GitHub plan repositories. Updating\n    pull review enforcement needs admin/owner permissions and branch protection.\n    Adding new `users` and `teams` arrays overwrites old values.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "bypass__pull__request__allowances__apps": {
          "type": "array",
          "description": "The list of app `slug`s allowed to bypass pull request requirements."
        },
        "bypass__pull__request__allowances__teams": {
          "type": "array",
          "description": "The list of team `slug`s allowed to bypass pull request requirements."
        },
        "bypass__pull__request__allowances__users": {
          "type": "array",
          "description": "The list of user `login`s allowed to bypass pull request requirements."
        },
        "dismiss_stale_reviews": {
          "type": "boolean",
          "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. "
        },
        "dismissal__restrictions__apps": {
          "type": "array",
          "description": "The list of app `slug`s with dismissal access"
        },
        "dismissal__restrictions__teams": {
          "type": "array",
          "description": "The list of team `slug`s with dismissal access"
        },
        "dismissal__restrictions__users": {
          "type": "array",
          "description": "The list of user `login`s with dismissal access"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "require_code_owner_reviews": {
          "type": "boolean",
          "description": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. "
        },
        "require_last_push_approval": {
          "type": "boolean",
          "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false` "
        },
        "required_approving_review_count": {
          "type": "integer",
          "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdatePullRequestReviewProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update pull request review protection"
  },
  {
    "name": "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
    "enum": "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete pull request review protection",
    "description": "Protected branches can be used in public repositories with GitHub Free and\n    in both public/private repositories with higher plans like GitHub Pro, Team,\n    and Enterprise. More details are on GitHub's products page.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeletePullRequestReviewProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete pull request review protection"
  },
  {
    "name": "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
    "enum": "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get commit signature protection",
    "description": "Protected branches are supported across various GitHub plans. Admins or\n    owners can check if a branch requires signed commits via a specific endpoint.\n    Branch protection must be enabled to require signed commits. For more, visit\n    GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetCommitSignatureProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get commit signature protection"
  },
  {
    "name": "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
    "enum": "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create commit signature protection",
    "description": "Protected branches can be used in various GitHub plans, including Free,\n    Pro, and Enterprise, for both public and private repositories. They allow\n    admins or owners to require signed commits on a branch, provided branch\n    protection is enabled.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateCommitSignatureProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create commit signature protection"
  },
  {
    "name": "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
    "enum": "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete commit signature protection",
    "description": "Protected branches are available with various GitHub plans. Admins or owners\n    can disable required signed commits on protected branches. See GitHub's\n    products for more info.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteCommitSignatureProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete commit signature protection"
  },
  {
    "name": "GITHUB_GET_STATUS_CHECKS_PROTECTION",
    "enum": "GITHUB_GET_STATUS_CHECKS_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get status checks protection",
    "description": "Protected branches are available in public repos with GitHub Free, GitHub\n    Free for organizations, and in both public and private repos with GitHub\n    Pro, Team, Enterprise Cloud, and Server. More info is in GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetStatusChecksProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get status checks protection"
  },
  {
    "name": "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
    "enum": "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update status check protection",
    "description": "Protected branches are accessible in public repos with GitHub Free and in\n    both public and private repos with GitHub Pro, Team, and Enterprise versions.\n    Admin permissions are needed to update status checks, with branch protection\n    enabled.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "checks": {
          "type": "array",
          "description": "The list of status checks to require in order to merge into this branch."
        },
        "contexts": {
          "type": "array",
          "description": "**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.  "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "strict": {
          "type": "boolean",
          "description": "Require branches to be up to date before merging."
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateStatusCheckProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update status check protection"
  },
  {
    "name": "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
    "enum": "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove status check protection",
    "description": "Protected branches are accessible in public repos with GitHub Free and for\n    organizations, as well as in both public and private repos with GitHub Pro,\n    Team, Enterprise Cloud, and Server. Further details are on GitHub’s documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveStatusCheckProtectionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove status check protection"
  },
  {
    "name": "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
    "enum": "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all status check contexts",
    "description": "Protected branches are accessible in both free and paid GitHub plans, including\n    public repositories with GitHub Free, and both public and private repositories\n    with higher-tier plans. More details are in GitHub's help documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllStatusCheckContextsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all status check contexts"
  },
  {
    "name": "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
    "enum": "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add status check contexts",
    "description": "Protected branches are accessible in public repositories with GitHub Free,\n    and in both public and private repositories with GitHub Pro, Team, Enterprise\n    Cloud, and Server. More info is in GitHub’s documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddStatusCheckContextsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add status check contexts"
  },
  {
    "name": "GITHUB_SET_STATUS_CHECK_CONTEXTS",
    "enum": "GITHUB_SET_STATUS_CHECK_CONTEXTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set status check contexts",
    "description": "Protected branches are accessible in GitHub Free public repos and for organizations,\n    as well as in both public/private repos with GitHub Pro, Team, Enterprise\n    Cloud, and Server. For details, refer to GitHub's products guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetStatusCheckContextsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set status check contexts"
  },
  {
    "name": "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
    "enum": "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove status check contexts",
    "description": "Protected branches are accessible in public repos with GitHub Free, in both\n    public and private repos with GitHub Pro, Team, Enterprise Cloud, and Enterprise\n    Server. More details are on GitHub's product documentation page.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveStatusCheckContextsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove status check contexts"
  },
  {
    "name": "GITHUB_GET_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_GET_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get access restrictions",
    "description": "Protected branches are available in all GitHub plans, including free and\n    paid options, and restrict access in organization-owned repositories. More\n    information can be found on GitHub's documentation page.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get access restrictions"
  },
  {
    "name": "GITHUB_DELETE_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_DELETE_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete access restrictions",
    "description": "Protected branches are available across various GitHub plans, including\n    Free, Pro, Team, and Enterprise versions, in both public and private repositories.\n    They block unauthorized users from pushing to the branch.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete access restrictions"
  },
  {
    "name": "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "enum": "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get apps with access to the protected branch",
    "description": "Protected branches are supported in both free and paid GitHub plans, with\n    varying access across public and private repositories. They ensure only\n    authorized GitHub Apps with write access can push to these branches.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAppsWithAccessToTheProtectedBranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get apps with access to the protected branch"
  },
  {
    "name": "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add app access restrictions",
    "description": "Protected branches are supported in both free and paid GitHub plans, allowing\n    push access only to specific GitHub Apps with write access. For details,\n    visit GitHub's products documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddAppAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add app access restrictions"
  },
  {
    "name": "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set app access restrictions",
    "description": "Protected branches are supported across various GitHub plans, including\n    Free and Pro versions, and control app push access, limiting it to authorized\n    GitHub Apps with write access.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetAppAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set app access restrictions"
  },
  {
    "name": "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove app access restrictions",
    "description": "Protected branches can be used in various GitHub plans, restricting app\n    push access to those installed on the repository with write access. More\n    info at GitHub's products documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAppAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove app access restrictions"
  },
  {
    "name": "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "enum": "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get teams with access to the protected branch",
    "description": "Protected branches are accessible in public repos with GitHub Free and in\n    both public/private repos with GitHub Pro, Team, Enterprise Cloud, and Server.\n    It also lists teams with push access to the branch.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTeamsWithAccessToTheProtectedBranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get teams with access to the protected branch"
  },
  {
    "name": "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add team access restrictions",
    "description": "Protected branches are accessible in both free and paid GitHub plans, including\n    public and private repositories. They allow granting push access to specific\n    teams, including child teams. For more details, refer to GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddTeamAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add team access restrictions"
  },
  {
    "name": "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set team access restrictions",
    "description": "Protected branches are accessible in various GitHub plans, allowing users\n    to manage push access. Reassigning push access replaces all previous team\n    permissions with a new list, including child teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetTeamAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set team access restrictions"
  },
  {
    "name": "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove team access restrictions",
    "description": "Protected branches are available in various GitHub plans, including Free\n    and paid versions. They restrict team push access to specific branches,\n    with options for managing access levels, including for child teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveTeamAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove team access restrictions"
  },
  {
    "name": "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "enum": "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get users with access to the protected branch",
    "description": "Protected branches are available in public and private repositories across\n    various GitHub plans, including Free, Pro, Team, and Enterprise versions.\n    They restrict who can push to the branch. For details, see GitHub's products\n    documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetUsersWithAccessToTheProtectedBranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get users with access to the protected branch"
  },
  {
    "name": "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add user access restrictions",
    "description": "Protected branches are accessible in both public and private repositories\n    across various GitHub plans, including GitHub Free and paid accounts. They\n    allow specific users to have push access, with a total limit of 100 items\n    for users, apps, and teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddUserAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add user access restrictions"
  },
  {
    "name": "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set user access restrictions",
    "description": "Protected branches are accessible in both free and paid GitHub plans, including\n    private repositories for paid plans. They allow specifying a limited list\n    of users (up to 100) who can push, replacing any previous push permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetUserAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set user access restrictions"
  },
  {
    "name": "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
    "enum": "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove user access restrictions",
    "description": "Protected branches in GitHub restrict push access in public and private\n    repositories, allowing only certain users with a total limit of 100 items,\n    including users, apps, and teams. See GitHub's documentation for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveUserAccessRestrictionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove user access restrictions"
  },
  {
    "name": "GITHUB_RENAME_A_BRANCH",
    "enum": "GITHUB_RENAME_A_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Rename a branch",
    "description": "Renames a branch in a repository; process may not be instant and pushing\n    to the old name is disabled during this. User needs push access, and additional\n    admin or owner permissions for default branches, including `administration:write`\n    for tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "new_name": {
          "type": "string",
          "description": "The new name of the branch."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch",
        "new_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RenameABranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Rename a branch"
  },
  {
    "name": "GITHUB_CREATE_A_CHECK_RUN",
    "enum": "GITHUB_CREATE_A_CHECK_RUN",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a check run",
    "description": "Creates a new check run for a repository commit using a GitHub App. GitHub\n    limits identical check run names to 1000 in a suite, deleting older ones\n    beyond this. Checks API doesn't detect forked repository pushes.",
    "parameters": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "description": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).\" "
        },
        "completed_at": {
          "type": "string",
          "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "conclusion": {
          "type": "string",
          "description": ""
        },
        "details_url": {
          "type": "string",
          "description": "The URL of the integrator\"s site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. "
        },
        "external_id": {
          "type": "string",
          "description": "A reference for the run on the integrator\"s system."
        },
        "head_sha": {
          "type": "string",
          "description": "The SHA of the commit."
        },
        "name": {
          "type": "string",
          "description": "The name of the check. For example, \"code-coverage\"."
        },
        "output__annotations": {
          "type": "array",
          "description": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about how you can view annotations on GitHub, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\". "
        },
        "output__images": {
          "type": "array",
          "description": "Adds images to the output displayed in the GitHub pull request UI."
        },
        "output__summary": {
          "type": "string",
          "description": "The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters. "
        },
        "output__text": {
          "type": "string",
          "description": "The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters. "
        },
        "output__title": {
          "type": "string",
          "description": "The title of the check run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "started_at": {
          "type": "string",
          "description": "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "status": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "name",
        "head_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACheckRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a check run"
  },
  {
    "name": "GITHUB_GET_A_CHECK_RUN",
    "enum": "GITHUB_GET_A_CHECK_RUN",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a check run",
    "description": "The Checks API fetches a check run using its `id` from the created repository,\n    not working with forked branches (shows empty `pull_requests`). Access to\n    private repositories needs `repo` scope on OAuth/personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "check_run_id": {
          "type": "integer",
          "description": "The unique identifier of the check run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "check_run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACheckRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a check run"
  },
  {
    "name": "GITHUB_UPDATE_A_CHECK_RUN",
    "enum": "GITHUB_UPDATE_A_CHECK_RUN",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a check run",
    "description": "Updates a check run for a commit in a repo. Only detects pushes in the original\n    repository, not in forks, returning an empty `pull_requests` array. OAuth\n    apps and classic personal access tokens cannot use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/rest/guides/using-the-rest-api-to-interact-with-checks#check-runs-and-requested-actions).\" "
        },
        "check_run_id": {
          "type": "integer",
          "description": "The unique identifier of the check run."
        },
        "completed_at": {
          "type": "string",
          "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "conclusion": {
          "type": "string",
          "description": ""
        },
        "details_url": {
          "type": "string",
          "description": "The URL of the integrator\"s site that has the full details of the check."
        },
        "external_id": {
          "type": "string",
          "description": "A reference for the run on the integrator\"s system."
        },
        "name": {
          "type": "string",
          "description": "The name of the check. For example, \"code-coverage\"."
        },
        "output__annotations": {
          "type": "array",
          "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub\"s pull request UI. Annotations are visible in GitHub\"s pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/checks/runs#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. GitHub Actions are limited to 10 warning annotations and 10 error annotations per step. For details about annotations in the UI, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\". "
        },
        "output__images": {
          "type": "array",
          "description": "Adds images to the output displayed in the GitHub pull request UI."
        },
        "output__summary": {
          "type": "string",
          "description": "Can contain Markdown."
        },
        "output__text": {
          "type": "string",
          "description": "Can contain Markdown."
        },
        "output__title": {
          "type": "string",
          "description": "**Required**."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "started_at": {
          "type": "string",
          "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "status": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "check_run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateACheckRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a check run"
  },
  {
    "name": "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
    "enum": "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List check run annotations",
    "description": "Lists annotations for a check run using the annotation `id`. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint\n    on a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "check_run_id": {
          "type": "integer",
          "description": "The unique identifier of the check run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "check_run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCheckRunAnnotationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List check run annotations"
  },
  {
    "name": "GITHUB_REREQUEST_A_CHECK_RUN",
    "enum": "GITHUB_REREQUEST_A_CHECK_RUN",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Rerequest a check run",
    "description": "This endpoint rerequests an existing GitHub check run without new code,\n    triggering a `check_run` webhook with `rerequested` action, resetting its\n    status to `queued` and clearing its conclusion. Not usable with OAuth apps\n    or personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "check_run_id": {
          "type": "integer",
          "description": "The unique identifier of the check run."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "check_run_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RerequestACheckRunResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Rerequest a check run"
  },
  {
    "name": "GITHUB_CREATE_A_CHECK_SUITE",
    "enum": "GITHUB_CREATE_A_CHECK_SUITE",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a check suite",
    "description": "The text describes how to manually create a check suite when auto-creation\n    is disabled. It mentions that the Checks API functions solely within the\n    original repository, not forks, and is inaccessible to OAuth apps and personal\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "head_sha": {
          "type": "string",
          "description": "The sha of the head commit."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "head_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACheckSuiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a check suite"
  },
  {
    "name": "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
    "enum": "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update repository preferences for check suites",
    "description": "The default process automatically creates a check suite for each push to\n    a repository. Disabling this allows for manual creation, requiring admin\n    permissions to adjust preferences.",
    "parameters": {
      "type": "object",
      "properties": {
        "auto_trigger_checks": {
          "type": "array",
          "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateRepositoryPreferencesForCheckSuitesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update repository preferences for check suites"
  },
  {
    "name": "GITHUB_GET_A_CHECK_SUITE",
    "enum": "GITHUB_GET_A_CHECK_SUITE",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a check suite",
    "description": "The Checks API, used to retrieve a check suite by `id`, detects pushes in\n    origin repositories only, not forks, resulting in empty `pull_requests`\n    and a `null` `head_branch` for forks. OAuth and personal tokens need `repo`\n    scope for private repos.",
    "parameters": {
      "type": "object",
      "properties": {
        "check_suite_id": {
          "type": "integer",
          "description": "The unique identifier of the check suite."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "check_suite_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACheckSuiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a check suite"
  },
  {
    "name": "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
    "enum": "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List check runs in a check suite",
    "description": "The endpoint lists check runs for a check suite by its `id`, only detecting\n    pushes in the original repository, not forks. To access it in private repositories,\n    OAuth app tokens and personal access tokens require the `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "check_name": {
          "type": "string",
          "description": "Returns check runs with the specified `name`."
        },
        "check_suite_id": {
          "type": "integer",
          "description": "The unique identifier of the check suite."
        },
        "filter": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "status": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "check_suite_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCheckRunsInACheckSuiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List check runs in a check suite"
  },
  {
    "name": "GITHUB_REREQUEST_A_CHECK_SUITE",
    "enum": "GITHUB_REREQUEST_A_CHECK_SUITE",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Rerequest a check suite",
    "description": "This endpoint reinitiates a check suite without new code pushes, triggering\n    a `check_suite` webhook with `rerequested` action, resetting its status\n    and clearing its conclusion. Not accessible by OAuth apps and personal access\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "check_suite_id": {
          "type": "integer",
          "description": "The unique identifier of the check suite."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "check_suite_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RerequestACheckSuiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Rerequest a check suite"
  },
  {
    "name": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List code scanning alerts for a repository",
    "description": "The document outlines how to obtain code scanning alerts, highlighting the\n    inclusion of the most recent instance for a specified branch/reference.\n    Access requires `security_events` scope for private/public repos or `public_repo`\n    scope for public ones.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/\u003cbranch name\u003e` or simply `\u003cbranch name\u003e`. To reference a pull request use `refs/pull/\u003cnumber\u003e/merge`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "tool_guid": {
          "type": "string",
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. "
        },
        "tool_name": {
          "type": "string",
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodeScanningAlertsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List code scanning alerts for a repository"
  },
  {
    "name": "GITHUB_GET_A_CODE_SCANNING_ALERT",
    "enum": "GITHUB_GET_A_CODE_SCANNING_ALERT",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a code scanning alert",
    "description": "To use the endpoint for code scanning alerts, OAuth and classic tokens require\n    `security_events` scope for both private/public repos, and `public_repo`\n    scope for public ones only.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACodeScanningAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a code scanning alert"
  },
  {
    "name": "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
    "enum": "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a code scanning alert",
    "description": "This API endpoint updates a single code scanning alert status, requiring\n    `security_events` scope for OAuth or classic tokens on private/public repos,\n    or `public_repo` scope for public repos only.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. "
        },
        "dismissed_comment": {
          "type": "string",
          "description": "The dismissal comment associated with the dismissal of the alert."
        },
        "dismissed_reason": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number",
        "state"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateACodeScanningAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a code scanning alert"
  },
  {
    "name": "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
    "enum": "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List instances of a code scanning alert",
    "description": "This endpoint lists all code scanning alerts, requiring `security_events`\n    scope for OAuth app and classic tokens in private/public repos and `public_repo`\n    scope for public repos only.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/\u003cbranch name\u003e` or simply `\u003cbranch name\u003e`. To reference a pull request use `refs/pull/\u003cnumber\u003e/merge`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListInstancesOfACodeScanningAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List instances of a code scanning alert"
  },
  {
    "name": "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List code scanning analyses for a repository",
    "description": "API endpoint summary: Lists up to 30 code scanning analyses per repository\n    page, detailing rules run. Older analyses may lack data. The `tool_name`\n    field is deprecated for `tool`. Access requires specific OAuth scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/\u003cbranch name\u003e` or simply `\u003cbranch name\u003e`. To reference a pull request use `refs/pull/\u003cnumber\u003e/merge`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sarif_id": {
          "type": "string",
          "description": "Filter analyses belonging to the same SARIF upload."
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "tool_guid": {
          "type": "string",
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. "
        },
        "tool_name": {
          "type": "string",
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodeScanningAnalysesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List code scanning analyses for a repository"
  },
  {
    "name": "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a code scanning analysis for a repository",
    "description": "This API endpoint scans code, providing details like Git ref, commit details,\n    tool name, and alert counts, some older scans may not include rule counts.\n    It supports SARIF v2.1.0 data format and requires specific scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "analysis_id": {
          "type": "integer",
          "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "analysis_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACodeScanningAnalysisForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a code scanning analysis for a repository"
  },
  {
    "name": "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
    "enum": "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a code scanning analysis from a repository",
    "description": "Delete the latest GitHub code scanning analyses marked as deletable to avoid\n    a 400 error. This requires OAuth or access tokens with proper scopes and\n    allows further deletion URLs with options for entire tool analyses preservation\n    or removal.",
    "parameters": {
      "type": "object",
      "properties": {
        "analysis_id": {
          "type": "integer",
          "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. "
        },
        "confirm_delete": {
          "type": "string",
          "description": "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you\"ll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "analysis_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteACodeScanningAnalysisFromARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a code scanning analysis from a repository"
  },
  {
    "name": "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List codeql databases for a repository",
    "description": "This endpoint lists CodeQL databases in a repository. For access, OAuth\n    and classic tokens require `security_events` scope for private/public repos,\n    or `public_repo` scope for public repos only.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodeQlDatabasesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List codeql databases for a repository"
  },
  {
    "name": "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a codeql database for a repository",
    "description": "This endpoint fetches a CodeQL database for a repo, providing JSON metadata\n    by default. For binary download, use `Accept: application/zip` and handle\n    redirects. Requires `security_events` scope for private/public repos, `public_repo`\n    for public only.",
    "parameters": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string",
          "description": "The language of the CodeQL database."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "language"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACodeQlDatabaseForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a codeql database for a repository"
  },
  {
    "name": "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
    "enum": "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a code scanning default setup configuration",
    "description": "The default setup for code scanning requires `repo` scope for both OAuth\n    app and classic personal access tokens for accessing private/public repositories,\n    and `public_repo` scope for public repositories only.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACodeScanningDefaultSetupConfigurationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a code scanning default setup configuration"
  },
  {
    "name": "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
    "enum": "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a code scanning default setup configuration",
    "description": "The updated code scanning configuration requires `repo` scope for OAuth\n    and classic personal access tokens for both private and public repositories,\n    and `public_repo` scope for public repositories only.",
    "parameters": {
      "type": "object",
      "properties": {
        "languages": {
          "type": "array",
          "description": "CodeQL languages to be analyzed."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "query_suite": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateACodeScanningDefaultSetupConfigurationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a code scanning default setup configuration"
  },
  {
    "name": "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
    "enum": "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Upload an analysis as sarif data",
    "description": "SARIF data can be uploaded to GitHub for PRs/branches, viewed in PR checks/Security\n    tab. Data must be gzip/Base64 encoded, with entry and size limits. Requires\n    `security_events` or `public_repo` OAuth scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "checkout_uri": {
          "type": "string",
          "description": "The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository. "
        },
        "commit_sha": {
          "type": "string",
          "description": "The SHA of the commit to which the analysis you are uploading relates."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The full Git reference, formatted as `refs/heads/\u003cbranch name\u003e`, `refs/tags/\u003ctag\u003e`, `refs/pull/\u003cnumber\u003e/merge`, or `refs/pull/\u003cnumber\u003e/head`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sarif": {
          "type": "string",
          "description": "A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\" "
        },
        "started_at": {
          "type": "string",
          "description": "The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "tool_name": {
          "type": "string",
          "description": "The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. "
        },
        "validate": {
          "type": "boolean",
          "description": "Whether the SARIF file will be validated according to the code scanning specifications. This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning. "
        }
      },
      "required": [
        "owner",
        "repo",
        "commit_sha",
        "ref",
        "sarif"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UploadAnAnalysisAsSarifDataResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Upload an analysis as sarif data"
  },
  {
    "name": "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
    "enum": "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
    "tags": [
      "code-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get information about a sarif upload",
    "description": "The text outlines how to obtain SAROC upload details, like status and analysis\n    URL, via a specific endpoint, emphasizing the need for OAuth and access\n    token scopes for both private and public repository access.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sarif_id": {
          "type": "string",
          "description": "The SARIF ID obtained after uploading."
        }
      },
      "required": [
        "owner",
        "repo",
        "sarif_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetInformationAboutASarifUploadResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get information about a sarif upload"
  },
  {
    "name": "GITHUB_LIST_CODEOWNERS_ERRORS",
    "enum": "GITHUB_LIST_CODEOWNERS_ERRORS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List codeowners errors",
    "description": "The text instructs to identify and list syntax errors in the CODEOWNERS\n    file, referencing GitHub's documentation for correct syntax guidelines.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository\"s default branch (e.g. `main`) "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodeownersErrorsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List codeowners errors"
  },
  {
    "name": "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List codespaces in a repository for the authenticated user",
    "description": "Lists the codespaces associated to a specified repository and the authenticated\n    user. OAuth app tokens and personal access tokens (classic) need the `codespace`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodespacesInARepositoryForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List codespaces in a repository for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
    "enum": "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a codespace in a repository",
    "description": "Creates a codespace owned by the authenticated user in the specified repository.\n    OAuth app tokens and personal access tokens (classic) need the `codespace`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "client_ip": {
          "type": "string",
          "description": "IP for location auto-detection when proxying a request"
        },
        "devcontainer_path": {
          "type": "string",
          "description": "Path to devcontainer.json config to use for this codespace"
        },
        "display_name": {
          "type": "string",
          "description": "Display name for this codespace"
        },
        "geo": {
          "type": "string",
          "description": ""
        },
        "idle_timeout_minutes": {
          "type": "integer",
          "description": "Time in minutes before codespace stops from inactivity"
        },
        "location": {
          "type": "string",
          "description": "The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. "
        },
        "machine": {
          "type": "string",
          "description": "Machine type to use for this codespace"
        },
        "multi_repo_permissions_opt_out": {
          "type": "boolean",
          "description": "Whether to authorize requested permissions from devcontainer.json"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "Git ref (typically a branch name) for this codespace"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "retention_period_minutes": {
          "type": "integer",
          "description": "Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). "
        },
        "working_directory": {
          "type": "string",
          "description": "Working directory for this codespace"
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACodespaceInARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a codespace in a repository"
  },
  {
    "name": "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
    "enum": "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listrepodevcontainerconfigsforuser",
    "description": "This text describes an API endpoint that retrieves devcontainer.json files\n    from a specified repository, detailing launch configurations for codespaces.\n    OAuth app and personal tokens require `codespace` scope to access.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepoDevContainerConfigsForUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listrepodevcontainerconfigsforuser"
  },
  {
    "name": "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List available machine types for a repository",
    "description": "List the machine types available for a given repository based on its configuration.\n    OAuth app tokens and personal access tokens (classic) need the `codespace`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "client_ip": {
          "type": "string",
          "description": "IP for location auto-detection when proxying a request"
        },
        "location": {
          "type": "string",
          "description": "The location to check for available machines. Assigned by IP if not provided. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The branch or commit to check for prebuild availability and devcontainer restrictions. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAvailableMachineTypesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List available machine types for a repository"
  },
  {
    "name": "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
    "enum": "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get default attributes for a codespace",
    "description": "Gets the default attributes for codespaces created by the user with the\n    repository. OAuth app tokens and personal access tokens (classic) need the\n    `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "client_ip": {
          "type": "string",
          "description": "An alternative IP for default location auto-detection, such as when proxying a request. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetDefaultAttributesForACodespaceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get default attributes for a codespace"
  },
  {
    "name": "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED",
    "enum": "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Verifydevcontainerpermissionsaccepted",
    "description": "Checks whether the permissions defined by a given devcontainer configuration\n    have been accepted by the authenticated user. OAuth app tokens and personal\n    access tokens (classic) need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "devcontainer_path": {
          "type": "string",
          "description": "Path to the devcontainer.json configuration to use for the permission check. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref",
        "devcontainer_path"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "VerifyDevContainerPermissionsAcceptedResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Verifydevcontainerpermissionsaccepted"
  },
  {
    "name": "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
    "enum": "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listreposecretswithoutvalues",
    "description": "Lists all development environment secrets available in a repository without\n    revealing their encrypted values. OAuth app tokens and personal access tokens\n    (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepoSecretsWithoutValuesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listreposecretswithoutvalues"
  },
  {
    "name": "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
    "enum": "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get public key for secret encryption",
    "description": "This endpoint allows users with read access to a repository to get a public\n    key for encrypting secrets. For private repositories, OAuth and classic\n    personal access tokens require the `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetPublicKeyForSecretEncryptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get public key for secret encryption"
  },
  {
    "name": "GITHUB_GET_REPO_DEV_ENV_SECRET",
    "enum": "GITHUB_GET_REPO_DEV_ENV_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Getrepodevenvsecret",
    "description": "Gets a single repository development environment secret without revealing\n    its encrypted value. OAuth app tokens and personal access tokens (classic)\n    need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRepoDevEnvSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Getrepodevenvsecret"
  },
  {
    "name": "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
    "enum": "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Encryptandupdatedevsecret",
    "description": "Creates/updates a repo dev environment secret using an encrypted value via\n    LibSodium. Requires `repo` scope for OAuth/personal tokens. See GitHub docs\n    for encryption details.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EncryptAndUpdateDevSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Encryptandupdatedevsecret"
  },
  {
    "name": "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
    "enum": "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Deleterepocodespacesecretbyname",
    "description": "Deletes a development environment secret in a repository using the secret\n    name. OAuth app tokens and personal access tokens (classic) need the `repo`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteRepoCodespaceSecretByNameResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Deleterepocodespacesecretbyname"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_COLLABORATORS",
    "enum": "GITHUB_LIST_REPOSITORY_COLLABORATORS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository collaborators",
    "description": "The endpoint lists all collaborators in organization-owned repositories,\n    including various organization members, and requires users with push access,\n    and tokens with `read:org` and `repo` scopes to access. Team member lists\n    extend to child teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "affiliation": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryCollaboratorsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository collaborators"
  },
  {
    "name": "GITHUB_REPO_S_LIST_COLLABORATORS",
    "enum": "GITHUB_REPO_S_LIST_COLLABORATORS",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository collaborators",
    "description": "The endpoint lists all collaborators in organization-owned repositories,\n    including various organization members, and requires users with push access,\n    and tokens with `read:org` and `repo` scopes to access. Team member lists\n    extend to child teams.\u003c\u003cDEPRECATED use list_repository_collaborators\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "affiliation": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryCollaboratorsResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List repository collaborators"
  },
  {
    "name": "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
    "enum": "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a user is a repository collaborator",
    "description": "Organization repository collaborators encompass direct members, outside\n    collaborators, team and child team members, and owners, all needing push\n    access and the correct OAuth/personal tokens for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "owner",
        "repo",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAUserIsARepositoryCollaboratorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a user is a repository collaborator"
  },
  {
    "name": "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
    "enum": "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add a repository collaborator",
    "description": "This endpoint handles notifications and collaborator permissions with possible\n    secondary rate limiting. It restricts adding outside collaborators and changing\n    permissions, imposing guidelines and limits on invitation rates.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "permission": {
          "type": "string",
          "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "owner",
        "repo",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddARepositoryCollaboratorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add a repository collaborator"
  },
  {
    "name": "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
    "enum": "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a repository collaborator",
    "description": "Removing a collaborator from a repo revokes their access, cancels invitations,\n    unassigns issues, affects their fork permissions, and updates org project\n    access. Changes may take time and access might persist through org permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "owner",
        "repo",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveARepositoryCollaboratorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a repository collaborator"
  },
  {
    "name": "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
    "enum": "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get repository permissions for a user",
    "description": "The text details checking a collaborator's repository permission, outlining\n    roles like admin, write, read, none, and correlating maintain with write,\n    triage with read. It suggests using 'role_name' for roles and 'permissions'\n    hash for access levels.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "owner",
        "repo",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRepositoryPermissionsForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get repository permissions for a user"
  },
  {
    "name": "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List commit comments for a repository",
    "description": "This endpoint lists commit comments for a repository in ascending ID order,\n    supporting media types for different comment formats, including raw markdown,\n    text, HTML, and a combination of all.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommitCommentsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List commit comments for a repository"
  },
  {
    "name": "GITHUB_GET_A_COMMIT_COMMENT",
    "enum": "GITHUB_GET_A_COMMIT_COMMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a commit comment",
    "description": "This endpoint retrieves a specific commit comment, offering custom media\n    types for different representations: raw markdown (default), text-only,\n    HTML, or a full version that includes all formats. See GitHub's media types\n    documentation for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACommitCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a commit comment"
  },
  {
    "name": "GITHUB_UPDATE_A_COMMIT_COMMENT",
    "enum": "GITHUB_UPDATE_A_COMMIT_COMMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a commit comment",
    "description": "This endpoint updates commit comments and supports different media types\n    for responses, including raw markdown, text, HTML, or all. For details,\n    visit the GitHub docs on media types.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The contents of the comment"
        },
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateACommitCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a commit comment"
  },
  {
    "name": "GITHUB_DELETE_A_COMMIT_COMMENT",
    "enum": "GITHUB_DELETE_A_COMMIT_COMMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a commit comment",
    "description": "Deletes a specific commit comment in a GitHub repo using `owner`, `repo`,\n    and `comment_id`. Successful deletion returns 204, failure returns 404.\n    More info at GitHub's API documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteACommitCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a commit comment"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a commit comment",
    "description": "List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForACommitCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a commit comment"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a commit comment",
    "description": "Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).\n    A response with an HTTP `200` status means that you already added the reaction\n    type to this commit comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForACommitCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a commit comment"
  },
  {
    "name": "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
    "enum": "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a commit comment reaction",
    "description": "Delete a reaction to a commit comment by using the DELETE method on `/repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`,\n    specifying the `repository_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteACommitCommentReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a commit comment reaction"
  },
  {
    "name": "GITHUB_LIST_COMMITS",
    "enum": "GITHUB_LIST_COMMITS",
    "tags": [
      "repos",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List commits",
    "description": "The `verification` object in a commit includes the `verified` status, `reason`,\n    `signature`, and `payload`. Failure can result from key issues, service\n    errors, unsigned commits, unrecognized signatures, email issues, or invalid\n    signatures.",
    "parameters": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "description": "GitHub username or email address to use to filter by commit author."
        },
        "committer": {
          "type": "string",
          "description": "GitHub username or email address to use to filter by commit committer."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "path": {
          "type": "string",
          "description": "Only commits containing this file path will be returned."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "until": {
          "type": "string",
          "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommitsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List commits"
  },
  {
    "name": "GITHUB_REPO_S_LIST_COMMITS",
    "enum": "GITHUB_REPO_S_LIST_COMMITS",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List commits",
    "description": "The `verification` object in a commit includes the `verified` status, `reason`,\n    `signature`, and `payload`. Failure can result from key issues, service\n    errors, unsigned commits, unrecognized signatures, email issues, or invalid\n    signatures. \u003c\u003cDEPRECATED use list_commits\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "author": {
          "type": "string",
          "description": "GitHub username or email address to use to filter by commit author."
        },
        "committer": {
          "type": "string",
          "description": "GitHub username or email address to use to filter by commit committer."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "path": {
          "type": "string",
          "description": "Only commits containing this file path will be returned."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "until": {
          "type": "string",
          "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommitsResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List commits"
  },
  {
    "name": "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
    "enum": "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List branches for head commit",
    "description": "Protected branches are accessible in both public and private repositories\n    across various GitHub plans including Free, Pro, Team, and Enterprise versions.\n    They identify branches having the latest commit designated by a specific\n    commit SHA.",
    "parameters": {
      "type": "object",
      "properties": {
        "commit_sha": {
          "type": "string",
          "description": "The SHA of the commit."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "commit_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListBranchesForHeadCommitResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List branches for head commit"
  },
  {
    "name": "GITHUB_LIST_COMMIT_COMMENTS",
    "enum": "GITHUB_LIST_COMMIT_COMMENTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List commit comments",
    "description": "An endpoint lists commit comments, supporting custom media types for responses:\n    raw markdown, text only, HTML rendered markdown, or all formats. See GitHub\n    docs for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "commit_sha": {
          "type": "string",
          "description": "The SHA of the commit."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "commit_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommitCommentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List commit comments"
  },
  {
    "name": "GITHUB_CREATE_A_COMMIT_COMMENT",
    "enum": "GITHUB_CREATE_A_COMMIT_COMMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a commit comment",
    "description": "The endpoint allows adding comments to commits with `:commit_sha`, triggering\n    notifications. Rapid use may cause rate limiting. Supports various media\n    types for comments. See GitHub docs for limits, best practices, and media\n    type details.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The contents of the comment."
        },
        "commit_sha": {
          "type": "string",
          "description": "The SHA of the commit."
        },
        "line": {
          "type": "integer",
          "description": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "Relative path of the file to comment on."
        },
        "position": {
          "type": "integer",
          "description": "Line index in the diff to comment on."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "commit_sha",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACommitCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a commit comment"
  },
  {
    "name": "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
    "enum": "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pull requests associated with a commit",
    "description": "Specifies how to find pull requests linked to a commit: returns merged PRs\n    if the commit is in the default branch, and only open PRs otherwise. Use\n    `commit_sha` to list PRs for a branch.",
    "parameters": {
      "type": "object",
      "properties": {
        "commit_sha": {
          "type": "string",
          "description": "The SHA of the commit."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "commit_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPullRequestsAssociatedWithACommitResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List pull requests associated with a commit"
  },
  {
    "name": "GITHUB_GET_A_COMMIT",
    "enum": "GITHUB_GET_A_COMMIT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a commit",
    "description": "The API provides commit content with `read` access, supports pagination\n    for over 300 diffs up to 3000 files, and custom media types. Large diffs\n    may time out. Includes signature status in a `verification` object.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACommitResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a commit"
  },
  {
    "name": "GITHUB_REPO_S_GET_COMMIT",
    "enum": "GITHUB_REPO_S_GET_COMMIT",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a commit",
    "description": "The API provides commit content with `read` access, supports pagination\n    for over 300 diffs up to 3000 files, and custom media types. Large diffs\n    may time out. Includes signature status in a `verification` object.\u003c\u003cDEPRECATED\n    use get_a_commit\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACommitResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get a commit"
  },
  {
    "name": "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
    "enum": "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List check runs for a git reference",
    "description": "Endpoint identifies check runs for SHA, branch, or tag within the same repo;\n    excludes forks, capped at 1000 suites per ref. Full list via specific endpoints.\n    `repo` scope needed for private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "integer",
          "description": "App Id"
        },
        "check_name": {
          "type": "string",
          "description": "Returns check runs with the specified `name`."
        },
        "filter": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "status": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCheckRunsForAGitReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List check runs for a git reference"
  },
  {
    "name": "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
    "enum": "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
    "tags": [
      "checks"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List check suites for a git reference",
    "description": "The text outlines an API feature that lists check suites for commits identified\n    by SHA, branch, or tag. Forked repository pushes are not detected. Access\n    to private repositories needs `repo` scope on OAuth or personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "integer",
          "description": "Filters check suites by GitHub App `id`."
        },
        "check_name": {
          "type": "string",
          "description": "Returns check runs with the specified `name`."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCheckSuitesForAGitReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List check suites for a git reference"
  },
  {
    "name": "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
    "enum": "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the combined status for a specific reference",
    "description": "Users with pull access can view combined commit statuses for a SHA, branch,\n    or tag in a repository. A `state` is also returned, indicating `failure`,\n    `pending`, or `success` based on the context reports.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheCombinedStatusForASpecificReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the combined status for a specific reference"
  },
  {
    "name": "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
    "enum": "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List commit statuses for a reference",
    "description": "Users with pull access can see commit statuses for a SHA, branch, or tag\n    in reverse order, with the latest first. It's accessible through a legacy\n    route.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommitStatusesForAReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List commit statuses for a reference"
  },
  {
    "name": "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
    "enum": "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get community profile metrics",
    "description": "The text details metrics for evaluating non-fork repositories, such as health\n    score, documentation, and compliance with recommended files, including a\n    'health_percentage' and notes that 'content_reports_enabled' is specific\n    to organization repos.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetCommunityProfileMetricsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get community profile metrics"
  },
  {
    "name": "GITHUB_COMPARE_TWO_COMMITS",
    "enum": "GITHUB_COMPARE_TWO_COMMITS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Compare two commits",
    "description": "The API enables comparison of two commits, across same/different repos or\n    forks, focusing on file changes, order variations from `git log`, supports\n    pagination for extensive comparisons, and provides signature verification\n    for commits.",
    "parameters": {
      "type": "object",
      "properties": {
        "basehead": {
          "type": "string",
          "description": "The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "basehead"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CompareTwoCommitsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Compare two commits"
  },
  {
    "name": "GITHUB_GET_REPOSITORY_CONTENT",
    "enum": "GITHUB_GET_REPOSITORY_CONTENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get repository content",
    "description": "This API endpoint fetches contents of files or directories in various formats,\n    uniquely manages directories, symlinks, and submodules, and supports up\n    to 1,000 files per directory with size constraints on features.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "path parameter"
        },
        "ref": {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default: the repository’s default branch. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "path"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRepositoryContentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get repository content"
  },
  {
    "name": "GITHUB_REPO_S_GET_CONTENT",
    "enum": "GITHUB_REPO_S_GET_CONTENT",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get repository content",
    "description": "This API endpoint fetches contents of files or directories in various formats,\n    uniquely manages directories, symlinks, and submodules, and supports up\n    to 1,000 files per directory with size constraints on features.\u003c\u003cDEPRECATED\n    use get_repository_content\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "path parameter"
        },
        "ref": {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default: the repository’s default branch. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "path"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRepositoryContentResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get repository content"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
    "enum": "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update file contents",
    "description": "This endpoint creates or replaces a file in a repository but cannot be used\n    concurrently with the \"Delete a file\" endpoint to avoid errors. It requires\n    `repo` and, for modifying `.github/workflows`, `workflow` scopes in OAuth\n    or personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "author__date": {
          "type": "string",
          "description": "Date"
        },
        "author__email": {
          "type": "string",
          "description": "The email of the author or committer of the commit. You\"ll receive a `422` status code if `email` is omitted. "
        },
        "author__name": {
          "type": "string",
          "description": "The name of the author or committer of the commit. You\"ll receive a `422` status code if `name` is omitted. "
        },
        "branch": {
          "type": "string",
          "description": "The branch name. Default: the repository’s default branch."
        },
        "committer__date": {
          "type": "string",
          "description": "Date"
        },
        "committer__email": {
          "type": "string",
          "description": "The email of the author or committer of the commit. You\"ll receive a `422` status code if `email` is omitted. "
        },
        "committer__name": {
          "type": "string",
          "description": "The name of the author or committer of the commit. You\"ll receive a `422` status code if `name` is omitted. "
        },
        "content": {
          "type": "string",
          "description": "The new file content, using Base64 encoding."
        },
        "message": {
          "type": "string",
          "description": "The commit message."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "path parameter"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "**Required if you are updating a file**. The blob SHA of the file being replaced. "
        }
      },
      "required": [
        "owner",
        "repo",
        "path",
        "message",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateFileContentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update file contents"
  },
  {
    "name": "GITHUB_REPO_S_CREATE_OR_UPDATE_FILE_CONTENTS",
    "enum": "GITHUB_REPO_S_CREATE_OR_UPDATE_FILE_CONTENTS",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update file contents",
    "description": "This endpoint creates or replaces a file in a repository but cannot be used\n    concurrently with the \"Delete a file\" endpoint to avoid errors. It requires\n    `repo` and, for modifying `.github/workflows`, `workflow` scopes in OAuth\n    or personal access tokens.\u003c\u003cDEPRECATED use create_or_update_file_contents\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "author__date": {
          "type": "string",
          "description": "Date"
        },
        "author__email": {
          "type": "string",
          "description": "The email of the author or committer of the commit. You\"ll receive a `422` status code if `email` is omitted. "
        },
        "author__name": {
          "type": "string",
          "description": "The name of the author or committer of the commit. You\"ll receive a `422` status code if `name` is omitted. "
        },
        "branch": {
          "type": "string",
          "description": "The branch name. Default: the repository’s default branch."
        },
        "committer__date": {
          "type": "string",
          "description": "Date"
        },
        "committer__email": {
          "type": "string",
          "description": "The email of the author or committer of the commit. You\"ll receive a `422` status code if `email` is omitted. "
        },
        "committer__name": {
          "type": "string",
          "description": "The name of the author or committer of the commit. You\"ll receive a `422` status code if `name` is omitted. "
        },
        "content": {
          "type": "string",
          "description": "The new file content, using Base64 encoding."
        },
        "message": {
          "type": "string",
          "description": "The commit message."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "path parameter"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "**Required if you are updating a file**. The blob SHA of the file being replaced. "
        }
      },
      "required": [
        "owner",
        "repo",
        "path",
        "message",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateFileContentsResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create or update file contents"
  },
  {
    "name": "GITHUB_DELETE_A_FILE",
    "enum": "GITHUB_DELETE_A_FILE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a file",
    "description": "The text explains deleting a file in a repository, mentioning how `committer`\n    or `author` details can be specified but default to the user. It advises\n    against using this method with \"Create or update file contents\" to avoid\n    errors.",
    "parameters": {
      "type": "object",
      "properties": {
        "author__email": {
          "type": "string",
          "description": "The email of the author (or committer) of the commit"
        },
        "author__name": {
          "type": "string",
          "description": "The name of the author (or committer) of the commit"
        },
        "branch": {
          "type": "string",
          "description": "The branch name. Default: the repository’s default branch"
        },
        "committer__email": {
          "type": "string",
          "description": "The email of the author (or committer) of the commit"
        },
        "committer__name": {
          "type": "string",
          "description": "The name of the author (or committer) of the commit"
        },
        "message": {
          "type": "string",
          "description": "The commit message."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "path parameter"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "The blob SHA of the file being deleted."
        }
      },
      "required": [
        "owner",
        "repo",
        "path",
        "message",
        "sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAFileResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a file"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
    "enum": "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository contributors",
    "description": "The GitHub API endpoint shows repo contributors in descending commit order.\n    It may show outdated info due to caching. Only the top 500 contributors\n    are linked to user accounts; others are anonymous.",
    "parameters": {
      "type": "object",
      "properties": {
        "anon": {
          "type": "string",
          "description": "Set to `1` or `true` to include anonymous contributors in results."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryContributorsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository contributors"
  },
  {
    "name": "GITHUB_REPO_S_LIST_CONTRIBUTORS",
    "enum": "GITHUB_REPO_S_LIST_CONTRIBUTORS",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository contributors",
    "description": "The GitHub API endpoint shows repo contributors in descending commit order.\n    It may show outdated info due to caching. Only the top 500 contributors\n    are linked to user accounts; others are anonymous.\u003c\u003cDEPRECATED use list_repository_contributors\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "anon": {
          "type": "string",
          "description": "Set to `1` or `true` to include anonymous contributors in results."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryContributorsResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List repository contributors"
  },
  {
    "name": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List dependabot alerts for a repository",
    "description": "OAuth app tokens and personal access tokens (classic) need the `security_events`\n    scope to use this endpoint. If this endpoint is only used with public repositories,\n    the token can use the `public_repo` scope instead.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "ecosystem": {
          "type": "string",
          "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned. Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` "
        },
        "first": {
          "type": "integer",
          "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results. "
        },
        "last": {
          "type": "integer",
          "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results. "
        },
        "manifest": {
          "type": "string",
          "description": "A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "package": {
          "type": "string",
          "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned. "
        },
        "page": {
          "type": "integer",
          "description": "**Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "scope": {
          "type": "string",
          "description": ""
        },
        "severity": {
          "type": "string",
          "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned. Can be: `low`, `medium`, `high`, `critical` "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": "A comma-separated list of states. If specified, only alerts with these states will be returned. Can be: `auto_dismissed`, `dismissed`, `fixed`, `open` "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDependabotAlertsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List dependabot alerts for a repository"
  },
  {
    "name": "GITHUB_GET_A_DEPENDABOT_ALERT",
    "enum": "GITHUB_GET_A_DEPENDABOT_ALERT",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a dependabot alert",
    "description": "OAuth app tokens and personal access tokens (classic) need the `security_events`\n    scope to use this endpoint. If this endpoint is only used with public repositories,\n    the token can use the `public_repo` scope instead.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in `number` fields in the response from the `GET /repos/{owner}/{repo}/dependabot/alerts` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADependabotAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a dependabot alert"
  },
  {
    "name": "GITHUB_UPDATE_A_DEPENDABOT_ALERT",
    "enum": "GITHUB_UPDATE_A_DEPENDABOT_ALERT",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a dependabot alert",
    "description": "Access to security alerts for a repository requires authenticated user access\n    and specific token scopes (`security_events` or `public_repo` for public\n    repositories). For more, see GitHub docs on granting security alerts access.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in `number` fields in the response from the `GET /repos/{owner}/{repo}/dependabot/alerts` operation. "
        },
        "dismissed_comment": {
          "type": "string",
          "description": "An optional comment associated with dismissing the alert."
        },
        "dismissed_reason": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number",
        "state"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateADependabotAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a dependabot alert"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
    "enum": "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository secrets without decrypting",
    "description": "Lists all secrets available in a repository without revealing their encrypted\n    values. OAuth app tokens and personal access tokens (classic) need the `repo`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositorySecretsWithoutDecryptingResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository secrets without decrypting"
  },
  {
    "name": "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
    "enum": "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Retrieverepopublickeyforencryption",
    "description": "This endpoint retrieves the public key for encrypting secrets in a repository,\n    accessible to users with read access. For private repositories, OAuth and\n    personal access tokens with the `repo` scope are needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RetrieveRepoPublicKeyForEncryptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Retrieverepopublickeyforencryption"
  },
  {
    "name": "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
    "enum": "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Getrepositorysecretsecurely",
    "description": "Gets a single repository secret without revealing its encrypted value. OAuth\n    app tokens and personal access tokens (classic) need the `repo` scope to\n    use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRepositorySecretSecurelyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Getrepositorysecretsecurely"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
    "enum": "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update repo secret with encrypted value",
    "description": "This text explains how to create or update a repository secret with an encrypted\n    value using LibSodium. It highlights that OAuth app and personal access\n    tokens require the `repo` scope. For encryption details, visit GitHub's\n    REST API guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateRepoSecretWithEncryptedValueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update repo secret with encrypted value"
  },
  {
    "name": "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
    "enum": "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
    "tags": [
      "dependabot"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Deletedependebotsecretbyname",
    "description": "Deletes a secret in a repository using the secret name. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteDependebotSecretByNameResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Deletedependebotsecretbyname"
  },
  {
    "name": "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
    "enum": "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
    "tags": [
      "dependency-graph"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a diff of the dependencies between commits",
    "description": "Gets the diff of the dependency changes between two commits of a repository,\n    based on the changes to the dependency manifests made in those commits.",
    "parameters": {
      "type": "object",
      "properties": {
        "basehead": {
          "type": "string",
          "description": "The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. "
        },
        "name": {
          "type": "string",
          "description": "The full path, relative to the repository root, of the dependency manifest file. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "basehead"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADiffOfTheDependenciesBetweenCommitsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a diff of the dependencies between commits"
  },
  {
    "name": "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
    "enum": "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
    "tags": [
      "dependency-graph"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Export a software bill of materials sbom for a repository",
    "description": "Exports the software bill of materials (SBOM) for a repository in SPDX JSON\n    format.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ExportASoftwareBillOfMaterialsSbomForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Export a software bill of materials sbom for a repository"
  },
  {
    "name": "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
    "tags": [
      "dependency-graph"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a snapshot of dependencies for a repository",
    "description": "Create a new snapshot of a repository's dependencies. The authenticated\n    user must have access to the repository. OAuth app tokens and personal access\n    tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "detector__name": {
          "type": "string",
          "description": "The name of the detector used."
        },
        "detector__url": {
          "type": "string",
          "description": "The url of the detector used."
        },
        "detector__version": {
          "type": "string",
          "description": "The version of the detector used."
        },
        "job__correlator": {
          "type": "string",
          "description": "Correlator provides a key that is used to group snapshots submitted over time. Only the \"latest\" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository\"s current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \"wave\" of CI workflow you run. If you\"re using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you\"re using a build matrix, then you\"ll also need to add additional key(s) to distinguish between each submission inside a matrix variation. "
        },
        "job__html__url": {
          "type": "string",
          "description": "The url for the job."
        },
        "job__id": {
          "type": "string",
          "description": "The external ID of the job."
        },
        "manifests": {
          "type": "object",
          "description": "A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies. "
        },
        "metadata": {
          "type": "object",
          "description": "User-defined metadata to store domain-specific information limited to 8 keys with scalar values. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The repository branch that triggered this snapshot."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "scanned": {
          "type": "string",
          "description": "The time at which the snapshot was scanned."
        },
        "sha": {
          "type": "string",
          "description": "The commit SHA associated with this dependency snapshot. Maximum length: 40 characters. "
        },
        "version": {
          "type": "integer",
          "description": "The version of the repository snapshot submission."
        }
      },
      "required": [
        "owner",
        "repo",
        "version",
        "sha",
        "ref",
        "scanned"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateASnapshotOfDependenciesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a snapshot of dependencies for a repository"
  },
  {
    "name": "GITHUB_LIST_DEPLOYMENTS",
    "enum": "GITHUB_LIST_DEPLOYMENTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List deployments",
    "description": "Simple filtering of deployments is available via query parameters:",
    "parameters": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string",
          "description": "The name of the environment that was deployed to (e.g., `staging` or `production`). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The name of the ref. This can be a branch, tag, or SHA."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "The SHA recorded at creation time."
        },
        "task": {
          "type": "string",
          "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDeploymentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List deployments"
  },
  {
    "name": "GITHUB_CREATE_A_DEPLOYMENT",
    "enum": "GITHUB_CREATE_A_DEPLOYMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a deployment",
    "description": "GitHub's deployment feature offers versatile verification across environments\n    like 'production' and 'staging', with parameters like `ref`, `environment`,\n    and `task`, ensuring safety and traceability with defaults.",
    "parameters": {
      "type": "object",
      "properties": {
        "auto_merge": {
          "type": "boolean",
          "description": "Attempts to automatically merge the default branch into the requested ref, if it\"s behind the default branch. "
        },
        "description": {
          "type": "string",
          "description": "Short description of the deployment."
        },
        "environment": {
          "type": "string",
          "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "payload": {
          "type": "string",
          "description": "Payload"
        },
        "production_environment": {
          "type": "boolean",
          "description": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. "
        },
        "ref": {
          "type": "string",
          "description": "The ref to deploy. This can be a branch, tag, or SHA."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "required_contexts": {
          "type": "array",
          "description": "The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. "
        },
        "task": {
          "type": "string",
          "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`)."
        },
        "transient_environment": {
          "type": "boolean",
          "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false` "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADeploymentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a deployment"
  },
  {
    "name": "GITHUB_GET_A_DEPLOYMENT",
    "enum": "GITHUB_GET_A_DEPLOYMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a deployment",
    "description": "This endpoint details a repository's specific deployment, including URL,\n    SHA, environment, creator, timestamps, and more, essential for deploying\n    refs, as per GitHub API docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "deployment_id": {
          "type": "integer",
          "description": "deployment_id parameter"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "deployment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADeploymentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a deployment"
  },
  {
    "name": "GITHUB_DELETE_A_DEPLOYMENT",
    "enum": "GITHUB_DELETE_A_DEPLOYMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a deployment",
    "description": "To delete a deployment, it must be inactive in multi-deployment repos. Make\n    a deployment inactive by replacement or marking it non-successful. Use `repo`\n    or `repo_deployment` scope tokens. Refer to GitHub docs for creating deployments\n    and statuses.",
    "parameters": {
      "type": "object",
      "properties": {
        "deployment_id": {
          "type": "integer",
          "description": "deployment_id parameter"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "deployment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADeploymentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a deployment"
  },
  {
    "name": "GITHUB_LIST_DEPLOYMENT_STATUSES",
    "enum": "GITHUB_LIST_DEPLOYMENT_STATUSES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List deployment statuses",
    "description": "Users with pull access can view deployment statuses for a deployment:",
    "parameters": {
      "type": "object",
      "properties": {
        "deployment_id": {
          "type": "integer",
          "description": "deployment_id parameter"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "deployment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDeploymentStatusesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List deployment statuses"
  },
  {
    "name": "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
    "enum": "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a deployment status",
    "description": "Users with `push` access can create deployment statuses for a given deployment.\n    OAuth app tokens and personal access tokens (classic) need the `repo_deployment`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "auto_inactive": {
          "type": "boolean",
          "description": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status\"s deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` "
        },
        "deployment_id": {
          "type": "integer",
          "description": "deployment_id parameter"
        },
        "description": {
          "type": "string",
          "description": "A short description of the status. The maximum description length is 140 characters. "
        },
        "environment": {
          "type": "string",
          "description": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used. "
        },
        "environment_url": {
          "type": "string",
          "description": "Sets the URL for accessing your environment. Default: `\"\"`"
        },
        "log_url": {
          "type": "string",
          "description": "The full URL of the deployment\"s output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"` "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "target_url": {
          "type": "string",
          "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It\"s recommended to use the `log_url` parameter, which replaces `target_url`. "
        }
      },
      "required": [
        "owner",
        "repo",
        "deployment_id",
        "state"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADeploymentStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a deployment status"
  },
  {
    "name": "GITHUB_GET_A_DEPLOYMENT_STATUS",
    "enum": "GITHUB_GET_A_DEPLOYMENT_STATUS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a deployment status",
    "description": "Users with pull access can view a deployment status for a deployment:",
    "parameters": {
      "type": "object",
      "properties": {
        "deployment_id": {
          "type": "integer",
          "description": "deployment_id parameter"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "status_id": {
          "type": "integer",
          "description": "Status Id"
        }
      },
      "required": [
        "owner",
        "repo",
        "deployment_id",
        "status_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADeploymentStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a deployment status"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
    "enum": "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository dispatch event",
    "description": "Trigger the `repository_dispatch` event on GitHub to start workflows or\n    webhooks with external activity. Configure your GitHub or App to respond\n    to this event. Use the `client_payload` for extra info or testing. OAuth\n    and access tokens need `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "client_payload": {
          "type": "object",
          "description": "JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. "
        },
        "event_type": {
          "type": "string",
          "description": "A custom webhook event name. Must be 100 characters or fewer."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "event_type"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryDispatchEventResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository dispatch event"
  },
  {
    "name": "GITHUB_LIST_ENVIRONMENTS",
    "enum": "GITHUB_LIST_ENVIRONMENTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List environments",
    "description": "Lists the environments for a repository. Anyone with read access to the\n    repository can use this endpoint. OAuth app tokens and personal access tokens\n    (classic) need the `repo` scope to use this endpoint with a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEnvironmentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List environments"
  },
  {
    "name": "GITHUB_GET_AN_ENVIRONMENT",
    "enum": "GITHUB_GET_AN_ENVIRONMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an environment",
    "description": "For deploying, refer to deployment branch policy details at a specified\n    link. This is accessible to those with repository read access. Private repository\n    access requires OAuth or personal tokens with `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnEnvironmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an environment"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
    "enum": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update an environment",
    "description": "Create/update environments with protection rules and requirements for reviewers,\n    branch name patterns, and secrets. Use `repo` scope for OAuth/personal tokens.\n    See GitHub docs on environments, branch policies, and actions secrets for\n    details.",
    "parameters": {
      "type": "object",
      "properties": {
        "deployment__branch__policy__custom__branch__policies": {
          "type": "boolean",
          "description": "Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. "
        },
        "deployment__branch__policy__protected__branches": {
          "type": "boolean",
          "description": "Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. "
        },
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "prevent_self_review": {
          "type": "boolean",
          "description": "Whether or not a user who created the job is prevented from approving their own job. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "reviewers": {
          "type": "array",
          "description": "The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. "
        },
        "wait_timer": {
          "type": "integer",
          "description": "The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateAnEnvironmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update an environment"
  },
  {
    "name": "GITHUB_DELETE_AN_ENVIRONMENT",
    "enum": "GITHUB_DELETE_AN_ENVIRONMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an environment",
    "description": "OAuth app tokens and personal access tokens (classic) need the `repo` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnEnvironmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an environment"
  },
  {
    "name": "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
    "enum": "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List deployment branch policies",
    "description": "Lists the deployment branch policies for an environment. Anyone with read\n    access to the repository can use this endpoint. OAuth app tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint with\n    a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDeploymentBranchPoliciesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List deployment branch policies"
  },
  {
    "name": "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
    "enum": "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a deployment branch policy",
    "description": "Creates a deployment branch or tag policy for an environment. OAuth app\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "name": {
          "type": "string",
          "description": "The name pattern that branches or tags must match in order to deploy to the environment. Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`. For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADeploymentBranchPolicyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a deployment branch policy"
  },
  {
    "name": "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
    "enum": "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a deployment branch policy",
    "description": "Gets a deployment branch or tag policy for an environment. Anyone with read\n    access to the repository can use this endpoint. OAuth app tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint with\n    a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch_policy_id": {
          "type": "integer",
          "description": "The unique identifier of the branch policy."
        },
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "branch_policy_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADeploymentBranchPolicyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a deployment branch policy"
  },
  {
    "name": "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
    "enum": "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a deployment branch policy",
    "description": "Updates a deployment branch or tag policy for an environment. OAuth app\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch_policy_id": {
          "type": "integer",
          "description": "The unique identifier of the branch policy."
        },
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "name": {
          "type": "string",
          "description": "The name pattern that branches must match in order to deploy to the environment. Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`. For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "branch_policy_id",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateADeploymentBranchPolicyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a deployment branch policy"
  },
  {
    "name": "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
    "enum": "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a deployment branch policy",
    "description": "Deletes a deployment branch or tag policy for an environment. OAuth app\n    tokens and personal access tokens (classic) need the `repo` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch_policy_id": {
          "type": "integer",
          "description": "The unique identifier of the branch policy."
        },
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "branch_policy_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADeploymentBranchPolicyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a deployment branch policy"
  },
  {
    "name": "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
    "enum": "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all deployment protection rules for an environment",
    "description": "This endpoint fetches enabled custom deployment protection rules for environments,\n    needing 'repo' scope for private repositories. It's open to those with read\n    access and includes more information in linked documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "environment_name",
        "repo",
        "owner"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllDeploymentProtectionRulesForAnEnvironmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all deployment protection rules for an environment"
  },
  {
    "name": "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT",
    "enum": "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a custom deployment protection rule on an environment",
    "description": "Enable a custom deployment protection rule for an environment; requires\n    admin or owner permissions. See [GET /apps/{app_slug}] documentation for\n    details. OAuth app tokens and personal access tokens need `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "integration_id": {
          "type": "integer",
          "description": "The ID of the custom app that will be enabled on the environment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "environment_name",
        "repo",
        "owner"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACustomDeploymentProtectionRuleOnAnEnvironmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a custom deployment protection rule on an environment"
  },
  {
    "name": "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
    "enum": "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listenvironmentcustomdeploymentrules",
    "description": "This endpoint fetches custom deployment protection rules for an environment,\n    needing `repo` scope for private repositories through OAuth or tokens. Details\n    are in GitHub documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "environment_name",
        "repo",
        "owner"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEnvironmentCustomDeploymentRulesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listenvironmentcustomdeploymentrules"
  },
  {
    "name": "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
    "enum": "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a custom deployment protection rule",
    "description": "This endpoint retrieves an enabled custom deployment protection rule for\n    an environment accessible to anyone with repository read access. It requires\n    `repo` scope for private repositories when using OAuth or personal access\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "protection_rule_id": {
          "type": "integer",
          "description": "The unique identifier of the protection rule."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "protection_rule_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACustomDeploymentProtectionRuleResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a custom deployment protection rule"
  },
  {
    "name": "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
    "enum": "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Disable a custom protection rule for an environment",
    "description": "Disables a custom deployment protection rule for an environment. Requires\n    admin or owner permissions and OAuth app or personal access tokens with\n    'repo' scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "protection_rule_id": {
          "type": "integer",
          "description": "The unique identifier of the protection rule."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "environment_name",
        "repo",
        "owner",
        "protection_rule_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DisableACustomProtectionRuleForAnEnvironmentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Disable a custom protection rule for an environment"
  },
  {
    "name": "GITHUB_LIST_ENVIRONMENT_SECRETS",
    "enum": "GITHUB_LIST_ENVIRONMENT_SECRETS",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List environment secrets",
    "description": "This endpoint allows users with collaborator access to list all secrets\n    in an environment, without showing their encrypted values. OAuth app and\n    personal access tokens with `repo` scope are required.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEnvironmentSecretsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List environment secrets"
  },
  {
    "name": "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
    "enum": "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an environment public key",
    "description": "To encrypt environment secrets, acquire the environment's public key. Encryption\n    is essential for secret creation or update. Read access to the repository\n    is needed, with private repositories requiring OAuth or personal access\n    tokens with 'repo' scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnEnvironmentPublicKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an environment public key"
  },
  {
    "name": "GITHUB_GET_AN_ENVIRONMENT_SECRET",
    "enum": "GITHUB_GET_AN_ENVIRONMENT_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an environment secret",
    "description": "This API endpoint allows authenticated collaborators with `repo` scope via\n    OAuth or personal access tokens to get a single repository environment secret\n    without decrypting it.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnEnvironmentSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an environment secret"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
    "enum": "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update an environment secret",
    "description": "This text explains how to create or update encrypted environment secrets\n    with LibSodium for GitHub's REST API, requiring collaborator access and\n    `repo` scope on tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint. "
        },
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "secret_name",
        "encrypted_value",
        "key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateAnEnvironmentSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update an environment secret"
  },
  {
    "name": "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
    "enum": "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an environment secret",
    "description": "Deletes a secret in an environment using the secret name. Authenticated\n    users must have collaborator access to a repository to create, update, or\n    read secrets. OAuth tokens and personal access tokens (classic) need the\n    `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnEnvironmentSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an environment secret"
  },
  {
    "name": "GITHUB_LIST_ENVIRONMENT_VARIABLES",
    "enum": "GITHUB_LIST_ENVIRONMENT_VARIABLES",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List environment variables",
    "description": "Lists all environment variables. Authenticated users must have collaborator\n    access to a repository to create, update, or read variables. OAuth app tokens\n    and personal access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEnvironmentVariablesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List environment variables"
  },
  {
    "name": "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
    "enum": "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an environment variable",
    "description": "To reference an environment variable in GitHub Actions, users need collaborator\n    access. OAuth and classic personal access tokens require the `repo` scope\n    for creation, updating, or reading variables.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "value": {
          "type": "string",
          "description": "The value of the variable."
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "name",
        "value"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnEnvironmentVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an environment variable"
  },
  {
    "name": "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
    "enum": "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an environment variable",
    "description": "Gets a specific variable in an environment. Authenticated users must have\n    collaborator access to a repository to create, update, or read variables.\n    OAuth tokens and personal access tokens (classic) need the `repo` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "environment_name",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnEnvironmentVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an environment variable"
  },
  {
    "name": "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
    "enum": "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an environment variable",
    "description": "To create, update, or read environment variables in a GitHub Actions workflow,\n    authenticated collaborators need `repo` scope on OAuth or classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "value": {
          "type": "string",
          "description": "The value of the variable."
        }
      },
      "required": [
        "owner",
        "repo",
        "name",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnEnvironmentVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an environment variable"
  },
  {
    "name": "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
    "enum": "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
    "tags": [
      "actions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an environment variable",
    "description": "Authenticated users need collaborator access to delete an environment variable\n    by its name. OAuth and classic personal access tokens require the `repo`\n    scope for this action.",
    "parameters": {
      "type": "object",
      "properties": {
        "environment_name": {
          "type": "string",
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`. "
        },
        "name": {
          "type": "string",
          "description": "The name of the variable."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name",
        "environment_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnEnvironmentVariableResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an environment variable"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_EVENTS",
    "enum": "GITHUB_LIST_REPOSITORY_EVENTS",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository events",
    "description": "**Note**: This API is not built to serve real-time use cases. Depending\n    on the time of day, event latency can be anywhere from 30s to 6h.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryEventsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository events"
  },
  {
    "name": "GITHUB_LIST_FORKS",
    "enum": "GITHUB_LIST_FORKS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List forks",
    "description": "This endpoint displays GitHub repo forks by 'owner/repo', sorted by 'newest',\n    'oldest', 'stargazers', 'watchers'; defaults to 'newest'. Supports pagination\n    ('per_page', 'page'; default 30 results, page 1). For details, check GitHub\n    docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListForksResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List forks"
  },
  {
    "name": "GITHUB_CREATE_A_FORK",
    "enum": "GITHUB_CREATE_A_FORK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a fork",
    "description": "Create a fork for the user; it's asynchronous so wait a bit. If over 5 mins,\n    contact GitHub Support. Needs GitHub App installed on both source and destination\n    accounts with necessary access.",
    "parameters": {
      "type": "object",
      "properties": {
        "default_branch_only": {
          "type": "boolean",
          "description": "When forking from an existing repository, fork with only the default branch. "
        },
        "name": {
          "type": "string",
          "description": "When forking from an existing repository, a new name for the fork."
        },
        "organization": {
          "type": "string",
          "description": "Optional parameter to specify the organization name if forking into an organization. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAForkResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a fork"
  },
  {
    "name": "GITHUB_REPO_S_CREATE_FORK",
    "enum": "GITHUB_REPO_S_CREATE_FORK",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a fork",
    "description": "Create a fork for the user; it's asynchronous so wait a bit. If over 5 mins,\n    contact GitHub Support. Needs GitHub App installed on both source and destination\n    accounts with necessary access.\u003c\u003cDEPRECATED use create_a_fork\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "default_branch_only": {
          "type": "boolean",
          "description": "When forking from an existing repository, fork with only the default branch. "
        },
        "name": {
          "type": "string",
          "description": "When forking from an existing repository, a new name for the fork."
        },
        "organization": {
          "type": "string",
          "description": "Optional parameter to specify the organization name if forking into an organization. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAForkResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create a fork"
  },
  {
    "name": "GITHUB_CREATE_A_BLOB",
    "enum": "GITHUB_CREATE_A_BLOB",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a blob",
    "description": "This API endpoint enables creating a new blob in a specified repository,\n    supporting `UTF-8` and `base64` encodings. It requires blob content in the\n    request body and returns blob details, including URL and SHA, upon success.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "The new blob\"s content."
        },
        "encoding": {
          "type": "string",
          "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateABlobResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a blob"
  },
  {
    "name": "GITHUB_GET_A_BLOB",
    "enum": "GITHUB_GET_A_BLOB",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a blob",
    "description": "The endpoint returns blob data, offering raw data or JSON with base64 encoded\n    `content`. Supports files up to 100MB. More on media types at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "file_sha": {
          "type": "string",
          "description": "File Sha"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "file_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetABlobResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a blob"
  },
  {
    "name": "GITHUB_CREATE_A_COMMIT",
    "enum": "GITHUB_CREATE_A_COMMIT",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a commit",
    "description": "Git commits' `verification` object confirms signature validity, detailing\n    verification status and reason, with fields like `verified`, `reason`, `signature`,\n    and `payload`, indicating reasons from `expired_key` to `valid`.",
    "parameters": {
      "type": "object",
      "properties": {
        "author__date": {
          "type": "string",
          "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "author__email": {
          "type": "string",
          "description": "The email of the author (or committer) of the commit"
        },
        "author__name": {
          "type": "string",
          "description": "The name of the author (or committer) of the commit"
        },
        "committer__date": {
          "type": "string",
          "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "committer__email": {
          "type": "string",
          "description": "The email of the author (or committer) of the commit"
        },
        "committer__name": {
          "type": "string",
          "description": "The name of the author (or committer) of the commit"
        },
        "message": {
          "type": "string",
          "description": "The commit message"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "parents": {
          "type": "array",
          "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "signature": {
          "type": "string",
          "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. "
        },
        "tree": {
          "type": "string",
          "description": "The SHA of the tree object this commit points to"
        }
      },
      "required": [
        "owner",
        "repo",
        "message",
        "tree"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACommitResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a commit"
  },
  {
    "name": "GITHUB_GET_A_COMMIT_OBJECT",
    "enum": "GITHUB_GET_A_COMMIT_OBJECT",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a commit object",
    "description": "GitHub's commit object includes a `verification` object summarizing the\n    result of the commit's signature verification, detailing if it was verified,\n    the reason, signature, and signed value. Descriptions for possible verification\n    reasons are provided.",
    "parameters": {
      "type": "object",
      "properties": {
        "commit_sha": {
          "type": "string",
          "description": "The SHA of the commit."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "commit_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACommitObjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a commit object"
  },
  {
    "name": "GITHUB_LIST_MATCHING_REFERENCES",
    "enum": "GITHUB_LIST_MATCHING_REFERENCES",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List matching references",
    "description": "The Git database API retrieves ref arrays for branches or tags. Without\n    specifying `:ref`, it returns all references. Non-existent `:ref`s yield\n    starting matches. Mergeability requires a pull request.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListMatchingReferencesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List matching references"
  },
  {
    "name": "GITHUB_GET_A_REFERENCE",
    "enum": "GITHUB_GET_A_REFERENCE",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a reference",
    "description": "Fetches a Git reference using a formatted URL for branches (`heads/\u003cbranch\n    name\u003e`) or tags (`tags/\u003ctag name\u003e`). Returns a 404 if not found. For pull\n    request mergeability, a separate request is needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a reference"
  },
  {
    "name": "GITHUB_CREATE_A_REFERENCE",
    "enum": "GITHUB_CREATE_A_REFERENCE",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a reference",
    "description": "Creates a reference for your repository. You are unable to create new references\n    for empty repositories, even if the commit SHA-1 hash used exists. Empty\n    repositories are repositories without branches.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn\"t start with \"refs\" and have at least two slashes, it will be rejected. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "The SHA1 value for this reference."
        }
      },
      "required": [
        "owner",
        "repo",
        "ref",
        "sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a reference"
  },
  {
    "name": "GITHUB_UPDATE_A_REFERENCE",
    "enum": "GITHUB_UPDATE_A_REFERENCE",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a reference",
    "description": "Updates the provided reference to point to a new SHA. For more information,\n    see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\"\n    in the Git documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you\"re not overwriting work. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "The SHA1 value to set this reference to"
        }
      },
      "required": [
        "owner",
        "repo",
        "ref",
        "sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a reference"
  },
  {
    "name": "GITHUB_DELETE_A_REFERENCE",
    "enum": "GITHUB_DELETE_A_REFERENCE",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a reference",
    "description": "Deletes the provided reference.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAReferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a reference"
  },
  {
    "name": "GITHUB_CREATE_A_TAG_OBJECT",
    "enum": "GITHUB_CREATE_A_TAG_OBJECT",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a tag object",
    "description": "Creating an annotated Git tag involves making a tag object and a `refs/tags/[tag]`\n    reference. Lightweight tags need only the reference. The `verification`\n    object shows if the signature is verified and why.",
    "parameters": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The tag message."
        },
        "object": {
          "type": "string",
          "description": "The SHA of the git object this is tagging."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag": {
          "type": "string",
          "description": "The tag\"s name. This is typically a version (e.g., \"v0.0.1\")."
        },
        "tagger__date": {
          "type": "string",
          "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "tagger__email": {
          "type": "string",
          "description": "The email of the author of the tag"
        },
        "tagger__name": {
          "type": "string",
          "description": "The name of the author of the tag"
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "tag",
        "message",
        "object",
        "type"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateATagObjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a tag object"
  },
  {
    "name": "GITHUB_GET_A_TAG",
    "enum": "GITHUB_GET_A_TAG",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a tag",
    "description": "The `verification` object in commit responses includes boolean `verified`,\n    `reason` for verification status, `signature`, and `payload` signed. Reasons\n    for `reason` field range from expired keys, errors, to valid signatures.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag_sha": {
          "type": "string",
          "description": "Tag Sha"
        }
      },
      "required": [
        "owner",
        "repo",
        "tag_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetATagResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a tag"
  },
  {
    "name": "GITHUB_CREATE_A_TREE",
    "enum": "GITHUB_CREATE_A_TREE",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a tree",
    "description": "The tree creation API allows for nested entries and modifying trees, where\n    changes require committing and updating branches. Using this API can add,\n    delete, or modify files but returns an error for deleting non-existent files.",
    "parameters": {
      "type": "object",
      "properties": {
        "base_tree": {
          "type": "string",
          "description": "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you\"re creating new changes on a branch, then normally you\"d set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you\"re working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit\"s tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.  "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tree": {
          "type": "array",
          "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. "
        }
      },
      "required": [
        "owner",
        "repo",
        "tree"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateATreeResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a tree"
  },
  {
    "name": "GITHUB_GET_A_TREE",
    "enum": "GITHUB_GET_A_TREE",
    "tags": [
      "git"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a tree",
    "description": "Fetches a tree by SHA1 or ref name. If `truncated` is true, the tree exceeds\n    limits (100,000 entries, 7 MB with `recursive`). Fetch more items by getting\n    sub-trees non-recursively.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "recursive": {
          "type": "string",
          "description": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tree_sha": {
          "type": "string",
          "description": "The SHA1 value or ref (branch or tag) name of the tree."
        }
      },
      "required": [
        "owner",
        "repo",
        "tree_sha"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetATreeResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a tree"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_WEBHOOKS",
    "enum": "GITHUB_LIST_REPOSITORY_WEBHOOKS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository webhooks",
    "description": "Lists webhooks for a repository. `last response` may return null if there\n    have not been any deliveries within 30 days.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryWebhooksResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository webhooks"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository webhook",
    "description": "Repositories can have multiple webhooks installed. Each webhook should have\n    a unique `config`. Multiple webhooks can share the same `config` as long\n    as those webhooks do not have any `events` that overlap.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. "
        },
        "config__content__type": {
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. "
        },
        "config__insecure__ssl": {
          "type": "string",
          "description": "Insecure Ssl"
        },
        "config__secret": {
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). "
        },
        "config__url": {
          "type": "string",
          "description": "The URL to which the payloads will be delivered."
        },
        "events": {
          "type": "array",
          "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. "
        },
        "name": {
          "type": "string",
          "description": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository webhook"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_GET_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository webhook",
    "description": "Returns a webhook configured in a repository. To get only the webhook `config`\n    properties, see \"[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository).\"",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository webhook"
  },
  {
    "name": "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a repository webhook",
    "description": "Update a repository's webhook by providing the same or a new `secret`; otherwise,\n    the `secret` is removed. For partial `config` updates, use the specific\n    webhook configuration update guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. "
        },
        "add_events": {
          "type": "array",
          "description": "Determines a list of events to be added to the list of events that the Hook triggers for. "
        },
        "config__content__type": {
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. "
        },
        "config__insecure__ssl": {
          "type": "string",
          "description": "Insecure Ssl"
        },
        "config__secret": {
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). "
        },
        "config__url": {
          "type": "string",
          "description": "The URL to which the payloads will be delivered."
        },
        "events": {
          "type": "array",
          "description": "Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events. "
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "remove_events": {
          "type": "array",
          "description": "Determines a list of events to be removed from the list of events that the Hook triggers for. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a repository webhook"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository webhook",
    "description": "To remove a repository webhook in GitHub Cloud or GitHub Apps, use the repository\n    owner's name, the repository's name, and the webhook's ID. A 204 code confirms\n    deletion, and a 404 code signifies a missing webhook. Visit the official\n    API for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository webhook"
  },
  {
    "name": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a webhook configuration for a repository",
    "description": "This text outlines how to retrieve a repository's webhook configuration\n    and details, specifying that OAuth app tokens and personal access tokens\n    require `read:repo_hook` or `repo` scope for access.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAWebhookConfigurationForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a webhook configuration for a repository"
  },
  {
    "name": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
    "enum": "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a webhook configuration for a repository",
    "description": "This text explains how to update a repository's webhook configuration, including\n    its `active` state and `events`, by using a specific update endpoint. OAuth\n    or classic tokens with `write:repo_hook` or `repo` scope are required.",
    "parameters": {
      "type": "object",
      "properties": {
        "content_type": {
          "type": "string",
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. "
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "insecure_ssl": {
          "type": "string",
          "description": "Insecure Ssl"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "secret": {
          "type": "string",
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). "
        },
        "url": {
          "type": "string",
          "description": "The URL to which the payloads will be delivered."
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAWebhookConfigurationForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a webhook configuration for a repository"
  },
  {
    "name": "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List deliveries for a repository webhook",
    "description": "Returns a list of webhook deliveries for a webhook configured in a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. "
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "redelivery": {
          "type": "boolean",
          "description": "Redelivery"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDeliveriesForARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List deliveries for a repository webhook"
  },
  {
    "name": "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a delivery for a repository webhook",
    "description": "Returns a delivery for a webhook configured in a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "delivery_id": {
          "type": "integer",
          "description": "Delivery Id"
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id",
        "delivery_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADeliveryForARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a delivery for a repository webhook"
  },
  {
    "name": "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Redeliver a delivery for a repository webhook",
    "description": "Redeliver a webhook delivery for a webhook configured in a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "delivery_id": {
          "type": "integer",
          "description": "Delivery Id"
        },
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id",
        "delivery_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RedeliverADeliveryForARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Redeliver a delivery for a repository webhook"
  },
  {
    "name": "GITHUB_PING_A_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_PING_A_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Ping a repository webhook",
    "description": "This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event)\n    to be sent to the hook.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "PingARepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Ping a repository webhook"
  },
  {
    "name": "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
    "enum": "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Test the push repository webhook",
    "description": "This text explains that using a specified command can trigger a hook for\n    the latest push in a repository if it's subscribed to `push` events. Without\n    subscription, it responds with 204, without a test POST.",
    "parameters": {
      "type": "object",
      "properties": {
        "hook_id": {
          "type": "integer",
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "hook_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "TestThePushRepositoryWebhookResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Test the push repository webhook"
  },
  {
    "name": "GITHUB_GET_AN_IMPORT_STATUS",
    "enum": "GITHUB_GET_AN_IMPORT_STATUS",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an import status",
    "description": "The import endpoint will be deprecated on April 12, 2024, due to low usage.\n    It involves steps from detecting to completion and reports issues like `auth_failed`.\n    For alternatives, see the changelog.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnImportStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an import status"
  },
  {
    "name": "GITHUB_START_AN_IMPORT",
    "enum": "GITHUB_START_AN_IMPORT",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Start an import",
    "description": "Use GitHub Importer for source imports to a repository. If the repository\n    has GitHub Actions, the import will fail with a 422 error. This feature\n    is deprecated and will be removed on April 12, 2024, due to low usage and\n    available alternatives.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tfvc_project": {
          "type": "string",
          "description": "For a tfvc import, the name of the project that is being imported."
        },
        "vcs": {
          "type": "string",
          "description": ""
        },
        "vcs_password": {
          "type": "string",
          "description": "If authentication is required, the password to provide to `vcs_url`."
        },
        "vcs_url": {
          "type": "string",
          "description": "The URL of the originating repository."
        },
        "vcs_username": {
          "type": "string",
          "description": "If authentication is required, the username to provide to `vcs_url`."
        }
      },
      "required": [
        "owner",
        "repo",
        "vcs_url"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StartAnImportResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Start an import"
  },
  {
    "name": "GITHUB_UPDATE_AN_IMPORT",
    "enum": "GITHUB_UPDATE_AN_IMPORT",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an import",
    "description": "API enables updating imports with credentials or project selection. Without\n    parameters, it restarts imports. For multi-project servers, use `project_choices`.\n    The endpoint will be deprecated after April 12, 2024. Check changelog for\n    more info.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tfvc_project": {
          "type": "string",
          "description": "For a tfvc import, the name of the project that is being imported."
        },
        "vcs": {
          "type": "string",
          "description": ""
        },
        "vcs_password": {
          "type": "string",
          "description": "The password to provide to the originating repository."
        },
        "vcs_username": {
          "type": "string",
          "description": "The username to provide to the originating repository."
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnImportResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an import"
  },
  {
    "name": "GITHUB_CANCEL_AN_IMPORT",
    "enum": "GITHUB_CANCEL_AN_IMPORT",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Cancel an import",
    "description": "The import feature for repositories is deprecated due to low usage and alternatives,\n    ceasing on April 12, 2024. More info can be found in the changelog.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CancelAnImportResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Cancel an import"
  },
  {
    "name": "GITHUB_GET_COMMIT_AUTHORS",
    "enum": "GITHUB_GET_COMMIT_AUTHORS",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get commit authors",
    "description": "Different source control systems have varied author identification methods,\n    leading to inaccuracies in author mapping. GitHub Importer tries to fix\n    this, but will be deprecated by April 12, 2024, due to low usage. An endpoint\n    for accurate mapping exists.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "integer",
          "description": "A user ID. Only return users with an ID greater than this ID."
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetCommitAuthorsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get commit authors"
  },
  {
    "name": "GITHUB_MAP_A_COMMIT_AUTHOR",
    "enum": "GITHUB_MAP_A_COMMIT_AUTHOR",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Map a commit author",
    "description": "Update an author's identity in your application before pushing new commits.\n    The endpoint will be deprecated on April 12, 2024, due to low usage. See\n    the changelog for alternatives.",
    "parameters": {
      "type": "object",
      "properties": {
        "author_id": {
          "type": "integer",
          "description": "Author Id"
        },
        "email": {
          "type": "string",
          "description": "The new Git author email."
        },
        "name": {
          "type": "string",
          "description": "The new Git author name."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "author_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MapACommitAuthorResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Map a commit author"
  },
  {
    "name": "GITHUB_GET_LARGE_FILES",
    "enum": "GITHUB_GET_LARGE_FILES",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get large files",
    "description": "This endpoint, listing files over 100MB from imports, is deprecated due\n    to low use and alternatives. It'll be discontinued on April 12, 2024. Details\n    at [changelog](https://gh.io/source-imports-api-deprecation).",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetLargeFilesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get large files"
  },
  {
    "name": "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
    "enum": "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update git lfs preference",
    "description": "Import repositories with files over 100MB from SVN, Mercurial, and TFS using\n    Git LFS. Note: This feature will be deprecated on April 12, 2024. More details\n    and alternatives are in the changelog.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "use_lfs": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "use_lfs"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateGitLfsPreferenceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update git lfs preference"
  },
  {
    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get interaction restrictions for a repository",
    "description": "Shows which type of GitHub user can interact with this repository and when\n    the restriction expires. If there are no restrictions, you will see an empty\n    response.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetInteractionRestrictionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get interaction restrictions for a repository"
  },
  {
    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set interaction restrictions for a repository",
    "description": "This text outlines how to restrict interactions in a GitHub repository to\n    specific user types. It requires owner or admin access. Setting restrictions\n    when there's already a limit at the user/organization level results in a\n    `409 Conflict` error.",
    "parameters": {
      "type": "object",
      "properties": {
        "expiry": {
          "type": "string",
          "description": ""
        },
        "limit": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "limit"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetInteractionRestrictionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set interaction restrictions for a repository"
  },
  {
    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "enum": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove interaction restrictions for a repository",
    "description": "This text outlines the process for removing interaction restrictions from\n    a repository, requiring owner or admin access. Attempting to change limits\n    at the user or organization level without proper permissions results in\n    a `409 Conflict` response.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveInteractionRestrictionsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove interaction restrictions for a repository"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_INVITATIONS",
    "enum": "GITHUB_LIST_REPOSITORY_INVITATIONS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository invitations",
    "description": "When authenticating as a user with admin rights to a repository, this endpoint\n    will list all currently open repository invitations.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryInvitationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository invitations"
  },
  {
    "name": "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
    "enum": "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a repository invitation",
    "description": "Update GitHub repo invitations by specifying user permissions (read, write,\n    admin) through the path `{owner}/{repo}/invitations/{invitation_id}`. More\n    info on GitHub Docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "integer",
          "description": "The unique identifier of the invitation."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "permissions": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "invitation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateARepositoryInvitationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a repository invitation"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY_INVITATION",
    "enum": "GITHUB_DELETE_A_REPOSITORY_INVITATION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository invitation",
    "description": "Delete a repository invitation by specifying the repo's owner, repository\n    name, and invitation ID. For detailed API usage, visit: https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "integer",
          "description": "The unique identifier of the invitation."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "invitation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositoryInvitationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository invitation"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_ISSUES",
    "enum": "GITHUB_LIST_REPOSITORY_ISSUES",
    "tags": [
      "issues",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository issues",
    "description": "GitHub's \"Issues\" endpoint lists only open issues but may include pull requests,\n    identifiable by the `pull_request` key. Use \"List pull requests\" for PR\n    IDs. Supports various media types for markdown representation.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. "
        },
        "creator": {
          "type": "string",
          "description": "The user that created the issue."
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "labels": {
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`"
        },
        "mentioned": {
          "type": "string",
          "description": "A user that\"s mentioned in the issue."
        },
        "milestone": {
          "type": "string",
          "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryIssuesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository issues"
  },
  {
    "name": "GITHUB_ISSUES_LIST_FOR_REPO",
    "enum": "GITHUB_ISSUES_LIST_FOR_REPO",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository issues",
    "description": "GitHub's \"Issues\" endpoint lists only open issues but may include pull requests,\n    identifiable by the `pull_request` key. Use \"List pull requests\" for PR\n    IDs. Supports various media types for markdown representation.\u003c\u003cDEPRECATED\n    use list_repository_issues\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. "
        },
        "creator": {
          "type": "string",
          "description": "The user that created the issue."
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "labels": {
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`"
        },
        "mentioned": {
          "type": "string",
          "description": "A user that\"s mentioned in the issue."
        },
        "milestone": {
          "type": "string",
          "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryIssuesResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List repository issues"
  },
  {
    "name": "GITHUB_CREATE_AN_ISSUE",
    "enum": "GITHUB_CREATE_AN_ISSUE",
    "tags": [
      "issues",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an issue",
    "description": "Pull access users can create issues unless disabled. API may return `410\n    Gone` if issues off. Excessive endpoint use can trigger rate limiting. It\n    supports raw, text, HTML formats for return data.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ "
        },
        "assignees": {
          "type": "array",
          "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ "
        },
        "body": {
          "type": "string",
          "description": "The contents of the issue."
        },
        "labels": {
          "type": "array",
          "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ "
        },
        "milestone": {
          "type": "string",
          "description": "Milestone"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "title": {
          "type": "string",
          "description": "The title of the issue."
        }
      },
      "required": [
        "owner",
        "repo",
        "title"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an issue"
  },
  {
    "name": "GITHUB_ISSUES_CREATE",
    "enum": "GITHUB_ISSUES_CREATE",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an issue",
    "description": "Pull access users can create issues unless disabled. API may return `410\n    Gone` if issues off. Excessive endpoint use can trigger rate limiting. It\n    supports raw, text, HTML formats for return data.\u003c\u003cDEPRECATED use create_an_issue\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ "
        },
        "assignees": {
          "type": "array",
          "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ "
        },
        "body": {
          "type": "string",
          "description": "The contents of the issue."
        },
        "labels": {
          "type": "array",
          "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ "
        },
        "milestone": {
          "type": "string",
          "description": "Milestone"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "title": {
          "type": "string",
          "description": "The title of the issue."
        }
      },
      "required": [
        "owner",
        "repo",
        "title"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnIssueResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create an issue"
  },
  {
    "name": "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issue comments for a repository",
    "description": "The REST API lists comments on repository issues and pull requests, treating\n    all pull requests as issues but not vice versa. Comments are sorted by ID,\n    with different media types available for response formats, including raw\n    markdown, text, and HTML.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssueCommentsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List issue comments for a repository"
  },
  {
    "name": "GITHUB_GET_AN_ISSUE_COMMENT",
    "enum": "GITHUB_GET_AN_ISSUE_COMMENT",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an issue comment",
    "description": "The REST API allows fetching comments on issues and PRs, noting that not\n    all issues are PRs. It supports several media types for different markdown\n    representations: raw, text, HTML, and a full version combining all.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an issue comment"
  },
  {
    "name": "GITHUB_UPDATE_AN_ISSUE_COMMENT",
    "enum": "GITHUB_UPDATE_AN_ISSUE_COMMENT",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an issue comment",
    "description": "The REST API lets you update comments on issues and PRs; PRs are issues,\n    but not all issues are PRs. It supports media types for different representations\n    of markdown: raw, text, HTML, or all.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The contents of the comment."
        },
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an issue comment"
  },
  {
    "name": "GITHUB_DELETE_AN_ISSUE_COMMENT",
    "enum": "GITHUB_DELETE_AN_ISSUE_COMMENT",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an issue comment",
    "description": "You can use the REST API to delete comments on issues and pull requests.\n    Every pull request is an issue, but not every issue is a pull request.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an issue comment"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
    "enum": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for an issue comment",
    "description": "List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for an issue comment"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
    "enum": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for an issue comment",
    "description": "Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).\n    A response with an HTTP `200` status means that you already added the reaction\n    type to this issue comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for an issue comment"
  },
  {
    "name": "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
    "enum": "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an issue comment reaction",
    "description": "You can delete a reaction to an issue comment by specifying `repository_id`\n    using the route `DELETE /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnIssueCommentReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an issue comment reaction"
  },
  {
    "name": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issue events for a repository",
    "description": "Lists events for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssueEventsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List issue events for a repository"
  },
  {
    "name": "GITHUB_ISSUES_LIST_EVENTS_FOR_REPO",
    "enum": "GITHUB_ISSUES_LIST_EVENTS_FOR_REPO",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issue events for a repository",
    "description": "Lists events for a repository.\u003c\u003cDEPRECATED use list_issue_events_for_a_repository\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssueEventsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List issue events for a repository"
  },
  {
    "name": "GITHUB_GET_AN_ISSUE_EVENT",
    "enum": "GITHUB_GET_AN_ISSUE_EVENT",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an issue event",
    "description": "Gets a single event by the event id.",
    "parameters": {
      "type": "object",
      "properties": {
        "event_id": {
          "type": "integer",
          "description": "Event Id"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "event_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnIssueEventResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an issue event"
  },
  {
    "name": "GITHUB_GET_AN_ISSUE",
    "enum": "GITHUB_GET_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an issue",
    "description": "GitHub API marks issue transfers with `301`, restricts access with `404`,\n    signals deletions with `410`, and tracks updates via the `issues` webhook.\n    PRs are tagged as issues with a `pull_request` key, offering different media\n    response types.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an issue"
  },
  {
    "name": "GITHUB_ISSUES_GET",
    "enum": "GITHUB_ISSUES_GET",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an issue",
    "description": "GitHub API marks issue transfers with `301`, restricts access with `404`,\n    signals deletions with `410`, and tracks updates via the `issues` webhook.\n    PRs are tagged as issues with a `pull_request` key, offering different media\n    response types.\u003c\u003cDEPRECATED use get_an_issue\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnIssueResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get an issue"
  },
  {
    "name": "GITHUB_UPDATE_AN_ISSUE",
    "enum": "GITHUB_UPDATE_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an issue",
    "description": "Issue owners and users with push access can edit issues. The endpoint supports\n    different media types for markdown formatting, including raw, text, HTML\n    representations, and a combination of all.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Username to assign to this issue. **This field is deprecated.**"
        },
        "assignees": {
          "type": "array",
          "description": "Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. "
        },
        "body": {
          "type": "string",
          "description": "The contents of the issue."
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "labels": {
          "type": "array",
          "description": "Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. "
        },
        "milestone": {
          "type": "string",
          "description": "Milestone"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "state_reason": {
          "type": "string",
          "description": ""
        },
        "title": {
          "type": "string",
          "description": "The title of the issue."
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an issue"
  },
  {
    "name": "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE",
    "enum": "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add assignees to an issue",
    "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue\n    are not replaced.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignees": {
          "type": "array",
          "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ "
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddAssigneesToAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add assignees to an issue"
  },
  {
    "name": "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
    "enum": "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove assignees from an issue",
    "description": "Removes one or more assignees from an issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignees": {
          "type": "array",
          "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ "
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAssigneesFromAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove assignees from an issue"
  },
  {
    "name": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
    "enum": "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a user can be assigned to a issue",
    "description": "Checks if a user has permission to be assigned to a specific issue. If the\n    `assignee` can be assigned to this issue, a `204` status code with no content\n    is returned. Otherwise a `404` status code is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "assignee": {
          "type": "string",
          "description": "Assignee"
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "assignee"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAUserCanBeAssignedToAIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a user can be assigned to a issue"
  },
  {
    "name": "GITHUB_LIST_ISSUE_COMMENTS",
    "enum": "GITHUB_LIST_ISSUE_COMMENTS",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issue comments",
    "description": "The REST API enables listing comments on issues \u0026 pull requests, distinguishing\n    between them. Comments are ID-sorted. It supports various response formats\n    like markdown, text, HTML, or mixed.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssueCommentsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List issue comments"
  },
  {
    "name": "GITHUB_CREATE_AN_ISSUE_COMMENT",
    "enum": "GITHUB_CREATE_AN_ISSUE_COMMENT",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an issue comment",
    "description": "The REST API allows creating comments on issues and PRs, noting that all\n    PRs are issues, but not vice versa. It can trigger notifications and may\n    face rate limits. Supports various media types for responses, including\n    raw, text, HTML, or a combination.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The contents of the comment."
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create an issue comment"
  },
  {
    "name": "GITHUB_ISSUES_CREATE_COMMENT",
    "enum": "GITHUB_ISSUES_CREATE_COMMENT",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create an issue comment",
    "description": "The REST API allows creating comments on issues and PRs, noting that all\n    PRs are issues, but not vice versa. It can trigger notifications and may\n    face rate limits. Supports various media types for responses, including\n    raw, text, HTML, or a combination.\u003c\u003cDEPRECATED use create_an_issue_comment\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The contents of the comment."
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAnIssueCommentResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create an issue comment"
  },
  {
    "name": "GITHUB_LIST_ISSUE_EVENTS",
    "enum": "GITHUB_LIST_ISSUE_EVENTS",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List issue events",
    "description": "Lists all events for an issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListIssueEventsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List issue events"
  },
  {
    "name": "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
    "enum": "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List labels for an issue",
    "description": "Lists all labels for an issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListLabelsForAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List labels for an issue"
  },
  {
    "name": "GITHUB_ADD_LABELS_TO_AN_ISSUE",
    "enum": "GITHUB_ADD_LABELS_TO_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add labels to an issue",
    "description": "Adds labels to an issue. If you provide an empty array of labels, all labels\n    are removed from the issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddLabelsToAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add labels to an issue"
  },
  {
    "name": "GITHUB_SET_LABELS_FOR_AN_ISSUE",
    "enum": "GITHUB_SET_LABELS_FOR_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set labels for an issue",
    "description": "Removes any previous labels and sets the new labels for an issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetLabelsForAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set labels for an issue"
  },
  {
    "name": "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
    "enum": "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove all labels from an issue",
    "description": "Removes all labels from an issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAllLabelsFromAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove all labels from an issue"
  },
  {
    "name": "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
    "enum": "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a label from an issue",
    "description": "Removes the specified label from the issue, and returns the remaining labels\n    on the issue. This endpoint returns a `404 Not Found` status if the label\n    does not exist.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveALabelFromAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a label from an issue"
  },
  {
    "name": "GITHUB_LOCK_AN_ISSUE",
    "enum": "GITHUB_LOCK_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Lock an issue",
    "description": "Users with push access can lock conversations in issues or pull requests.\n    Without parameters, set `Content-Length` to zero. More info at GitHub's\n    REST API guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "lock_reason": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "LockAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Lock an issue"
  },
  {
    "name": "GITHUB_UNLOCK_AN_ISSUE",
    "enum": "GITHUB_UNLOCK_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unlock an issue",
    "description": "Users with push access can unlock an issue's conversation.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnlockAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unlock an issue"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
    "enum": "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for an issue",
    "description": "List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for an issue"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
    "enum": "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for an issue",
    "description": "Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).\n    A response with an HTTP `200` status means that you already added the reaction\n    type to this issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for an issue"
  },
  {
    "name": "GITHUB_DELETE_AN_ISSUE_REACTION",
    "enum": "GITHUB_DELETE_AN_ISSUE_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an issue reaction",
    "description": "**Note:** You can also specify a repository by `repository_id` using the\n    route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n    Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnIssueReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an issue reaction"
  },
  {
    "name": "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
    "enum": "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List timeline events for an issue",
    "description": "List all timeline events for an issue.",
    "parameters": {
      "type": "object",
      "properties": {
        "issue_number": {
          "type": "integer",
          "description": "The number that identifies the issue."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "issue_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTimelineEventsForAnIssueResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List timeline events for an issue"
  },
  {
    "name": "GITHUB_LIST_DEPLOY_KEYS",
    "enum": "GITHUB_LIST_DEPLOY_KEYS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List deploy keys",
    "description": "This GitHub endpoint lists a repository's deploy keys, identified by `owner`\n    and `repo`, with pagination supported through `per_page` and `page`. It\n    provides key details like id, content, and creation date. See documentation\n    for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDeployKeysResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List deploy keys"
  },
  {
    "name": "GITHUB_CREATE_A_DEPLOY_KEY",
    "enum": "GITHUB_CREATE_A_DEPLOY_KEY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a deploy key",
    "description": "You can create a read-only deploy key.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The contents of the key."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "read_only": {
          "type": "boolean",
          "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.      Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "title": {
          "type": "string",
          "description": "A name for the key."
        }
      },
      "required": [
        "owner",
        "repo",
        "key"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADeployKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a deploy key"
  },
  {
    "name": "GITHUB_GET_A_DEPLOY_KEY",
    "enum": "GITHUB_GET_A_DEPLOY_KEY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a deploy key",
    "description": "Get details of a GitHub repository deploy key by supplying owner, repo,\n    and key ID. Documentation available at GitHub's REST API page. Supports\n    JSON format for key data and metadata.",
    "parameters": {
      "type": "object",
      "properties": {
        "key_id": {
          "type": "integer",
          "description": "The unique identifier of the key."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADeployKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a deploy key"
  },
  {
    "name": "GITHUB_DELETE_A_DEPLOY_KEY",
    "enum": "GITHUB_DELETE_A_DEPLOY_KEY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a deploy key",
    "description": "Deploy keys are immutable. If you need to update a key, remove the key and\n    create a new one instead.",
    "parameters": {
      "type": "object",
      "properties": {
        "key_id": {
          "type": "integer",
          "description": "The unique identifier of the key."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADeployKeyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a deploy key"
  },
  {
    "name": "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List labels for a repository",
    "description": "Lists all labels for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListLabelsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List labels for a repository"
  },
  {
    "name": "GITHUB_CREATE_A_LABEL",
    "enum": "GITHUB_CREATE_A_LABEL",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a label",
    "description": "Creates a label for the specified repository with the given name and color.\n    The name and color parameters are required. The color must be a valid [hexadecimal\n    color code](http://www.color-hex.com/).",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. "
        },
        "description": {
          "type": "string",
          "description": "A short description of the label. Must be 100 characters or fewer."
        },
        "name": {
          "type": "string",
          "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\" "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateALabelResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a label"
  },
  {
    "name": "GITHUB_GET_A_LABEL",
    "enum": "GITHUB_GET_A_LABEL",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a label",
    "description": "Gets a label using the given name.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetALabelResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a label"
  },
  {
    "name": "GITHUB_UPDATE_A_LABEL",
    "enum": "GITHUB_UPDATE_A_LABEL",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a label",
    "description": "Updates a label using the given label name.",
    "parameters": {
      "type": "object",
      "properties": {
        "color": {
          "type": "string",
          "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. "
        },
        "description": {
          "type": "string",
          "description": "A short description of the label. Must be 100 characters or fewer."
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "new_name": {
          "type": "string",
          "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\" "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateALabelResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a label"
  },
  {
    "name": "GITHUB_DELETE_A_LABEL",
    "enum": "GITHUB_DELETE_A_LABEL",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a label",
    "description": "Deletes a label using the given label name.",
    "parameters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteALabelResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a label"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_LANGUAGES",
    "enum": "GITHUB_LIST_REPOSITORY_LANGUAGES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository languages",
    "description": "Lists languages for the specified repository. The value shown for each language\n    is the number of bytes of code written in that language.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryLanguagesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository languages"
  },
  {
    "name": "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
    "tags": [
      "licenses"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the license for a repository",
    "description": "This method fetches a repository's license content, if detected. It supports\n    custom media types for returning the license either as raw text or HTML.\n    More details on media types at GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/\u003cbranch name\u003e` or simply `\u003cbranch name\u003e`. To reference a pull request use `refs/pull/\u003cnumber\u003e/merge`. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheLicenseForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the license for a repository"
  },
  {
    "name": "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
    "enum": "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Sync a fork branch with the upstream repository",
    "description": "Sync a branch of a forked repository to keep it up-to-date with the upstream\n    repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch which should be updated to match upstream."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SyncAForkBranchWithTheUpstreamRepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Sync a fork branch with the upstream repository"
  },
  {
    "name": "GITHUB_MERGE_A_BRANCH",
    "enum": "GITHUB_MERGE_A_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Merge a branch",
    "description": "GitHub's endpoint merges a branch by requiring the repo's owner, name, and\n    JSON details (base, head, optional message). It returns status 201 with\n    commit info on success, or errors for issues like missing branches, conflicts,\n    forbidden actions, or spam.",
    "parameters": {
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "description": "The name of the base branch that the head will be merged into."
        },
        "commit_message": {
          "type": "string",
          "description": "Commit message to use for the merge commit. If omitted, a default message will be used. "
        },
        "head": {
          "type": "string",
          "description": "The head to merge. This can be a branch name or a commit SHA1."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "base",
        "head"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MergeABranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Merge a branch"
  },
  {
    "name": "GITHUB_LIST_MILESTONES",
    "enum": "GITHUB_LIST_MILESTONES",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List milestones",
    "description": "Lists milestones for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListMilestonesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List milestones"
  },
  {
    "name": "GITHUB_CREATE_A_MILESTONE",
    "enum": "GITHUB_CREATE_A_MILESTONE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a milestone",
    "description": "Creates a milestone.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the milestone."
        },
        "due_on": {
          "type": "string",
          "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "title": {
          "type": "string",
          "description": "The title of the milestone."
        }
      },
      "required": [
        "owner",
        "repo",
        "title"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAMilestoneResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a milestone"
  },
  {
    "name": "GITHUB_GET_A_MILESTONE",
    "enum": "GITHUB_GET_A_MILESTONE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a milestone",
    "description": "Gets a milestone using the given milestone number.",
    "parameters": {
      "type": "object",
      "properties": {
        "milestone_number": {
          "type": "integer",
          "description": "The number that identifies the milestone."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "milestone_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAMilestoneResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a milestone"
  },
  {
    "name": "GITHUB_UPDATE_A_MILESTONE",
    "enum": "GITHUB_UPDATE_A_MILESTONE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a milestone",
    "description": "Update a milestone in a GitHub repo by specifying its number. Supports changing\n    its title, state, description, and due date. Refer to [GitHub Docs](https://docs.github.com/rest/issues/milestones#update-a-milestone)\n    for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A description of the milestone."
        },
        "due_on": {
          "type": "string",
          "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "milestone_number": {
          "type": "integer",
          "description": "The number that identifies the milestone."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "title": {
          "type": "string",
          "description": "The title of the milestone."
        }
      },
      "required": [
        "owner",
        "repo",
        "milestone_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAMilestoneResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a milestone"
  },
  {
    "name": "GITHUB_DELETE_A_MILESTONE",
    "enum": "GITHUB_DELETE_A_MILESTONE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a milestone",
    "description": "Deletes a milestone using the given milestone number.",
    "parameters": {
      "type": "object",
      "properties": {
        "milestone_number": {
          "type": "integer",
          "description": "The number that identifies the milestone."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "milestone_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAMilestoneResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a milestone"
  },
  {
    "name": "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
    "enum": "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List labels for issues in a milestone",
    "description": "Lists labels for issues in a milestone.",
    "parameters": {
      "type": "object",
      "properties": {
        "milestone_number": {
          "type": "integer",
          "description": "The number that identifies the milestone."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "milestone_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListLabelsForIssuesInAMilestoneResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List labels for issues in a milestone"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository notifications for the authenticated user",
    "description": "Lists all notifications for the current user in the specified repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "all": {
          "type": "boolean",
          "description": "If `true`, show notifications marked as read."
        },
        "before": {
          "type": "string",
          "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "participating": {
          "type": "boolean",
          "description": "If `true`, only shows notifications in which the user is directly participating or mentioned. "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryNotificationsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository notifications for the authenticated user"
  },
  {
    "name": "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
    "enum": "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Mark repository notifications as read",
    "description": "Marks repository notifications as \"read\" for a user. A `202 Accepted` status\n    signals the start of marking notifications. To check remaining unread notifications,\n    use the List repository notifications endpoint with `all=false`.",
    "parameters": {
      "type": "object",
      "properties": {
        "last_read_at": {
          "type": "string",
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MarkRepositoryNotificationsAsReadResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Mark repository notifications as read"
  },
  {
    "name": "GITHUB_GET_A_GITHUB_PAGES_SITE",
    "enum": "GITHUB_GET_A_GITHUB_PAGES_SITE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a github pages site",
    "description": "Gets information about a GitHub Pages site. OAuth app tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGithubPagesSiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a github pages site"
  },
  {
    "name": "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
    "enum": "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a github pages site",
    "description": "Summary: Configures a GitHub Pages site, requiring the user to be a repository\n    admin, maintainer, or have specific permission. OAuth app and classic personal\n    access tokens need the `repo` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "build_type": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "source__branch": {
          "type": "string",
          "description": "The repository branch used to publish your site\"s source files."
        },
        "source__path": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGithubPagesSiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a github pages site"
  },
  {
    "name": "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
    "enum": "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update information about a github pages site",
    "description": "Updates GitHub Pages site info require the user to be an admin, maintainer,\n    or have specific permission, with OAuth or personal access tokens needing\n    'repo' scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "build_type": {
          "type": "string",
          "description": ""
        },
        "cname": {
          "type": "string",
          "description": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/).\" "
        },
        "https_enforced": {
          "type": "boolean",
          "description": "Specify whether HTTPS should be enforced for the repository."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "source": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateInformationAboutAGithubPagesSiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update information about a github pages site"
  },
  {
    "name": "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
    "enum": "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a github pages site",
    "description": "This text explains how to delete a GitHub Pages site, requiring the user\n    to be a repository admin, maintainer, or have specific permissions. OAuth\n    or personal access tokens with 'repo' scope are needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAGithubPagesSiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a github pages site"
  },
  {
    "name": "GITHUB_LIST_GITHUB_PAGES_BUILDS",
    "enum": "GITHUB_LIST_GITHUB_PAGES_BUILDS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List github pages builds",
    "description": "Lists builts of a GitHub Pages site. OAuth app tokens and personal access\n    tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGithubPagesBuildsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List github pages builds"
  },
  {
    "name": "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
    "enum": "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Request a github pages build",
    "description": "Request site builds from the latest revision on the default branch without\n    extra commits. Useful for diagnosing build issues. Limited to one concurrent\n    build per repository and requester; additional requests are queued.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RequestAGithubPagesBuildResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Request a github pages build"
  },
  {
    "name": "GITHUB_GET_LATEST_PAGES_BUILD",
    "enum": "GITHUB_GET_LATEST_PAGES_BUILD",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get latest pages build",
    "description": "Gets information about the single most recent build of a GitHub Pages site.\n    OAuth app tokens and personal access tokens (classic) need the `repo` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetLatestPagesBuildResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get latest pages build"
  },
  {
    "name": "GITHUB_GET_GITHUB_PAGES_BUILD",
    "enum": "GITHUB_GET_GITHUB_PAGES_BUILD",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github pages build",
    "description": "Gets information about a GitHub Pages build. OAuth app tokens and personal\n    access tokens (classic) need the `repo` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "build_id": {
          "type": "integer",
          "description": "Build Id"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "build_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubPagesBuildResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github pages build"
  },
  {
    "name": "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
    "enum": "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a github pages deployment",
    "description": "Create a GitHub Pages deployment for a repository. The authenticated user\n    must have write permission to the repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "type": "integer",
          "description": "The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required. "
        },
        "artifact_url": {
          "type": "string",
          "description": "The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required. "
        },
        "environment": {
          "type": "string",
          "description": "The target environment for this GitHub Pages deployment."
        },
        "oidc_token": {
          "type": "string",
          "description": "The OIDC token issued by GitHub Actions certifying the origin of the deployment. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pages_build_version": {
          "type": "string",
          "description": "A unique string that represents the version of the build for this deployment. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "oidc_token"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGithubPagesDeploymentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a github pages deployment"
  },
  {
    "name": "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
    "enum": "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the status of a github pages deployment",
    "description": "Gets the current status of a GitHub Pages deployment. The authenticated\n    user must have read permission for the GitHub Pages site.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pages_deployment_id": {
          "type": "integer",
          "description": "The ID of the Pages deployment. You can also give the commit SHA of the deployment. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pages_deployment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheStatusOfAGithubPagesDeploymentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the status of a github pages deployment"
  },
  {
    "name": "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
    "enum": "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Cancel a github pages deployment",
    "description": "Cancels a GitHub Pages deployment. The authenticated user must have write\n    permissions for the GitHub Pages site.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pages_deployment_id": {
          "type": "integer",
          "description": "The ID of the Pages deployment. You can also give the commit SHA of the deployment. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pages_deployment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CancelAGithubPagesDeploymentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Cancel a github pages deployment"
  },
  {
    "name": "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
    "enum": "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a dns health check for github pages",
    "description": "This endpoint verifies the DNS `CNAME` record for GitHub Pages, initially\n    responding with `202 Accepted` and then `200 OK`. Access is restricted to\n    users with the right permissions, needing `repo` scope for OAuth and classic\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADnsHealthCheckForGithubPagesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a dns health check for github pages"
  },
  {
    "name": "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
    "enum": "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Checkprivatevulnerabilityreportingstatus",
    "description": "This text describes a function that checks if private vulnerability reporting\n    is enabled in a repository, with a link to GitHub's documentation for evaluating\n    repository security settings.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckPrivateVulnerabilityReportingStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Checkprivatevulnerabilityreportingstatus"
  },
  {
    "name": "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
    "enum": "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enable private vulnerability reporting for a repository",
    "description": "This feature allows secure vulnerability reporting for repositories by users\n    with admin access. For details, visit the GitHub guide on private vulnerability\n    reporting.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnablePrivateVulnerabilityReportingForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enable private vulnerability reporting for a repository"
  },
  {
    "name": "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
    "enum": "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Disable private vulnerability reporting for a repository",
    "description": "Disabling private vulnerability reporting requires admin access to the repository.\n    For more info, refer to the GitHub guide on privately reporting security\n    issues.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DisablePrivateVulnerabilityReportingForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Disable private vulnerability reporting for a repository"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_PROJECTS",
    "enum": "GITHUB_LIST_REPOSITORY_PROJECTS",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository projects",
    "description": "Lists the projects in a repository. Returns a `404 Not Found` status if\n    projects are disabled in the repository. If you do not have sufficient privileges\n    to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryProjectsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository projects"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_PROJECT",
    "enum": "GITHUB_CREATE_A_REPOSITORY_PROJECT",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository project",
    "description": "This text outlines the process of creating a repository project board. It\n    notes that a `410 Gone` status appears if projects are disabled or if there\n    are no classic projects. A lack of privileges results in a `401 Unauthorized`\n    or `410 Gone` status.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The description of the project."
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository project"
  },
  {
    "name": "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
    "enum": "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all custom property values for a repository",
    "description": "Gets all custom property values that are set for a repository. Users with\n    read access to the repository can use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllCustomPropertyValuesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all custom property values for a repository"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update custom property values for a repository",
    "description": "This API endpoint allows repository admins and users with specific permissions\n    to create or update repository custom property values; setting a value to\n    `null` removes that property.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "properties": {
          "type": "array",
          "description": "A list of custom property names and associated values to apply to the repositories. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "properties"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateCustomPropertyValuesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update custom property values for a repository"
  },
  {
    "name": "GITHUB_LIST_PULL_REQUESTS",
    "enum": "GITHUB_LIST_PULL_REQUESTS",
    "tags": [
      "pulls",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pull requests",
    "description": "Draft pull requests are available across various GitHub plans. The endpoint\n    supports custom media types like raw, text, HTML, diff, and patch representations.\n    For more details, refer to GitHub's products and media types documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "description": "Filter pulls by base branch name. Example: `gh-pages`."
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "head": {
          "type": "string",
          "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPullRequestsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List pull requests"
  },
  {
    "name": "GITHUB_PULLS_LIST",
    "enum": "GITHUB_PULLS_LIST",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pull requests",
    "description": "Draft pull requests are available across various GitHub plans. The endpoint\n    supports custom media types like raw, text, HTML, diff, and patch representations.\n    For more details, refer to GitHub's products and media types documentation.\u003c\u003cDEPRECATED\n    use list_pull_requests\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "description": "Filter pulls by base branch name. Example: `gh-pages`."
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "head": {
          "type": "string",
          "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPullRequestsResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List pull requests"
  },
  {
    "name": "GITHUB_CREATE_A_PULL_REQUEST",
    "enum": "GITHUB_CREATE_A_PULL_REQUEST",
    "tags": [
      "pulls",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a pull request",
    "description": "Draft pull requests on GitHub support various plans, need write access or\n    organization membership to modify, may trigger notifications, are rate-limited,\n    and allow custom media types for markdown representations.",
    "parameters": {
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. "
        },
        "body": {
          "type": "string",
          "description": "The contents of the pull request."
        },
        "draft": {
          "type": "boolean",
          "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more. "
        },
        "head": {
          "type": "string",
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. "
        },
        "head_repo": {
          "type": "string",
          "description": "The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization. "
        },
        "issue": {
          "type": "integer",
          "description": "An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified. "
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "description": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "title": {
          "type": "string",
          "description": "The title of the new pull request. Required unless `issue` is specified."
        }
      },
      "required": [
        "owner",
        "repo",
        "head",
        "base"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a pull request"
  },
  {
    "name": "GITHUB_PULLS_CREATE",
    "enum": "GITHUB_PULLS_CREATE",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a pull request",
    "description": "Draft pull requests on GitHub support various plans, need write access or\n    organization membership to modify, may trigger notifications, are rate-limited,\n    and allow custom media types for markdown representations.\u003c\u003cDEPRECATED use\n    create_a_pull_request\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. "
        },
        "body": {
          "type": "string",
          "description": "The contents of the pull request."
        },
        "draft": {
          "type": "boolean",
          "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more. "
        },
        "head": {
          "type": "string",
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. "
        },
        "head_repo": {
          "type": "string",
          "description": "The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization. "
        },
        "issue": {
          "type": "integer",
          "description": "An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified. "
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "description": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "title": {
          "type": "string",
          "description": "The title of the new pull request. Required unless `issue` is specified."
        }
      },
      "required": [
        "owner",
        "repo",
        "head",
        "base"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAPullRequestResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create a pull request"
  },
  {
    "name": "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
    "enum": "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List review comments in a repository",
    "description": "This endpoint lists all pull request review comments in a repository, sorted\n    by ID. It supports custom media types for different content formats: raw\n    markdown, text, HTML, or all formats. For details on media types, visit\n    GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReviewCommentsInARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List review comments in a repository"
  },
  {
    "name": "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a review comment for a pull request",
    "description": "This endpoint details review comments, supporting media types for raw markdown,\n    text, HTML representations, and all combined. For more, see GitHub's documentation\n    on media types.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAReviewCommentForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a review comment for a pull request"
  },
  {
    "name": "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a review comment for a pull request",
    "description": "This endpoint edits review comments, supporting various media types for\n    different markdown representations: raw, text only, HTML, and a full version\n    including all formats. For more, see GitHub's Media types documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The text of the reply to the review comment."
        },
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAReviewCommentForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a review comment for a pull request"
  },
  {
    "name": "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a review comment for a pull request",
    "description": "Deletes a review comment.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAReviewCommentForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a review comment for a pull request"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a pull request review comment",
    "description": "List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForAPullRequestReviewCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a pull request review comment"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a pull request review comment",
    "description": "Create a reaction to a pull request review comment as described in the GitHub\n    documentation. A successful reaction will return an HTTP `200` status, indicating\n    the reaction type was added.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForAPullRequestReviewCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a pull request review comment"
  },
  {
    "name": "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
    "enum": "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a pull request comment reaction",
    "description": "This route allows deleting a reaction from a pull request review comment\n    by specifying `repository_id`, `comment_id`, and `reaction_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "comment_id",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPullRequestCommentReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a pull request comment reaction"
  },
  {
    "name": "GITHUB_GET_A_PULL_REQUEST",
    "enum": "GITHUB_GET_A_PULL_REQUEST",
    "tags": [
      "pulls",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a pull request",
    "description": "GitHub supports draft pull requests in various plans, including Free, Pro,\n    Team, and Enterprise. It tests mergeability without branch changes, using\n    `mergeable` and `merge_commit_sha` attributes, and allows for specific media\n    types in data retrieval.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a pull request"
  },
  {
    "name": "GITHUB_PULLS_GET",
    "enum": "GITHUB_PULLS_GET",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a pull request",
    "description": "GitHub supports draft pull requests in various plans, including Free, Pro,\n    Team, and Enterprise. It tests mergeability without branch changes, using\n    `mergeable` and `merge_commit_sha` attributes, and allows for specific media\n    types in data retrieval.\u003c\u003cDEPRECATED use get_a_pull_request\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPullRequestResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get a pull request"
  },
  {
    "name": "GITHUB_UPDATE_A_PULL_REQUEST",
    "enum": "GITHUB_UPDATE_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a pull request",
    "description": "Draft pull requires write access and is available for both public and private\n    repos on various GitHub plans. GitHub also supports custom media formats\n    for markdown content responses.",
    "parameters": {
      "type": "object",
      "properties": {
        "base": {
          "type": "string",
          "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. "
        },
        "body": {
          "type": "string",
          "description": "The contents of the pull request."
        },
        "maintainer_can_modify": {
          "type": "boolean",
          "description": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "title": {
          "type": "string",
          "description": "The title of the pull request."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a pull request"
  },
  {
    "name": "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
    "enum": "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a codespace from a pull request",
    "description": "Creates a codespace owned by the authenticated user for the specified pull\n    request. OAuth app tokens and personal access tokens (classic) need the\n    `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "client_ip": {
          "type": "string",
          "description": "IP for location auto-detection when proxying a request"
        },
        "devcontainer_path": {
          "type": "string",
          "description": "Path to devcontainer.json config to use for this codespace"
        },
        "display_name": {
          "type": "string",
          "description": "Display name for this codespace"
        },
        "geo": {
          "type": "string",
          "description": ""
        },
        "idle_timeout_minutes": {
          "type": "integer",
          "description": "Time in minutes before codespace stops from inactivity"
        },
        "location": {
          "type": "string",
          "description": "The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided. "
        },
        "machine": {
          "type": "string",
          "description": "Machine type to use for this codespace"
        },
        "multi_repo_permissions_opt_out": {
          "type": "boolean",
          "description": "Whether to authorize requested permissions from devcontainer.json"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "retention_period_minutes": {
          "type": "integer",
          "description": "Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). "
        },
        "working_directory": {
          "type": "string",
          "description": "Working directory for this codespace"
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACodespaceFromAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a codespace from a pull request"
  },
  {
    "name": "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
    "enum": "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List review comments on a pull request",
    "description": "Endpoint lists pull request review comments in ascending order by ID, supporting\n    custom media types for raw, text-only, HTML rendered, and full representations\n    of markdown body. More info on media types at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReviewCommentsOnAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List review comments on a pull request"
  },
  {
    "name": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a review comment for a pull request",
    "description": "To comment on a pull request diff, use parameters `line`, `side`, `start_line`,\n    and `start_side`. Avoid using the deprecated `position`. Triggering notifications,\n    beware of rate limits. Supports custom media types for comment formatting.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The text of the review comment."
        },
        "commit_id": {
          "type": "string",
          "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. "
        },
        "in_reply_to": {
          "type": "integer",
          "description": "The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. "
        },
        "line": {
          "type": "integer",
          "description": "**Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "The relative path to the file that necessitates a comment."
        },
        "position": {
          "type": "integer",
          "description": "**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "side": {
          "type": "string",
          "description": ""
        },
        "start_line": {
          "type": "integer",
          "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. "
        },
        "start_side": {
          "type": "string",
          "description": ""
        },
        "subject_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "body",
        "commit_id",
        "path"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReviewCommentForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a review comment for a pull request"
  },
  {
    "name": "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
    "enum": "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a review comment for a pull request",
    "description": "To comment on a pull request diff, use parameters `line`, `side`, `start_line`,\n    and `start_side`. Avoid using the deprecated `position`. Triggering notifications,\n    beware of rate limits. Supports custom media types for comment formatting.\u003c\u003cDEPRECATED\n    use create_a_review_comment_for_a_pull_request\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The text of the review comment."
        },
        "commit_id": {
          "type": "string",
          "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. "
        },
        "in_reply_to": {
          "type": "integer",
          "description": "The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. "
        },
        "line": {
          "type": "integer",
          "description": "**Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "path": {
          "type": "string",
          "description": "The relative path to the file that necessitates a comment."
        },
        "position": {
          "type": "integer",
          "description": "**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file. "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "side": {
          "type": "string",
          "description": ""
        },
        "start_line": {
          "type": "integer",
          "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. "
        },
        "start_side": {
          "type": "string",
          "description": ""
        },
        "subject_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "body",
        "commit_id",
        "path"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReviewCommentForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create a review comment for a pull request"
  },
  {
    "name": "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
    "enum": "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a reply for a review comment",
    "description": "Use this endpoint to respond to primary comments on pull requests, enabling\n    notifications. Avoid quick, multiple replies to bypass rate limits. Supports\n    various content formats; refer to GitHub documentation for specific rate\n    limits and API guidelines.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The text of the review comment."
        },
        "comment_id": {
          "type": "integer",
          "description": "The unique identifier of the comment."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "comment_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReplyForAReviewCommentResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a reply for a review comment"
  },
  {
    "name": "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
    "enum": "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List commits on a pull request",
    "description": "For pull requests with over 250 commits, use the \"List commits\" endpoint\n    for a complete list. Supports custom media types like raw, text, HTML markdown,\n    and diff. See GitHub docs for more on media types and handling corrupt diffs.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommitsOnAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List commits on a pull request"
  },
  {
    "name": "GITHUB_LIST_PULL_REQUESTS_FILES",
    "enum": "GITHUB_LIST_PULL_REQUESTS_FILES",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pull requests files",
    "description": "Lists files in a pull request, up to 3000 files with 30 per page by default.\n    Supports custom media types for different representations of the markdown\n    body (raw, text, HTML, full). Maximum response: 3000 files.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPullRequestsFilesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List pull requests files"
  },
  {
    "name": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
    "enum": "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a pull request has been merged",
    "description": "Checks if a pull request has been merged into the base branch. The HTTP\n    status of the response indicates whether or not the pull request has been\n    merged; the response body is empty.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAPullRequestHasBeenMergedResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a pull request has been merged"
  },
  {
    "name": "GITHUB_PULLS_CHECK_IF_MERGED",
    "enum": "GITHUB_PULLS_CHECK_IF_MERGED",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a pull request has been merged",
    "description": "Checks if a pull request has been merged into the base branch. The HTTP\n    status of the response indicates whether or not the pull request has been\n    merged; the response body is empty.\u003c\u003cDEPRECATED use check_if_a_pull_request_has_been_merged\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAPullRequestHasBeenMergedResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Check if a pull request has been merged"
  },
  {
    "name": "GITHUB_MERGE_A_PULL_REQUEST",
    "enum": "GITHUB_MERGE_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Merge a pull request",
    "description": "This API endpoint merges a pull request, triggers notifications, and may\n    face secondary rate limiting if used too rapidly. For details, refer to\n    GitHub's rate limits and REST API best practices.",
    "parameters": {
      "type": "object",
      "properties": {
        "commit_message": {
          "type": "string",
          "description": "Extra detail to append to automatic commit message."
        },
        "commit_title": {
          "type": "string",
          "description": "Title for the automatic commit message."
        },
        "merge_method": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "SHA that pull request head must match to allow merge."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "MergeAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Merge a pull request"
  },
  {
    "name": "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all requested reviewers for a pull request",
    "description": "This text outlines how to get reviewers for a pull request. Requested reviewers\n    are listed until they submit a review, after which their reviews can be\n    found via the \"List reviews for a pull request\" operation.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllRequestedReviewersForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all requested reviewers for a pull request"
  },
  {
    "name": "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Request reviewers for a pull request",
    "description": "This endpoint requests pull request reviews from users/teams, triggering\n    notifications. Fast usage may cause rate limiting. See GitHub's API rate\n    limits and usage best practices for more information.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "reviewers": {
          "type": "array",
          "description": "An array of user `login`s that will be requested."
        },
        "team_reviewers": {
          "type": "array",
          "description": "An array of team `slug`s that will be requested."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RequestReviewersForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Request reviewers for a pull request"
  },
  {
    "name": "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
    "enum": "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove requested reviewers from a pull request",
    "description": "Removes review requests from a pull request for a given set of users and/or\n    teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "reviewers": {
          "type": "array",
          "description": "An array of user `login`s that will be removed."
        },
        "team_reviewers": {
          "type": "array",
          "description": "An array of team `slug`s that will be removed."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "reviewers"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveRequestedReviewersFromAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove requested reviewers from a pull request"
  },
  {
    "name": "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reviews for a pull request",
    "description": "This endpoint lists reviews for a pull request chronologically, supporting\n    different media types for varying representations of the markdown body,\n    including raw, text, HTML, or all.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReviewsForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reviews for a pull request"
  },
  {
    "name": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a review for a pull request",
    "description": "This API endpoint enables creation of pull request reviews and notifications.\n    Rapid usage may cause rate limiting. Use `PENDING` for draft reviews. Calculate\n    diff position for comments. Supports various response content types.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. "
        },
        "comments": {
          "type": "array",
          "description": "Use the following table to specify the location, destination, and contents of the draft review comment. "
        },
        "commit_id": {
          "type": "string",
          "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. "
        },
        "event": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a review for a pull request"
  },
  {
    "name": "GITHUB_PULLS_CREATE_REVIEW",
    "enum": "GITHUB_PULLS_CREATE_REVIEW",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a review for a pull request",
    "description": "This API endpoint enables creation of pull request reviews and notifications.\n    Rapid usage may cause rate limiting. Use `PENDING` for draft reviews. Calculate\n    diff position for comments. Supports various response content types.\u003c\u003cDEPRECATED\n    use create_a_review_for_a_pull_request\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. "
        },
        "comments": {
          "type": "array",
          "description": "Use the following table to specify the location, destination, and contents of the draft review comment. "
        },
        "commit_id": {
          "type": "string",
          "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. "
        },
        "event": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create a review for a pull request"
  },
  {
    "name": "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a review for a pull request",
    "description": "API endpoint retrieves pull request reviews by ID, supporting custom media\n    types for different formats (raw, text, HTML, full) of the review's markdown\n    body. See GitHub's \"Media types\" for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "review_id": {
          "type": "integer",
          "description": "The unique identifier of the review."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "review_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a review for a pull request"
  },
  {
    "name": "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a review for a pull request",
    "description": "This API endpoint updates review summary comments and supports custom media\n    types for different representations: raw markdown, text-only, HTML, and\n    full (includes all formats). See GitHub docs for more details.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The body text of the pull request review."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "review_id": {
          "type": "integer",
          "description": "The unique identifier of the review."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "review_id",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a review for a pull request"
  },
  {
    "name": "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a pending review for a pull request",
    "description": "Deletes unsubmitted pull request reviews. Submitted ones can't be deleted.\n    Supports custom media types for different data formats in the response.\n    See GitHub docs for more on media types.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "review_id": {
          "type": "integer",
          "description": "The unique identifier of the review."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "review_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPendingReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a pending review for a pull request"
  },
  {
    "name": "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
    "enum": "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List comments for a pull request review",
    "description": "This endpoint lists comments for a pull request review, supporting custom\n    media types for raw markdown, text-only, HTML, or full representation (raw,\n    text, and HTML) of the comment body.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "review_id": {
          "type": "integer",
          "description": "The unique identifier of the review."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "review_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCommentsForAPullRequestReviewResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List comments for a pull request review"
  },
  {
    "name": "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Dismiss a review for a pull request",
    "description": "To dismiss a pull request review on a protected branch, you must be an admin\n    or authorized. The endpoint supports multiple media types for returning\n    different formats of the review body.",
    "parameters": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string",
          "description": ""
        },
        "message": {
          "type": "string",
          "description": "The message for the pull request review dismissal"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "review_id": {
          "type": "integer",
          "description": "The unique identifier of the review."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "review_id",
        "message"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DismissAReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Dismiss a review for a pull request"
  },
  {
    "name": "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
    "enum": "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Submit a review for a pull request",
    "description": "Submits a review for a pull request with options for custom media types\n    including raw markdown, text only, HTML rendered, and full representations.\n    See docs for detailed info on creating reviews and media types.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The body text of the pull request review"
        },
        "event": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "review_id": {
          "type": "integer",
          "description": "The unique identifier of the review."
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number",
        "review_id",
        "event"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SubmitAReviewForAPullRequestResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Submit a review for a pull request"
  },
  {
    "name": "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
    "enum": "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
    "tags": [
      "pulls"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a pull request branch",
    "description": "Updates the pull request branch with the latest upstream changes by merging\n    HEAD from the base branch into the pull request branch.",
    "parameters": {
      "type": "object",
      "properties": {
        "expected_head_sha": {
          "type": "string",
          "description": "The expected SHA of the pull request\"s HEAD ref. This is the most recent commit on the pull request\"s branch. If the expected SHA does not match the pull request\"s HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/commits/commits#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request\"s current HEAD ref. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pull_number": {
          "type": "integer",
          "description": "The number that identifies the pull request."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pull_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAPullRequestBranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a pull request branch"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_README",
    "enum": "GITHUB_GET_A_REPOSITORY_README",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository readme",
    "description": "This endpoint retrieves the preferred README of a repository, supporting\n    two media types: `application/vnd.github.raw+json` for raw file contents\n    (default) and `application/vnd.github.html+json` for HTML rendered READMEs\n    using GitHub's Markup library.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default: the repository’s default branch. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryReadmeResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository readme"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
    "enum": "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository readme for a directory",
    "description": "This endpoint fetches a repository's README, offering raw file contents\n    by default (`application/vnd.github.raw+json`) or in HTML format (`application/vnd.github.html+json`),\n    utilizing GitHub's Markup library for rendering.",
    "parameters": {
      "type": "object",
      "properties": {
        "dir": {
          "type": "string",
          "description": "The alternate path to look for a README file"
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "The name of the commit/branch/tag. Default: the repository’s default branch. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "dir"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryReadmeForADirectoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository readme for a directory"
  },
  {
    "name": "GITHUB_LIST_RELEASES",
    "enum": "GITHUB_LIST_RELEASES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List releases",
    "description": "The text explains that the provided list only includes releases, not all\n    Git tags, advising to use the Repository Tags API for those. Published releases\n    are public, while draft releases info is restricted to users with push access.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReleasesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List releases"
  },
  {
    "name": "GITHUB_CREATE_A_RELEASE",
    "enum": "GITHUB_CREATE_A_RELEASE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a release",
    "description": "Users with push access can create a release, triggering notifications. Rapid\n    creation may face secondary rate limiting. For details, see GitHub's rate\n    limits and REST API best practices.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Text describing the contents of the tag."
        },
        "discussion_category_name": {
          "type": "string",
          "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\" "
        },
        "draft": {
          "type": "boolean",
          "description": "`true` to create a draft (unpublished) release, `false` to create a published one. "
        },
        "generate_release_notes": {
          "type": "boolean",
          "description": "Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes. "
        },
        "make_latest": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the release."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "prerelease": {
          "type": "boolean",
          "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag_name": {
          "type": "string",
          "description": "The name of the tag."
        },
        "target_commitish": {
          "type": "string",
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository\"s default branch. "
        }
      },
      "required": [
        "owner",
        "repo",
        "tag_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a release"
  },
  {
    "name": "GITHUB_GET_A_RELEASE_ASSET",
    "enum": "GITHUB_GET_A_RELEASE_ASSET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a release asset",
    "description": "To download an asset, set the `Accept` header to `application/octet-stream`.\n    The API may redirect (302) or stream directly (200), so clients should support\n    both responses.",
    "parameters": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "integer",
          "description": "The unique identifier of the asset."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "asset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAReleaseAssetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a release asset"
  },
  {
    "name": "GITHUB_UPDATE_A_RELEASE_ASSET",
    "enum": "GITHUB_UPDATE_A_RELEASE_ASSET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a release asset",
    "description": "Users with push access to the repository can edit a release asset.",
    "parameters": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "integer",
          "description": "The unique identifier of the asset."
        },
        "label": {
          "type": "string",
          "description": "An alternate short description of the asset. Used in place of the filename. "
        },
        "name": {
          "type": "string",
          "description": "The file name of the asset."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "state": {
          "type": "string",
          "description": "State"
        }
      },
      "required": [
        "owner",
        "repo",
        "asset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAReleaseAssetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a release asset"
  },
  {
    "name": "GITHUB_DELETE_A_RELEASE_ASSET",
    "enum": "GITHUB_DELETE_A_RELEASE_ASSET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a release asset",
    "description": "Delete a specified release asset from a GitHub repository by providing the\n    `owner`, `repo`, and `asset_id`. Access the detailed API documentation at\n    https://docs.github.com/rest/releases/assets#delete-a-release-asset.",
    "parameters": {
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "integer",
          "description": "The unique identifier of the asset."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "asset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAReleaseAssetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a release asset"
  },
  {
    "name": "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
    "enum": "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Generate release notes content for a release",
    "description": "Release notes, named and formatted in Markdown, detail changes since the\n    last release and contributors. Intended for creating new releases, they\n    are not stored but generated as needed.",
    "parameters": {
      "type": "object",
      "properties": {
        "configuration_file_path": {
          "type": "string",
          "description": "Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at \".github/release.yml\" or \".github/release.yaml\" will be used. If that is not present, the default configuration will be used. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "previous_tag_name": {
          "type": "string",
          "description": "The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag_name": {
          "type": "string",
          "description": "The tag name for the release. This can be an existing tag or a new one."
        },
        "target_commitish": {
          "type": "string",
          "description": "Specifies the commitish value that will be the target for the release\"s tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. "
        }
      },
      "required": [
        "owner",
        "repo",
        "tag_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GenerateReleaseNotesContentForAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Generate release notes content for a release"
  },
  {
    "name": "GITHUB_GET_THE_LATEST_RELEASE",
    "enum": "GITHUB_GET_THE_LATEST_RELEASE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the latest release",
    "description": "The latest published release for a repository is the most recent non-prerelease,\n    non-draft version, ordered by the `created_at` date, which is the commit\n    date, not the drafting or publishing date.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheLatestReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the latest release"
  },
  {
    "name": "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
    "enum": "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a release by tag name",
    "description": "Get a published release with the specified tag.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag": {
          "type": "string",
          "description": "tag parameter"
        }
      },
      "required": [
        "owner",
        "repo",
        "tag"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAReleaseByTagNameResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a release by tag name"
  },
  {
    "name": "GITHUB_GET_A_RELEASE",
    "enum": "GITHUB_GET_A_RELEASE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a release",
    "description": "The public release is accessible with a given release ID, providing an `upload_url`\n    for asset uploads. This URL is a hypermedia resource, detailed in GitHub's\n    REST API guide.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a release"
  },
  {
    "name": "GITHUB_UPDATE_A_RELEASE",
    "enum": "GITHUB_UPDATE_A_RELEASE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a release",
    "description": "Users with push access to the repository can edit a release.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Text describing the contents of the tag."
        },
        "discussion_category_name": {
          "type": "string",
          "description": "If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\" "
        },
        "draft": {
          "type": "boolean",
          "description": "`true` makes the release a draft, and `false` publishes the release."
        },
        "make_latest": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the release."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "prerelease": {
          "type": "boolean",
          "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release. "
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag_name": {
          "type": "string",
          "description": "The name of the tag."
        },
        "target_commitish": {
          "type": "string",
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository\"s default branch. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a release"
  },
  {
    "name": "GITHUB_DELETE_A_RELEASE",
    "enum": "GITHUB_DELETE_A_RELEASE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a release",
    "description": "Users with push access to the repository can delete a release.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a release"
  },
  {
    "name": "GITHUB_LIST_RELEASE_ASSETS",
    "enum": "GITHUB_LIST_RELEASE_ASSETS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List release assets",
    "description": "This endpoint fetches assets for a repository's release on GitHub, needing\n    repository owner, repo name, and release ID. Supports pagination with `per_page`\n    and `page`. Returns asset details like download URL and metadata. See documentation\n    for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReleaseAssetsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List release assets"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a release",
    "description": "List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a release"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a release",
    "description": "Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).\n    A response with a `Status: 200 OK` means that you already added the reaction\n    type to this release.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForAReleaseResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a release"
  },
  {
    "name": "GITHUB_DELETE_A_RELEASE_REACTION",
    "enum": "GITHUB_DELETE_A_RELEASE_REACTION",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a release reaction",
    "description": "You can delete a reaction to a GitHub release by using the route `DELETE\n    /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`,\n    specifying the repository by `repository_id`.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "reaction_id": {
          "type": "integer",
          "description": "The unique identifier of the reaction."
        },
        "release_id": {
          "type": "integer",
          "description": "The unique identifier of the release."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "release_id",
        "reaction_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAReleaseReactionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a release reaction"
  },
  {
    "name": "GITHUB_GET_RULES_FOR_A_BRANCH",
    "enum": "GITHUB_GET_RULES_FOR_A_BRANCH",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get rules for a branch",
    "description": "The text details a feature returning all active rules for a branch, real\n    or hypothetical, at any configuration level. Rules in \"evaluate\" or \"disabled\"\n    status are excluded.",
    "parameters": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "branch"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRulesForABranchResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get rules for a branch"
  },
  {
    "name": "GITHUB_GET_ALL_REPOSITORY_RULESETS",
    "enum": "GITHUB_GET_ALL_REPOSITORY_RULESETS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all repository rulesets",
    "description": "Get all the rulesets for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "includes_parents": {
          "type": "boolean",
          "description": "Include rulesets configured at higher levels that apply to this repository "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllRepositoryRulesetsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all repository rulesets"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_RULESET",
    "enum": "GITHUB_CREATE_A_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository ruleset",
    "description": "Create a ruleset for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "bypass_actors": {
          "type": "array",
          "description": "The actors that can bypass the rules in this ruleset"
        },
        "conditions__ref__name__exclude": {
          "type": "array",
          "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. "
        },
        "conditions__ref__name__include": {
          "type": "array",
          "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. "
        },
        "enforcement": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the ruleset."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "rules": {
          "type": "array",
          "description": "An array of rules within the ruleset."
        },
        "target": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "name",
        "enforcement"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository ruleset"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_RULE_SUITES",
    "enum": "GITHUB_LIST_REPOSITORY_RULE_SUITES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository rule suites",
    "description": "This text discusses managing repository-level rule evaluations, including\n    insights. For details, visit the provided GitHub documentation link.",
    "parameters": {
      "type": "object",
      "properties": {
        "actor_name": {
          "type": "string",
          "description": "The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "ref": {
          "type": "string",
          "description": "The name of the ref. Cannot contain wildcard characters. When specified, only rule evaluations triggered for this ref will be returned. "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "rule_suite_result": {
          "type": "string",
          "description": ""
        },
        "time_period": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryRuleSuitesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository rule suites"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
    "enum": "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository rule suite",
    "description": "This document provides details on obtaining rule evaluations for a repository,\n    with further guidance available on managing rulesets at a provided GitHub\n    documentation link.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "rule_suite_id": {
          "type": "integer",
          "description": "The unique identifier of the rule suite result. To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites) for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites) for organizations. "
        }
      },
      "required": [
        "owner",
        "repo",
        "rule_suite_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryRuleSuiteResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository rule suite"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_RULESET",
    "enum": "GITHUB_GET_A_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository ruleset",
    "description": "Get a ruleset for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "includes_parents": {
          "type": "boolean",
          "description": "Include rulesets configured at higher levels that apply to this repository "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "ruleset_id": {
          "type": "integer",
          "description": "The ID of the ruleset."
        }
      },
      "required": [
        "owner",
        "repo",
        "ruleset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository ruleset"
  },
  {
    "name": "GITHUB_UPDATE_A_REPOSITORY_RULESET",
    "enum": "GITHUB_UPDATE_A_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a repository ruleset",
    "description": "Update a ruleset for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "bypass_actors": {
          "type": "array",
          "description": "The actors that can bypass the rules in this ruleset"
        },
        "conditions__ref__name__exclude": {
          "type": "array",
          "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. "
        },
        "conditions__ref__name__include": {
          "type": "array",
          "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches. "
        },
        "enforcement": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the ruleset."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "rules": {
          "type": "array",
          "description": "An array of rules within the ruleset."
        },
        "ruleset_id": {
          "type": "integer",
          "description": "The ID of the ruleset."
        },
        "target": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "ruleset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateARepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a repository ruleset"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY_RULESET",
    "enum": "GITHUB_DELETE_A_REPOSITORY_RULESET",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository ruleset",
    "description": "Delete a ruleset for a repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "ruleset_id": {
          "type": "integer",
          "description": "The ID of the ruleset."
        }
      },
      "required": [
        "owner",
        "repo",
        "ruleset_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositoryRulesetResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository ruleset"
  },
  {
    "name": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY",
    "tags": [
      "secret-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List secret scanning alerts for a repository",
    "description": "This endpoint lists secret scanning alerts for repositories, requiring the\n    user to be an administrator and to use tokens with `repo`, `security_events`,\n    or `public_repo` (for public repositories) scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "resolution": {
          "type": "string",
          "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. "
        },
        "secret_type": {
          "type": "string",
          "description": "A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "validity": {
          "type": "string",
          "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSecretScanningAlertsForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List secret scanning alerts for a repository"
  },
  {
    "name": "GITHUB_GET_A_SECRET_SCANNING_ALERT",
    "enum": "GITHUB_GET_A_SECRET_SCANNING_ALERT",
    "tags": [
      "secret-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a secret scanning alert",
    "description": "To fetch a secret scanning alert, a user must be an admin of the repo or\n    its organization, and use tokens with `repo`, `security_events`, or `public_repo`\n    (for public repositories) scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetASecretScanningAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a secret scanning alert"
  },
  {
    "name": "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT",
    "enum": "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT",
    "tags": [
      "secret-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a secret scanning alert",
    "description": "This endpoint lets admins of repositories or their organizations update\n    the status of secret scanning alerts. It requires OAuth or personal access\n    tokens with `repo` or `security_events` scope for private, and `public repo`\n    for public repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "resolution": {
          "type": "string",
          "description": ""
        },
        "resolution_comment": {
          "type": "string",
          "description": "An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`. "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number",
        "state"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateASecretScanningAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a secret scanning alert"
  },
  {
    "name": "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT",
    "enum": "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT",
    "tags": [
      "secret-scanning"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List locations for a secret scanning alert",
    "description": "This endpoint displays all secret scanning alerts for eligible repositories\n    to their admins, requiring OAuth or access tokens with `repo`, `security_events`,\n    or `public_repo` for public ones.",
    "parameters": {
      "type": "object",
      "properties": {
        "alert_number": {
          "type": "integer",
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "alert_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListLocationsForASecretScanningAlertResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List locations for a secret scanning alert"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES",
    "enum": "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository security advisories",
    "description": "Users with certain roles and 'repo' or 'repository_advisories:read' scope\n    via OAuth or classic tokens can access both published and unpublished security\n    advisories in private repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "before": {
          "type": "string",
          "description": "A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "per_page": {
          "type": "integer",
          "description": "The number of advisories to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositorySecurityAdvisoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository security advisories"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY",
    "enum": "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository security advisory",
    "description": "To create a draft repository security advisory, the user must be a security\n    manager or admin of the repository. OAuth app and classic personal access\n    tokens require `repo` or `repository_advisories:write` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "credits": {
          "type": "array",
          "description": "A list of users receiving credit for their participation in the security advisory. "
        },
        "cve_id": {
          "type": "string",
          "description": "The Common Vulnerabilities and Exposures (CVE) ID."
        },
        "cvss_vector_string": {
          "type": "string",
          "description": "The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. "
        },
        "cwe_ids": {
          "type": "array",
          "description": "A list of Common Weakness Enumeration (CWE) IDs."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of what the advisory impacts."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "start_private_fork": {
          "type": "boolean",
          "description": "Whether to create a temporary private fork of the repository to collaborate on a fix. "
        },
        "summary": {
          "type": "string",
          "description": "A short summary of the advisory."
        },
        "vulnerabilities": {
          "type": "array",
          "description": "A product affected by the vulnerability detailed in a repository security advisory. "
        }
      },
      "required": [
        "owner",
        "repo",
        "summary",
        "description",
        "vulnerabilities"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositorySecurityAdvisoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository security advisory"
  },
  {
    "name": "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
    "enum": "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Privately report a security vulnerability",
    "description": "To report a security vulnerability in a repository, follow the guide on\n    private reporting at: https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability.",
    "parameters": {
      "type": "object",
      "properties": {
        "cvss_vector_string": {
          "type": "string",
          "description": "The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. "
        },
        "cwe_ids": {
          "type": "array",
          "description": "A list of Common Weakness Enumeration (CWE) IDs."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of what the advisory impacts."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "start_private_fork": {
          "type": "boolean",
          "description": "Whether to create a temporary private fork of the repository to collaborate on a fix. "
        },
        "summary": {
          "type": "string",
          "description": "A short summary of the advisory."
        },
        "vulnerabilities": {
          "type": "array",
          "description": "An array of products affected by the vulnerability detailed in a repository security advisory. "
        }
      },
      "required": [
        "owner",
        "repo",
        "summary",
        "description"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "PrivatelyReportASecurityVulnerabilityResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Privately report a security vulnerability"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY",
    "enum": "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository security advisory",
    "description": "Publicly published security advisories are freely accessible, while unpublished\n    ones require authenticated access with specific roles. Private repository\n    advisories need tokens with `repo` or `repository_advisories:read` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "ghsa_id": {
          "type": "string",
          "description": "The GHSA (GitHub Security Advisory) identifier of the advisory."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ghsa_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositorySecurityAdvisoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository security advisory"
  },
  {
    "name": "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY",
    "enum": "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a repository security advisory",
    "description": "To update a repository security advisory using its GHSA ID, the user must\n    have specific repository roles or be a collaborator with appropriate OAuth\n    or personal access token scopes (`repo` or `repository_advisories:write`).",
    "parameters": {
      "type": "object",
      "properties": {
        "collaborating_teams": {
          "type": "array",
          "description": "A list of team slugs which have been granted write access to the advisory. "
        },
        "collaborating_users": {
          "type": "array",
          "description": "A list of usernames who have been granted write access to the advisory."
        },
        "credits": {
          "type": "array",
          "description": "A list of users receiving credit for their participation in the security advisory. "
        },
        "cve_id": {
          "type": "string",
          "description": "The Common Vulnerabilities and Exposures (CVE) ID."
        },
        "cvss_vector_string": {
          "type": "string",
          "description": "The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`. "
        },
        "cwe_ids": {
          "type": "array",
          "description": "A list of Common Weakness Enumeration (CWE) IDs."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of what the advisory impacts."
        },
        "ghsa_id": {
          "type": "string",
          "description": "The GHSA (GitHub Security Advisory) identifier of the advisory."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "severity": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "summary": {
          "type": "string",
          "description": "A short summary of the advisory."
        },
        "vulnerabilities": {
          "type": "array",
          "description": "A product affected by the vulnerability detailed in a repository security advisory. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ghsa_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateARepositorySecurityAdvisoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a repository security advisory"
  },
  {
    "name": "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY",
    "enum": "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Request a cve for a repository security advisory",
    "description": "To get a CVE number for a project's security vulnerability, request it via\n    GitHub for public repositories only. The requester must be a security manager\n    or administrator with specific OAuth or personal access tokens. See more\n    on GitHub’s documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "ghsa_id": {
          "type": "string",
          "description": "The GHSA (GitHub Security Advisory) identifier of the advisory."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ghsa_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RequestACveForARepositorySecurityAdvisoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Request a cve for a repository security advisory"
  },
  {
    "name": "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
    "enum": "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
    "tags": [
      "security-advisories"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a temporary private fork",
    "description": "Create a temporary private fork to collaborate on fixing a security vulnerability\n    in your repository. **Note**: Forking a repository happens asynchronously.\n    You may have to wait up to 5 minutes before you can access the fork.",
    "parameters": {
      "type": "object",
      "properties": {
        "ghsa_id": {
          "type": "string",
          "description": "The GHSA (GitHub Security Advisory) identifier of the advisory."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ghsa_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateATemporaryPrivateForkResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a temporary private fork"
  },
  {
    "name": "GITHUB_LIST_STARGAZERS",
    "enum": "GITHUB_LIST_STARGAZERS",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List stargazers",
    "description": "This endpoint lists the people who have starred a repository and supports\n    custom media types, including one that adds a timestamp for when the star\n    was created. See GitHub's media types documentation for more details.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListStargazersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List stargazers"
  },
  {
    "name": "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
    "enum": "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List stargazers",
    "description": "This endpoint lists the people who have starred a repository and supports\n    custom media types, including one that adds a timestamp for when the star\n    was created. See GitHub's media types documentation for more details.\u003c\u003cDEPRECATED\n    use list_stargazers\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListStargazersResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List stargazers"
  },
  {
    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
    "enum": "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the weekly commit activity",
    "description": "The endpoint provides weekly aggregates of additions and deletions for repositories\n    with fewer than 10,000 commits. Repositories exceeding this limit return\n    a 422 status code.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheWeeklyCommitActivityResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the weekly commit activity"
  },
  {
    "name": "GITHUB_REPO_S_GET_CODE_FREQUENCY_STATS",
    "enum": "GITHUB_REPO_S_GET_CODE_FREQUENCY_STATS",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the weekly commit activity",
    "description": "The endpoint provides weekly aggregates of additions and deletions for repositories\n    with fewer than 10,000 commits. Repositories exceeding this limit return\n    a 422 status code.\u003c\u003cDEPRECATED use get_the_weekly_commit_activity\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheWeeklyCommitActivityResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get the weekly commit activity"
  },
  {
    "name": "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
    "enum": "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the last year of commit activity",
    "description": "Returns the last year of commit activity grouped by week. The `days` array\n    is a group of commits per day, starting on `Sunday`.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheLastYearOfCommitActivityResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the last year of commit activity"
  },
  {
    "name": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
    "enum": "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all contributor commit activity",
    "description": "The endpoint shows the total commits authored by a contributor, a weekly\n    summary (`weeks` array) of additions, deletions, and commits, starting from\n    a Unix timestamp. For repositories with 10,000+ commits, addition and deletion\n    counts will return `0`.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllContributorCommitActivityResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all contributor commit activity"
  },
  {
    "name": "GITHUB_REPO_S_GET_CONTRIBUTORS_STATS",
    "enum": "GITHUB_REPO_S_GET_CONTRIBUTORS_STATS",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all contributor commit activity",
    "description": "The endpoint shows the total commits authored by a contributor, a weekly\n    summary (`weeks` array) of additions, deletions, and commits, starting from\n    a Unix timestamp. For repositories with 10,000+ commits, addition and deletion\n    counts will return `0`.\u003c\u003cDEPRECATED use get_all_contributor_commit_activity\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllContributorCommitActivityResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get all contributor commit activity"
  },
  {
    "name": "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
    "enum": "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the weekly commit count",
    "description": "The text explains how to find total commit counts for an owner and everyone\n    (all) in the last 52 weeks, from the oldest to the most recent week (seven\n    days ago until today at UTC midnight), by subtracting the owner's commits\n    from all.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheWeeklyCommitCountResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the weekly commit count"
  },
  {
    "name": "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
    "enum": "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the hourly commit count for each day",
    "description": "The text details a format for tracking commits: `[day, hour, commits]`,\n    with days 0-6 for Sunday-Saturday and hours 0-23. Example `[2, 14, 25]`\n    represents 25 commits at 2pm on Tuesdays, based on commit timestamps.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheHourlyCommitCountForEachDayResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the hourly commit count for each day"
  },
  {
    "name": "GITHUB_CREATE_A_COMMIT_STATUS",
    "enum": "GITHUB_CREATE_A_COMMIT_STATUS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a commit status",
    "description": "Users with push access in a repository can create commit statuses for a\n    given SHA. Note: there is a limit of 1000 statuses per `sha` and `context`\n    within a repository. Attempts to create more than 1000 statuses will result\n    in a validation error.",
    "parameters": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "A string label to differentiate this status from the status of other systems. This field is case-insensitive. "
        },
        "description": {
          "type": "string",
          "description": "A short description of the status."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "sha": {
          "type": "string",
          "description": "Sha"
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "target_url": {
          "type": "string",
          "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.   For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:   `http://ci.example.com/user/repo/build/sha` "
        }
      },
      "required": [
        "owner",
        "repo",
        "sha",
        "state"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACommitStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a commit status"
  },
  {
    "name": "GITHUB_LIST_WATCHERS",
    "enum": "GITHUB_LIST_WATCHERS",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List watchers",
    "description": "Lists the people watching the specified repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListWatchersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List watchers"
  },
  {
    "name": "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
    "enum": "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a repository subscription",
    "description": "Gets information about whether the authenticated user is subscribed to the\n    repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetARepositorySubscriptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a repository subscription"
  },
  {
    "name": "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
    "enum": "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set a repository subscription",
    "description": "To manage repository notifications: enable by setting `subscribed` to true,\n    ignore by setting `ignored` to true, or stop watching by deleting the repository's\n    subscription.",
    "parameters": {
      "type": "object",
      "properties": {
        "ignored": {
          "type": "boolean",
          "description": "Determines if all notifications should be blocked from this repository."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "subscribed": {
          "type": "boolean",
          "description": "Determines if notifications should be received from this repository."
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetARepositorySubscriptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set a repository subscription"
  },
  {
    "name": "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
    "enum": "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a repository subscription",
    "description": "This endpoint is for stopping repository watch. Use it to cease getting\n    updates. For notification preferences, manually adjust the repository's\n    subscription.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteARepositorySubscriptionResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a repository subscription"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_TAGS",
    "enum": "GITHUB_LIST_REPOSITORY_TAGS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository tags",
    "description": "This endpoint lists a GitHub repository's tags, requiring its owner and\n    name. Offers optional pagination parameters `per_page` (max 100) and `page`.\n    Detailed documentation is at GitHub's official site.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryTagsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository tags"
  },
  {
    "name": "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
    "enum": "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List tag protection states for a repository",
    "description": "This returns the tag protection states of a repository. This information\n    is only available to repository administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTagProtectionStatesForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List tag protection states for a repository"
  },
  {
    "name": "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
    "enum": "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a tag protection state for a repository",
    "description": "This creates a tag protection state for a repository. This endpoint is only\n    available to repository administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "pattern": {
          "type": "string",
          "description": "An optional glob pattern to match against when enforcing tag protection."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "pattern"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateATagProtectionStateForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a tag protection state for a repository"
  },
  {
    "name": "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
    "enum": "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a tag protection state for a repository",
    "description": "This deletes a tag protection state for a repository. This endpoint is only\n    available to repository administrators.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "tag_protection_id": {
          "type": "integer",
          "description": "The unique identifier of the tag protection."
        }
      },
      "required": [
        "owner",
        "repo",
        "tag_protection_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteATagProtectionStateForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a tag protection state for a repository"
  },
  {
    "name": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
    "enum": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download a repository archive tar",
    "description": "Generate a redirect URL to download a tar archive of a repository's default\n    branch or a specified ref. Ensure HTTP framework follows redirects or use\n    the `Location` header for a second request. Links for private repositories\n    expire after 5 minutes.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "Ref"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadARepositoryArchiveTarResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download a repository archive tar"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_TEAMS",
    "enum": "GITHUB_LIST_REPOSITORY_TEAMS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository teams",
    "description": "The text explains that listing of teams with repository access depends on\n    the repository's visibility and the type of access token used, with specific\n    scopes required for OAuth and personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryTeamsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository teams"
  },
  {
    "name": "GITHUB_GET_ALL_REPOSITORY_TOPICS",
    "enum": "GITHUB_GET_ALL_REPOSITORY_TOPICS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all repository topics",
    "description": "This endpoint fetches topics of a GitHub repository, using `owner` and `repo`.\n    It supports pagination with `page` and `per_page`. API details at GitHub\n    documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllRepositoryTopicsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all repository topics"
  },
  {
    "name": "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
    "enum": "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Replace all repository topics",
    "description": "Replace or clear GitHub repo topics by passing an array of names or an empty\n    array, respectively, including owner and repo name in the path. Full details:\n    https://docs.github.com/rest/repos/repos#replace-all-repository-topics",
    "parameters": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. "
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "names"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ReplaceAllRepositoryTopicsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Replace all repository topics"
  },
  {
    "name": "GITHUB_GET_REPOSITORY_CLONES",
    "enum": "GITHUB_GET_REPOSITORY_CLONES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get repository clones",
    "description": "Get the total number of clones and breakdown per day or week for the last\n    14 days. Timestamps are aligned to UTC midnight of the beginning of the\n    day or week. Week begins on Monday.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "per": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetRepositoryClonesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get repository clones"
  },
  {
    "name": "GITHUB_GET_TOP_REFERRAL_PATHS",
    "enum": "GITHUB_GET_TOP_REFERRAL_PATHS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get top referral paths",
    "description": "Get the top 10 popular contents over the last 14 days.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTopReferralPathsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get top referral paths"
  },
  {
    "name": "GITHUB_GET_TOP_REFERRAL_SOURCES",
    "enum": "GITHUB_GET_TOP_REFERRAL_SOURCES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get top referral sources",
    "description": "Get the top 10 referrers over the last 14 days.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTopReferralSourcesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get top referral sources"
  },
  {
    "name": "GITHUB_GET_PAGE_VIEWS",
    "enum": "GITHUB_GET_PAGE_VIEWS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get page views",
    "description": "Get the total number of views and breakdown per day or week for the last\n    14 days. Timestamps are aligned to UTC midnight of the beginning of the\n    day or week. Week begins on Monday.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "per": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetPageViewsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get page views"
  },
  {
    "name": "GITHUB_TRANSFER_A_REPOSITORY",
    "enum": "GITHUB_TRANSFER_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Transfer a repository",
    "description": "When transferring a personal repository to another user, the new owner must\n    accept the request. The process is asynchronous, with details on the original\n    owner included. For more on transferring repositories, visit GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "new_name": {
          "type": "string",
          "description": "The new name to be given to the repository."
        },
        "new_owner": {
          "type": "string",
          "description": "The username or organization name the repository will be transferred to."
        },
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_ids": {
          "type": "array",
          "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. "
        }
      },
      "required": [
        "owner",
        "repo",
        "new_owner"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "TransferARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Transfer a repository"
  },
  {
    "name": "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY",
    "enum": "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if vulnerability alerts are enabled for a repository",
    "description": "This text explains that a user can check if dependency alerts are enabled\n    or disabled for a repository, provided they have admin read access. It also\n    links to a page for more information on security alerts for vulnerable dependencies.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfVulnerabilityAlertsAreEnabledForARepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if vulnerability alerts are enabled for a repository"
  },
  {
    "name": "GITHUB_ENABLE_VULNERABILITY_ALERTS",
    "enum": "GITHUB_ENABLE_VULNERABILITY_ALERTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Enable vulnerability alerts",
    "description": "Enables dependency alerts/graph for a repository, requiring admin access.\n    For details on security alerts for vulnerabilities, see the provided link.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "EnableVulnerabilityAlertsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Enable vulnerability alerts"
  },
  {
    "name": "GITHUB_DISABLE_VULNERABILITY_ALERTS",
    "enum": "GITHUB_DISABLE_VULNERABILITY_ALERTS",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Disable vulnerability alerts",
    "description": "Disabling dependency alerts and the graph for a repository requires admin\n    access. For details, see GitHub's guide on security alerts for vulnerable\n    dependencies.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DisableVulnerabilityAlertsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Disable vulnerability alerts"
  },
  {
    "name": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
    "enum": "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download a repository archive zip",
    "description": "Get a redirect URL for downloading a zip of a repo, defaulting to the main\n    branch. Ensure redirects are followed. Link expires in 5 mins for private\n    repos; empty ones give a 404 error.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "ref": {
          "type": "string",
          "description": "Ref"
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo",
        "ref"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadARepositoryArchiveZipResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download a repository archive zip"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
    "enum": "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository using a template",
    "description": "Create a repository from a template via `template_owner` and `template_repo`.\n    Non-public templates need authentication. Verify with the `is_template`\n    value. OAuth and personal tokens require specific scopes to create repositories.",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A short description of the new repository."
        },
        "include_all_branches": {
          "type": "boolean",
          "description": "Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`. "
        },
        "name": {
          "type": "string",
          "description": "The name of the new repository."
        },
        "owner": {
          "type": "string",
          "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. "
        },
        "private": {
          "type": "boolean",
          "description": "Either `true` to create a new private repository or `false` to create a new public one. "
        },
        "template_owner": {
          "type": "string",
          "description": "The account owner of the template repository. The name is not case sensitive. "
        },
        "template_repo": {
          "type": "string",
          "description": "The name of the template repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "template_owner",
        "template_repo",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryUsingATemplateResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository using a template"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_REPOSITORIES",
    "enum": "GITHUB_LIST_PUBLIC_REPOSITORIES",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public repositories",
    "description": "This endpoint lists all public repositories by creation order. On GitHub\n    Enterprise Server, it shows only universally accessible repositories. Pagination\n    relies on the `since` parameter, with the next page URL in the Link header.",
    "parameters": {
      "type": "object",
      "properties": {
        "since": {
          "type": "integer",
          "description": "A repository ID. Only return repositories with an ID greater than this ID. "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public repositories"
  },
  {
    "name": "GITHUB_SEARCH_CODE",
    "enum": "GITHUB_SEARCH_CODE",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search code",
    "description": "This method supports searching content and paths, offering up to 100 results/page\n    with text match data. Limited to default branch, files \u003c384KB, and requires\n    a search term. Authentication and a 10 requests/minute limit are mandatory.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchCodeResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search code"
  },
  {
    "name": "GITHUB_SEARCH_COMMITS",
    "enum": "GITHUB_SEARCH_COMMITS",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search commits",
    "description": "Search commits on the default branch using criteria with up to 100 results\n    per page. Include `text-match` media type for message metadata. Example\n    search: `q=repo:octocat/Spoon-Knife+css`.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchCommitsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search commits"
  },
  {
    "name": "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
    "enum": "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search issues and pull requests",
    "description": "This method finds issues by state and keyword, returning up to 100 results/page\n    with titles and comments. It filters queries like 'open Python bugs on Windows'.\n    GitHub Apps should avoid mixing issue and pull request searches to avoid\n    HTTP 422 errors.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchIssuesAndPullRequestsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search issues and pull requests"
  },
  {
    "name": "GITHUB_SEARCH_LABELS",
    "enum": "GITHUB_SEARCH_LABELS",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search labels",
    "description": "Search repository labels by keywords in names or descriptions, with up to\n    100 results/page. Use `text-match` for highlights in names/descriptions.\n    Example: `q=bug+defect+enhancement\u0026repository_id=64778136`.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). "
        },
        "repository_id": {
          "type": "integer",
          "description": "The id of the repository."
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "repository_id",
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchLabelsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search labels"
  },
  {
    "name": "GITHUB_SEARCH_REPOSITORIES",
    "enum": "GITHUB_SEARCH_REPOSITORIES",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search repositories",
    "description": "Search for GitHub repositories by criteria, returning up to 100 results\n    per page. Search includes text match metadata for names and descriptions.\n    Example: find popular Tetris repositories in assembly, sorted by stars.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search repositories"
  },
  {
    "name": "GITHUB_SEARCH_REPO_S",
    "enum": "GITHUB_SEARCH_REPO_S",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search repositories",
    "description": "Search for GitHub repositories by criteria, returning up to 100 results\n    per page. Search includes text match metadata for names and descriptions.\n    Example: find popular Tetris repositories in assembly, sorted by stars.\u003c\u003cDEPRECATED\n    use search_repositories\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchRepositoriesResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Search repositories"
  },
  {
    "name": "GITHUB_SEARCH_TOPICS",
    "enum": "GITHUB_SEARCH_TOPICS",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search topics",
    "description": "Search for topics with criteria, getting up to 100 results per page, sorted\n    by best match. Use `text-match` for metadata in search, e.g., `q=ruby+is:featured`\n    for featured Ruby topics. See guides on pagination and text match for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). "
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchTopicsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search topics"
  },
  {
    "name": "GITHUB_SEARCH_USERS",
    "enum": "GITHUB_SEARCH_USERS",
    "tags": [
      "search"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Search users",
    "description": "This method searches for users by criteria, returning a max of 100 results/page\n    with metadata for login, email, and name. It supports public user searches\n    based on name, repo count, and followers. For private user searches, the\n    GraphQL API is required.",
    "parameters": {
      "type": "object",
      "properties": {
        "order": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "q": {
          "type": "string",
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers. "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "q"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SearchUsersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Search users"
  },
  {
    "name": "GITHUB_GET_A_TEAM_LEGACY",
    "enum": "GITHUB_GET_A_TEAM_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a team legacy",
    "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed\n    from the Teams API. We recommend migrating your existing code to use the\n    [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name)\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetATeamLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a team legacy"
  },
  {
    "name": "GITHUB_UPDATE_A_TEAM_LEGACY",
    "enum": "GITHUB_UPDATE_A_TEAM_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a team legacy",
    "description": "The Teams API endpoint is deprecated; switch to the \"Update a team\" endpoint.\n    Only organization owners or team maintainers can edit teams. Parent teams\n    in nested setups can't be set to \"secret.\"",
    "parameters": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "The description of the team."
        },
        "name": {
          "type": "string",
          "description": "The name of the team."
        },
        "notification_setting": {
          "type": "string",
          "description": ""
        },
        "parent_team_id": {
          "type": "integer",
          "description": "The ID of a team to set as the parent team."
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "privacy": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateATeamLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a team legacy"
  },
  {
    "name": "GITHUB_DELETE_A_TEAM_LEGACY",
    "enum": "GITHUB_DELETE_A_TEAM_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a team legacy",
    "description": "The endpoint route is deprecated; use the [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team)\n    endpoint instead. Organizational owners or team maintainers can delete teams,\n    and deleting a parent team removes all its child teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteATeamLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a team legacy"
  },
  {
    "name": "GITHUB_LIST_DISCUSSIONS_LEGACY",
    "enum": "GITHUB_LIST_DISCUSSIONS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List discussions legacy",
    "description": "This Teams API endpoint is being deprecated. Users should migrate to the\n    `List discussions` endpoint for team page discussions. `read:discussion`\n    scope is required for OAuth and classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDiscussionsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List discussions legacy"
  },
  {
    "name": "GITHUB_CREATE_A_DISCUSSION_LEGACY",
    "enum": "GITHUB_CREATE_A_DISCUSSION_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a discussion legacy",
    "description": "Deprecated Teams API endpoint for creating discussion posts will be removed.\n    Use the new `Create a discussion` endpoint. Triggering notifications, subject\n    to rate limits. Requires `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion post\"s body text."
        },
        "private": {
          "type": "boolean",
          "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "title": {
          "type": "string",
          "description": "The discussion post\"s title."
        }
      },
      "required": [
        "team_id",
        "title",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADiscussionLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a discussion legacy"
  },
  {
    "name": "GITHUB_GET_A_DISCUSSION_LEGACY",
    "enum": "GITHUB_GET_A_DISCUSSION_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a discussion legacy",
    "description": "The Teams API will remove the deprecated endpoint route. Users are advised\n    to switch to the [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion)\n    endpoint. Access requires `read:discussion` scope for OAuth and classic\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADiscussionLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a discussion legacy"
  },
  {
    "name": "GITHUB_UPDATE_A_DISCUSSION_LEGACY",
    "enum": "GITHUB_UPDATE_A_DISCUSSION_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a discussion legacy",
    "description": "This Teams API endpoint is deprecated and will be removed. Users should\n    switch to the new Update a discussion endpoint. It allows editing the title\n    and body of a discussion, requiring `write:discussion` scope for OAuth and\n    personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion post\"s body text."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "title": {
          "type": "string",
          "description": "The discussion post\"s title."
        }
      },
      "required": [
        "team_id",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateADiscussionLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a discussion legacy"
  },
  {
    "name": "GITHUB_DELETE_A_DISCUSSION_LEGACY",
    "enum": "GITHUB_DELETE_A_DISCUSSION_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a discussion legacy",
    "description": "The Teams API's endpoint for deleting discussions is deprecated. It advises\n    users to switch to the new \"Delete a discussion\" endpoint. Required OAuth\n    or classic tokens need the `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADiscussionLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a discussion legacy"
  },
  {
    "name": "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY",
    "enum": "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List discussion comments legacy",
    "description": "The Teams API's endpoint for listing team discussion comments is deprecated.\n    Switch to the new endpoint for this purpose. OAuth and classic tokens require\n    the `read:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListDiscussionCommentsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List discussion comments legacy"
  },
  {
    "name": "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY",
    "enum": "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a discussion comment legacy",
    "description": "Deprecated Teams API endpoint for creating team discussion comments will\n    be removed. Migrate to the new endpoint. Trigger notifications; avoid rapid\n    content creation to prevent rate limiting. Requires `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion comment\"s body text."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateADiscussionCommentLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a discussion comment legacy"
  },
  {
    "name": "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY",
    "enum": "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a discussion comment legacy",
    "description": "This Teams API endpoint for getting team discussion comments is deprecated\n    and will be removed. Switch to the new endpoint. OAuth and personal tokens\n    need `read:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "comment_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetADiscussionCommentLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a discussion comment legacy"
  },
  {
    "name": "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY",
    "enum": "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a discussion comment legacy",
    "description": "Deprecated Teams API endpoint for editing discussion comments will be removed.\n    Users should switch to the new \"Update a discussion comment\" endpoint. OAuth\n    and classic tokens require `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "The discussion comment\"s body text."
        },
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "comment_number",
        "body"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateADiscussionCommentLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a discussion comment legacy"
  },
  {
    "name": "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY",
    "enum": "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a discussion comment legacy",
    "description": "The Teams API endpoint for deleting a team discussion comment is deprecated.\n    Users are advised to switch to the new endpoint as outlined in the provided\n    URL. OAuth and personal access tokens require `write:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "comment_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteADiscussionCommentLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a discussion comment legacy"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a team discussion comment legacy",
    "description": "The Teams API endpoint for listing team discussion comment reactions is\n    deprecated. Use the new endpoint instead. OAuth tokens require `read:discussion`\n    scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "comment_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForATeamDiscussionCommentLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a team discussion comment legacy"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a team discussion comment legacy",
    "description": "The API endpoint to react to team discussion comments is outdated and recommends\n    using a newer endpoint. Reactions that work will give an HTTP 200 response,\n    needing `write:discussion` access.",
    "parameters": {
      "type": "object",
      "properties": {
        "comment_number": {
          "type": "integer",
          "description": "The number that identifies the comment."
        },
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "comment_number",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForATeamDiscussionCommentLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a team discussion comment legacy"
  },
  {
    "name": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY",
    "enum": "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List reactions for a team discussion legacy",
    "description": "The Teams API endpoint for listing team discussion reactions is deprecated.\n    Users are advised to migrate to the new \"List reactions for a team discussion\"\n    endpoint. OAuth tokens require the `read:discussion` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListReactionsForATeamDiscussionLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List reactions for a team discussion legacy"
  },
  {
    "name": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY",
    "enum": "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY",
    "tags": [
      "reactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create reaction for a team discussion legacy",
    "description": "The Teams API endpoint for creating team discussion reactions is deprecated.\n    Use the \"Create reaction for a team discussion\" endpoint instead. HTTP `200`\n    means the reaction was added. Requires `write:discussion` scope for OAuth\n    and personal tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": ""
        },
        "discussion_number": {
          "type": "integer",
          "description": "The number that identifies the discussion."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "discussion_number",
        "content"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateReactionForATeamDiscussionLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create reaction for a team discussion legacy"
  },
  {
    "name": "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY",
    "enum": "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List pending team invitations legacy",
    "description": "Endpoint route in Teams API deprecated; advised to use new endpoint for\n    pending team invitations. Includes `role` field with specific values; `login`\n    field `null` if invitee not a GitHub member.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPendingTeamInvitationsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List pending team invitations legacy"
  },
  {
    "name": "GITHUB_LIST_TEAM_MEMBERS_LEGACY",
    "enum": "GITHUB_LIST_TEAM_MEMBERS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List team members legacy",
    "description": "The endpoint in the Teams API is deprecated and will be removed. Users should\n    migrate to the new `List team members` endpoint, which now includes child\n    team members.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "role": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamMembersLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List team members legacy"
  },
  {
    "name": "GITHUB_GET_TEAM_MEMBER_LEGACY",
    "enum": "GITHUB_GET_TEAM_MEMBER_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get team member legacy",
    "description": "The \"Get team member\" endpoint is deprecated. Instead, use the \"Get team\n    membership for a user\" endpoint for retrieving active and pending memberships,\n    ensuring the team is visible to the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "team_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTeamMemberLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get team member legacy"
  },
  {
    "name": "GITHUB_ADD_TEAM_MEMBER_LEGACY",
    "enum": "GITHUB_ADD_TEAM_MEMBER_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add team member legacy",
    "description": "GitHub Enterprise Cloud's \"Add team member\" endpoint is deprecated, replaced\n    by \"Add or update team membership for a user\". Org owners/maintainers can\n    sync teams; API errors might occur. Use IdP for auto sync with `Content-Length`\n    set to 0.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "team_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddTeamMemberLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add team member legacy"
  },
  {
    "name": "GITHUB_REMOVE_TEAM_MEMBER_LEGACY",
    "enum": "GITHUB_REMOVE_TEAM_MEMBER_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove team member legacy",
    "description": "The \"Remove team member\" endpoint is deprecated; use \"Remove team membership\n    for a user\" instead, requiring admin rights. It's available for GitHub Enterprise\n    Cloud with some limits on IdP-synced teams.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "team_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveTeamMemberLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove team member legacy"
  },
  {
    "name": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
    "enum": "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get team membership for a user legacy",
    "description": "The Teams API's endpoint route is deprecated; use [Get team membership for\n    a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user)\n    instead. It shows membership `state` and `role`, with organization owners\n    as `maintainers`.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "team_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTeamMembershipForAUserLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get team membership for a user legacy"
  },
  {
    "name": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
    "enum": "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add or update team membership for a user legacy",
    "description": "The deprecated Teams API for member updates now has a new endpoint for adding\n    members with considerations for synced teams. Invites work upon acceptance,\n    allowing role updates within GitHub Enterprise Cloud limits, post-authentication.",
    "parameters": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "team_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddOrUpdateTeamMembershipForAUserLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add or update team membership for a user legacy"
  },
  {
    "name": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
    "enum": "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove team membership for a user legacy",
    "description": "The Teams API endpoint is deprecated and will be removed. Users should switch\n    to the \"Remove team membership for a user\" endpoint. Admin permissions are\n    required for removal. Note: Errors occur if changes are attempted on a team\n    synced with an IdP.",
    "parameters": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "team_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveTeamMembershipForAUserLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove team membership for a user legacy"
  },
  {
    "name": "GITHUB_LIST_TEAM_PROJECTS_LEGACY",
    "enum": "GITHUB_LIST_TEAM_PROJECTS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List team projects legacy",
    "description": "The `List organization projects for a team` endpoint is deprecated and will\n    be removed from the Teams API. Users are advised to switch to the `List\n    team projects` endpoint for future needs.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamProjectsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List team projects legacy"
  },
  {
    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY",
    "enum": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check team permissions for a project legacy",
    "description": "The Teams API endpoint is deprecated. Use the \"Check team permissions for\n    a project\" endpoint to verify a team’s permissions (read, write, admin)\n    on projects, including inherited ones.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckTeamPermissionsForAProjectLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check team permissions for a project legacy"
  },
  {
    "name": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY",
    "enum": "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add or update team project permissions legacy",
    "description": "This Teams API endpoint for adding a project to a team is deprecated. Switch\n    to the new endpoint for adding/updating team project permissions. Admin\n    rights required, and both project and team must belong to the same organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "permission": {
          "type": "string",
          "description": ""
        },
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddOrUpdateTeamProjectPermissionsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add or update team project permissions legacy"
  },
  {
    "name": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY",
    "enum": "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a project from a team legacy",
    "description": "The Teams API endpoint for removing organization projects from a team is\n    deprecated. Use the new endpoint instead. Only team maintainers or org owners\n    can remove projects, unless users have specific access rights. Removal doesn't\n    delete the project.",
    "parameters": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "integer",
          "description": "The unique identifier of the project."
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "project_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveAProjectFromATeamLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a project from a team legacy"
  },
  {
    "name": "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY",
    "enum": "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List team repositories legacy",
    "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed\n    from the Teams API. We recommend migrating your existing code to use the\n    new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories)\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamRepositoriesLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List team repositories legacy"
  },
  {
    "name": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY",
    "enum": "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check team permissions for a repository legacy",
    "description": "The endpoint for checking repositories via Teams API is deprecated. Users\n    should switch to the \"Check team permissions for a repository\" endpoint,\n    where you can also see team permissions for a specific repository by using\n    a custom media type.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckTeamPermissionsForARepositoryLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check team permissions for a repository legacy"
  },
  {
    "name": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY",
    "enum": "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add or update team repository permissions legacy",
    "description": "The Teams API is deprecated; use \"Add or update team repository permissions\"\n    instead. Admins with proper visibility in organization or direct fork repos\n    can modify permissions. It doesn't work on non-organization repos, resulting\n    in a `422` error.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "permission": {
          "type": "string",
          "description": ""
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddOrUpdateTeamRepositoryPermissionsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add or update team repository permissions legacy"
  },
  {
    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY",
    "enum": "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a repository from a team legacy",
    "description": "The Teams API endpoint is deprecated; use \"Remove a repository from a team\"\n    instead. Org owners or team maintainers can remove repos; admin access required\n    for members. Repo not deleted by this action.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id",
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveARepositoryFromATeamLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a repository from a team legacy"
  },
  {
    "name": "GITHUB_LIST_CHILD_TEAMS_LEGACY",
    "enum": "GITHUB_LIST_CHILD_TEAMS_LEGACY",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List child teams legacy",
    "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed\n    from the Teams API. We recommend migrating your existing code to use the\n    new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams)\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "team_id": {
          "type": "integer",
          "description": "The unique identifier of the team."
        }
      },
      "required": [
        "team_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListChildTeamsLegacyResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List child teams legacy"
  },
  {
    "name": "GITHUB_GET_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the authenticated user",
    "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope\n    in order for the response to include private profile information.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the authenticated user"
  },
  {
    "name": "GITHUB_USERS_GET_AUTHENTICATED",
    "enum": "GITHUB_USERS_GET_AUTHENTICATED",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the authenticated user",
    "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope\n    in order for the response to include private profile information.\u003c\u003cDEPRECATED\n    use get_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get the authenticated user"
  },
  {
    "name": "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update the authenticated user",
    "description": "**Note:** If your email is set to private and you send an `email` parameter\n    as part of this request to update your profile, your privacy settings are\n    still enforced: the email address will not be displayed on your public profile\n    or via the API.",
    "parameters": {
      "type": "object",
      "properties": {
        "bio": {
          "type": "string",
          "description": "The new short biography of the user."
        },
        "blog": {
          "type": "string",
          "description": "The new blog URL of the user."
        },
        "company": {
          "type": "string",
          "description": "The new company of the user."
        },
        "email": {
          "type": "string",
          "description": "The publicly visible email address of the user."
        },
        "hireable": {
          "type": "boolean",
          "description": "The new hiring availability of the user."
        },
        "location": {
          "type": "string",
          "description": "The new location of the user."
        },
        "name": {
          "type": "string",
          "description": "The new name of the user."
        },
        "twitter_username": {
          "type": "string",
          "description": "The new Twitter username of the user."
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update the authenticated user"
  },
  {
    "name": "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List users blocked by the authenticated user",
    "description": "List the users you've blocked on your personal account.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUsersBlockedByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List users blocked by the authenticated user"
  },
  {
    "name": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a user is blocked by the authenticated user",
    "description": "Returns a 204 if the given user is blocked by the authenticated user. Returns\n    a 404 if the given user is not blocked by the authenticated user, or if\n    the given user account has been identified as spam by GitHub.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAUserIsBlockedByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a user is blocked by the authenticated user"
  },
  {
    "name": "GITHUB_BLOCK_A_USER",
    "enum": "GITHUB_BLOCK_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Block a user",
    "description": "Blocks the given user and returns a 204. If the authenticated user cannot\n    block the given user a 422 is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "BlockAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Block a user"
  },
  {
    "name": "GITHUB_UNBLOCK_A_USER",
    "enum": "GITHUB_UNBLOCK_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unblock a user",
    "description": "Unblocks the given user and returns a 204.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnblockAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unblock a user"
  },
  {
    "name": "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List codespaces for the authenticated user",
    "description": "Lists the authenticated user's codespaces. OAuth app tokens and personal\n    access tokens (classic) need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "repository_id": {
          "type": "integer",
          "description": "ID of the Repository to filter on"
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListCodespacesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List codespaces for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a codespace for the authenticated user",
    "description": "Creates a new codespace, owned by the authenticated user. This endpoint\n    requires either a `repository_id` OR a `pull_request` but not both. OAuth\n    app tokens and personal access tokens (classic) need the `codespace` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List secrets for the authenticated user",
    "description": "Endpoint lists a user's Codespaces development environment secrets without\n    showing encrypted values. User must have Codespaces access, and OAuth or\n    personal access tokens require `codespace` or `codespace:secrets` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSecretsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List secrets for the authenticated user"
  },
  {
    "name": "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get public key for the authenticated user",
    "description": "This endpoint allows users with Codespaces access to encrypt secrets using\n    a public key. Users must encrypt secrets prior to creation or update. OAuth\n    app tokens and personal access tokens need `codespace` or `codespace:secrets`\n    scope for access.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetPublicKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get public key for the authenticated user"
  },
  {
    "name": "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a secret for the authenticated user",
    "description": "This service allows authenticated users with Codespace access to integrate\n    development environment secrets into codespaces without exposing encrypted\n    values, requiring `codespace` or `codespace:secrets` scope for OAuth or\n    classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetASecretForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a secret for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create or update a secret for the authenticated user",
    "description": "This text explains how to create or update a secret for a codespace via\n    API, using LibSodium for encryption. Users need Codespaces access and appropriate\n    OAuth scopes (`codespace` or `codespace:secrets`) to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "encrypted_value": {
          "type": "string",
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint. "
        },
        "key_id": {
          "type": "string",
          "description": "ID of the key you used to encrypt the secret."
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints. "
        }
      },
      "required": [
        "secret_name",
        "key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateOrUpdateASecretForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create or update a secret for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a secret for the authenticated user",
    "description": "Deletes a Codespaces development environment secret by name, removing access\n    from all authorized codespaces. Requires Codespaces access, and OAuth or\n    personal access tokens with `codespace` or `codespace:secrets` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteASecretForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a secret for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
    "enum": "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List selected repositories for a user secret",
    "description": "To list repositories with access to a user's dev environment secret, the\n    user must have Codespaces access. OAuth or classic personal tokens with\n    `codespace` or `codespace:secrets` scope are required.",
    "parameters": {
      "type": "object",
      "properties": {
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "secret_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSelectedRepositoriesForAUserSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List selected repositories for a user secret"
  },
  {
    "name": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
    "enum": "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set selected repositories for a user secret",
    "description": "This endpoint allows selecting repositories for a user's development environment\n    secret, requiring Codespaces access, OAuth app tokens, or personal access\n    tokens with `codespace` or `codespace:secrets` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        },
        "selected_repository_ids": {
          "type": "array",
          "description": "An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints. "
        }
      },
      "required": [
        "secret_name",
        "selected_repository_ids"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetSelectedRepositoriesForAUserSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set selected repositories for a user secret"
  },
  {
    "name": "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
    "enum": "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add a selected repository to a user secret",
    "description": "This endpoint adds a repository to a user's development environment secret,\n    requiring Codespaces access and the `codespace` or `codespace:secrets` scope\n    for OAuth or personal access tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddASelectedRepositoryToAUserSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add a selected repository to a user secret"
  },
  {
    "name": "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
    "enum": "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a selected repository from a user secret",
    "description": "This endpoint removes a repository from a user's dev environment secret,\n    requiring Codespaces access, and OAuth or classic tokens with specific scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "repository_id": {
          "type": "integer",
          "description": "Repository Id"
        },
        "secret_name": {
          "type": "string",
          "description": "The name of the secret."
        }
      },
      "required": [
        "secret_name",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveASelectedRepositoryFromAUserSecretResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a selected repository from a user secret"
  },
  {
    "name": "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a codespace for the authenticated user",
    "description": "Gets information about a user's codespace. OAuth app tokens and personal\n    access tokens (classic) need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update a codespace for the authenticated user",
    "description": "This endpoint updates a user's codespace, modifying its machine type and\n    recent folders. Changes apply upon next start. OAuth app tokens and personal\n    access tokens with 'codespace' scope are required.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        },
        "display_name": {
          "type": "string",
          "description": "Display name for this codespace"
        },
        "machine": {
          "type": "string",
          "description": "A valid machine to transition this codespace to."
        },
        "recent_folders": {
          "type": "array",
          "description": "Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in. "
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a codespace for the authenticated user",
    "description": "Deletes a user's codespace. OAuth app tokens and personal access tokens\n    (classic) need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Export a codespace for the authenticated user",
    "description": "Exports a specified codespace, providing a URL and ID to track its status.\n    If unable to push to the repository, changes are pushed to a fork. OAuth\n    and classic tokens require `codespace` scope to access this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ExportACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Export a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
    "enum": "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get details about a codespace export",
    "description": "Gets information about an export of a codespace. OAuth app tokens and personal\n    access tokens (classic) need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        },
        "export_id": {
          "type": "string",
          "description": "The ID of the export operation, or `latest`. Currently only `latest` is currently supported. "
        }
      },
      "required": [
        "codespace_name",
        "export_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetDetailsAboutACodespaceExportResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get details about a codespace export"
  },
  {
    "name": "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
    "enum": "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List machine types for a codespace",
    "description": "List the machine types a codespace can transition to use. OAuth app tokens\n    and personal access tokens (classic) need the `codespace` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListMachineTypesForACodespaceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List machine types for a codespace"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
    "enum": "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository from an unpublished codespace",
    "description": "Publishing an unpublished codespace creates a new repository, granting the\n    codespace's token write permissions. Publishing fails for codespaces already\n    linked to a repository. OAuth and classic tokens require `codespace` scope\n    for this operation.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        },
        "name": {
          "type": "string",
          "description": "A name for the new repository."
        },
        "private": {
          "type": "boolean",
          "description": "Whether the new repository should be private."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryFromAnUnpublishedCodespaceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository from an unpublished codespace"
  },
  {
    "name": "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Start a codespace for the authenticated user",
    "description": "Starts a user's codespace. OAuth app tokens and personal access tokens (classic)\n    need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StartACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Start a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "codespaces"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Stop a codespace for the authenticated user",
    "description": "Stops a user's codespace. OAuth app tokens and personal access tokens (classic)\n    need the `codespace` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "codespace_name": {
          "type": "string",
          "description": "The name of the codespace."
        }
      },
      "required": [
        "codespace_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StopACodespaceForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Stop a codespace for the authenticated user"
  },
  {
    "name": "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
    "enum": "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Authuserdockerconflictpackageslist",
    "description": "Lists all packages that are owned by the authenticated user within the user's\n    namespace, and that encountered a conflict during a Docker migration. OAuth\n    app tokens and personal access tokens (classic) need the `read:packages`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AuthUserDockerConflictPackagesListResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Authuserdockerconflictpackageslist"
  },
  {
    "name": "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set primary email visibility for the authenticated user",
    "description": "Sets the visibility for your primary email addresses.",
    "parameters": {
      "type": "object",
      "properties": {
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "visibility"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetPrimaryEmailVisibilityForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set primary email visibility for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List email addresses for the authenticated user",
    "description": "Lists all of your email addresses, and specifies which one is visible to\n    the public. OAuth app tokens and personal access tokens (classic) need the\n    `user:email` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEmailAddressesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List email addresses for the authenticated user"
  },
  {
    "name": "GITHUB_USERS_LIST_EMAILS_FOR_AUTHENTICATED_USER",
    "enum": "GITHUB_USERS_LIST_EMAILS_FOR_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List email addresses for the authenticated user",
    "description": "Lists all of your email addresses, and specifies which one is visible to\n    the public. OAuth app tokens and personal access tokens (classic) need the\n    `user:email` scope to use this endpoint.\u003c\u003cDEPRECATED use list_email_addresses_for_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEmailAddressesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List email addresses for the authenticated user"
  },
  {
    "name": "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add an email address for the authenticated user",
    "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddAnEmailAddressForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add an email address for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an email address for the authenticated user",
    "description": "OAuth app tokens and personal access tokens (classic) need the `user` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnEmailAddressForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an email address for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List followers of the authenticated user",
    "description": "Lists the people following the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListFollowersOfTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List followers of the authenticated user"
  },
  {
    "name": "GITHUB_USERS_LIST_FOLLOWERS_FOR_AUTHENTICATED_USER",
    "enum": "GITHUB_USERS_LIST_FOLLOWERS_FOR_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List followers of the authenticated user",
    "description": "Lists the people following the authenticated user.\u003c\u003cDEPRECATED use list_followers_of_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListFollowersOfTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List followers of the authenticated user"
  },
  {
    "name": "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
    "enum": "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List the people the authenticated user follows",
    "description": "Lists the people who the authenticated user follows.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListThePeopleTheAuthenticatedUserFollowsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List the people the authenticated user follows"
  },
  {
    "name": "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a person is followed by the authenticated user",
    "description": "The `/user/following/{username}` endpoint checks if the authenticated user\n    follows a specific GitHub user, returning 204 if followed, 404 if not, and\n    error details for other statuses. See API docs for further details.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAPersonIsFollowedByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a person is followed by the authenticated user"
  },
  {
    "name": "GITHUB_FOLLOW_A_USER",
    "enum": "GITHUB_FOLLOW_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Follow a user",
    "description": "To call the specified endpoint, set `Content-Length` to zero. It needs `user:follow`\n    scope for OAuth and classic tokens. Visit the provided URL for more on HTTP\n    methods.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "FollowAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Follow a user"
  },
  {
    "name": "GITHUB_UNFOLLOW_A_USER",
    "enum": "GITHUB_UNFOLLOW_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unfollow a user",
    "description": "OAuth app tokens and personal access tokens (classic) need the `user:follow`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnfollowAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unfollow a user"
  },
  {
    "name": "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gpg keys for the authenticated user",
    "description": "Lists the current user's GPG keys. OAuth app tokens and personal access\n    tokens (classic) need the `read:gpg_key` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGpgKeysForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gpg keys for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a gpg key for the authenticated user",
    "description": "Adds a GPG key to the authenticated user's GitHub account. OAuth app tokens\n    and personal access tokens (classic) need the `write:gpg_key` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "armored_public_key": {
          "type": "string",
          "description": "A GPG key in ASCII-armored format."
        },
        "name": {
          "type": "string",
          "description": "A descriptive name for the new key."
        }
      },
      "required": [
        "armored_public_key"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAGpgKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a gpg key for the authenticated user"
  },
  {
    "name": "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a gpg key for the authenticated user",
    "description": "View extended details for a single GPG key. OAuth app tokens and personal\n    access tokens (classic) need the `read:gpg_key` scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "gpg_key_id": {
          "type": "integer",
          "description": "The unique identifier of the GPG key."
        }
      },
      "required": [
        "gpg_key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAGpgKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a gpg key for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a gpg key for the authenticated user",
    "description": "Removes a GPG key from the authenticated user's GitHub account. OAuth app\n    tokens and personal access tokens (classic) need the `admin:gpg_key` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "gpg_key_id": {
          "type": "integer",
          "description": "The unique identifier of the GPG key."
        }
      },
      "required": [
        "gpg_key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAGpgKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a gpg key for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
    "enum": "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List app installations accessible to the user access token",
    "description": "This GitHub App feature lets authenticated users view installations they\n    have permissions (:read, :write, or :admin) for, including personal, collaborator,\n    and organization repositories, detailing permissions under the `permissions`\n    key.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListAppInstallationsAccessibleToTheUserAccessTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List app installations accessible to the user access token"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
    "enum": "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories accessible to the user access token",
    "description": "Auth users can access repos they own, collaborate on, or are in their org\n    with permissions (`:read`, `:write`, `:admin`) detailed under `permissions`\n    key for an installation.",
    "parameters": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "integer",
          "description": "The unique identifier of the installation."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "installation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesAccessibleToTheUserAccessTokenResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories accessible to the user access token"
  },
  {
    "name": "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
    "enum": "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add a repository to an app installation",
    "description": "Add a single repository to an installation. The authenticated user must\n    have admin access to the repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "integer",
          "description": "The unique identifier of the installation."
        },
        "repository_id": {
          "type": "integer",
          "description": "The unique identifier of the repository."
        }
      },
      "required": [
        "installation_id",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddARepositoryToAnAppInstallationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add a repository to an app installation"
  },
  {
    "name": "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
    "enum": "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove a repository from an app installation",
    "description": "Remove a single repository from an installation. The authenticated user\n    must have admin access to the repository. The installation must have the\n    `repository_selection` of `selected`.",
    "parameters": {
      "type": "object",
      "properties": {
        "installation_id": {
          "type": "integer",
          "description": "The unique identifier of the installation."
        },
        "repository_id": {
          "type": "integer",
          "description": "The unique identifier of the repository."
        }
      },
      "required": [
        "installation_id",
        "repository_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveARepositoryFromAnAppInstallationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove a repository from an app installation"
  },
  {
    "name": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
    "enum": "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get interaction restrictions for your public repositories",
    "description": "Shows which type of GitHub user can interact with your public repositories\n    and when the restriction expires.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetInteractionRestrictionsForYourPublicRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get interaction restrictions for your public repositories"
  },
  {
    "name": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
    "enum": "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Set interaction restrictions for your public repositories",
    "description": "Temporarily restricts which type of GitHub user can interact with your public\n    repositories. Setting the interaction limit at the user level will overwrite\n    any interaction limits that are set for individual repositories owned by\n    the user.",
    "parameters": {
      "type": "object",
      "properties": {
        "expiry": {
          "type": "string",
          "description": ""
        },
        "limit": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "limit"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "SetInteractionRestrictionsForYourPublicRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Set interaction restrictions for your public repositories"
  },
  {
    "name": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
    "enum": "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
    "tags": [
      "interactions"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Remove interaction restrictions from your public repositories",
    "description": "Removes any interaction restrictions from your public repositories.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RemoveInteractionRestrictionsFromYourPublicRepositoriesResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Remove interaction restrictions from your public repositories"
  },
  {
    "name": "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
    "tags": [
      "issues"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List user account issues assigned to the authenticated user",
    "description": "GitHub's REST API shows issues and pull requests assigned to the user across\n    owned/member repos. Pull requests are identified with a `pull_request` key.\n    Use \"List pull requests\" for PR ids. Supports media types for different\n    content representations.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "filter": {
          "type": "string",
          "description": ""
        },
        "labels": {
          "type": "string",
          "description": "A list of comma separated label names. Example: `bug,ui,@high`"
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUserAccountIssuesAssignedToTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List user account issues assigned to the authenticated user"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public ssh keys for the authenticated user",
    "description": "Lists the public SSH keys for the authenticated user's GitHub account. OAuth\n    app tokens and personal access tokens (classic) need the `read:public_key`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicSshKeysForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public ssh keys for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a public ssh key for the authenticated user",
    "description": "Adds a public SSH key to the authenticated user's GitHub account. OAuth\n    app tokens and personal access tokens (classic) need the `write:gpg_key`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The public SSH key to add to your GitHub account."
        },
        "title": {
          "type": "string",
          "description": "A descriptive name for the new key."
        }
      },
      "required": [
        "key"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAPublicSshKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a public ssh key for the authenticated user"
  },
  {
    "name": "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a public ssh key for the authenticated user",
    "description": "View extended details for a single public SSH key. OAuth app tokens and\n    personal access tokens (classic) need the `read:public_key` scope to use\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "key_id": {
          "type": "integer",
          "description": "The unique identifier of the key."
        }
      },
      "required": [
        "key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPublicSshKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a public ssh key for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a public ssh key for the authenticated user",
    "description": "Removes a public SSH key from the authenticated user's GitHub account. OAuth\n    app tokens and personal access tokens (classic) need the `admin:public_key`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "key_id": {
          "type": "integer",
          "description": "The unique identifier of the key."
        }
      },
      "required": [
        "key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPublicSshKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a public ssh key for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List subscriptions for the authenticated user",
    "description": "Lists the active subscriptions for the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSubscriptionsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List subscriptions for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
    "enum": "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
    "tags": [
      "apps"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List subscriptions for the authenticated user stubbed",
    "description": "Lists the active subscriptions for the authenticated user.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSubscriptionsForTheAuthenticatedUserStubbedResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List subscriptions for the authenticated user stubbed"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization memberships for the authenticated user",
    "description": "Lists all of the authenticated user's organization memberships.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationMembershipsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization memberships for the authenticated user"
  },
  {
    "name": "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an organization membership for the authenticated user",
    "description": "This endpoint returns the membership status of an authenticated user in\n    an organization unless the user is unaffiliated or the request is from a\n    blocked GitHub App, resulting in a `404` or `403` error respectively.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        }
      },
      "required": [
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnOrganizationMembershipForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an organization membership for the authenticated user"
  },
  {
    "name": "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Update an organization membership for the authenticated user",
    "description": "Converts the authenticated user to an active member of the organization,\n    if that user has a pending invitation from the organization.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "org",
        "state"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UpdateAnOrganizationMembershipForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Update an organization membership for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_USER_MIGRATIONS",
    "enum": "GITHUB_LIST_USER_MIGRATIONS",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List user migrations",
    "description": "Lists all migrations a user has started.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUserMigrationsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List user migrations"
  },
  {
    "name": "GITHUB_START_A_USER_MIGRATION",
    "enum": "GITHUB_START_A_USER_MIGRATION",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Start a user migration",
    "description": "Initiates the generation of a user migration archive.",
    "parameters": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "array",
          "description": "Exclude attributes from the API response to improve performance"
        },
        "exclude_attachments": {
          "type": "boolean",
          "description": "Do not include attachments in the migration"
        },
        "exclude_git_data": {
          "type": "boolean",
          "description": "Indicates whether the repository git data should be excluded from the migration. "
        },
        "exclude_metadata": {
          "type": "boolean",
          "description": "Indicates whether metadata should be excluded and only git source should be included for the migration. "
        },
        "exclude_owner_projects": {
          "type": "boolean",
          "description": "Indicates whether projects owned by the organization or users should be excluded. "
        },
        "exclude_releases": {
          "type": "boolean",
          "description": "Do not include releases in the migration"
        },
        "lock_repositories": {
          "type": "boolean",
          "description": "Lock the repositories being migrated at the start of the migration"
        },
        "org_metadata_only": {
          "type": "boolean",
          "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags). "
        },
        "repositories": {
          "type": "array",
          "description": "Repositories"
        }
      },
      "required": [
        "repositories"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StartAUserMigrationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Start a user migration"
  },
  {
    "name": "GITHUB_GET_A_USER_MIGRATION_STATUS",
    "enum": "GITHUB_GET_A_USER_MIGRATION_STATUS",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a user migration status",
    "description": "This text describes the process of fetching a user migration, detailing\n    the possible states: `pending`, `exporting`, `exported`, and `failed`. It\n    notes that a successful (exported) migration allows for the download of\n    the migration archive.",
    "parameters": {
      "type": "object",
      "properties": {
        "exclude": {
          "type": "array",
          "description": "Exclude"
        },
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        }
      },
      "required": [
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAUserMigrationStatusResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a user migration status"
  },
  {
    "name": "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE",
    "enum": "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Download a user migration archive",
    "description": "The URL downloads a migration archive (tar.gz) with data (e.g., issues,\n    pull requests, comments) and directories for attachments and repositories'\n    Git data.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        }
      },
      "required": [
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DownloadAUserMigrationArchiveResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Download a user migration archive"
  },
  {
    "name": "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE",
    "enum": "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a user migration archive",
    "description": "Migration archives are automatically deleted after 7 days. Despite this,\n    migration metadata remains accessible via specific GitHub REST API endpoints\n    even after archive deletion.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        }
      },
      "required": [
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAUserMigrationArchiveResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a user migration archive"
  },
  {
    "name": "GITHUB_UNLOCK_A_USER_REPOSITORY",
    "enum": "GITHUB_UNLOCK_A_USER_REPOSITORY",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unlock a user repository",
    "description": "This text explains that you can unlock repositories after a user migration\n    is complete, allowing their use or deletion. If a repository isn't locked,\n    trying to unlock it will result in a `404 Not Found` status.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "repo_name": {
          "type": "string",
          "description": "repo_name parameter"
        }
      },
      "required": [
        "migration_id",
        "repo_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnlockAUserRepositoryResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unlock a user repository"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION",
    "enum": "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION",
    "tags": [
      "migrations"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories for a user migration",
    "description": "Lists all the repositories for this user migration.",
    "parameters": {
      "type": "object",
      "properties": {
        "migration_id": {
          "type": "integer",
          "description": "The unique identifier of the migration."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": [
        "migration_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesForAUserMigrationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories for a user migration"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organizations for the authenticated user",
    "description": "This API displays organizations for authenticated users, needing `user`\n    or `read:org` scope. It limits visibility to organizations the user can\n    operate on, rejecting inadequate scope with a `403 Forbidden`.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organizations for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
    "enum": "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List packages for the authenticated user s namespace",
    "description": "This endpoint lists packages owned by the user, requiring `read:packages`\n    scope, and `repo` scope for certain registry types. See GitHub documentation\n    for registry-specific permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_type": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPackagesForTheAuthenticatedUserSNamespaceResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List packages for the authenticated user s namespace"
  },
  {
    "name": "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a package for the authenticated user",
    "description": "To access a user-owned package, OAuth and classic tokens need `read:packages`\n    scope. For certain GitHub Packages, `repo` scope is also necessary. Details\n    on permissions at GitHub's documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "package_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPackageForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a package for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a package for the authenticated user",
    "description": "Authenticated users can delete their package unless it's public with over\n    5,000 downloads; then, contact GitHub support. OAuth and classic tokens\n    need `read:packages` and `delete:packages` scopes, and possibly `repo` if\n    the package type requires.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "package_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPackageForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a package for the authenticated user"
  },
  {
    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Restore a package for the authenticated user",
    "description": "Authenticated users can restore deleted packages within 30 days if the namespace\n    and version are available, provided they have the necessary OAuth or personal\n    access token scopes, including `read:packages`, `write:packages`, and possibly\n    `repo`.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "token": {
          "type": "string",
          "description": "package token"
        }
      },
      "required": [
        "package_type",
        "package_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RestoreAPackageForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Restore a package for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
    "enum": "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Listownedpackageversions",
    "description": "This endpoint lists versions of a user-owned package, requiring `read:packages`\n    scope with OAuth or classic tokens. For certain registries, `repo` scope\n    is also needed. Details on permissions can be found in the GitHub Packages\n    documentation.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "state": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "package_name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOwnedPackageVersionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Listownedpackageversions"
  },
  {
    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a package version for the authenticated user",
    "description": "This endpoint retrieves a specific package version for packages owned by\n    the authenticated user. It requires `read:packages` scope and, for certain\n    registries, `repo` scope for access, based on package type and registry\n    permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPackageVersionForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a package version for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a package version for the authenticated user",
    "description": "Deletes specific package version owned by the user. If public and has \u003e5,000\n    downloads, contact GitHub support. Requires admin permissions, `read:packages`,\n    `delete:packages`, and potentially `repo` scope for certain registries.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPackageVersionForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a package version for the authenticated user"
  },
  {
    "name": "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Restore a package version for the authenticated user",
    "description": "A user can restore a deleted package version within 30 days if its namespace\n    and version are unclaimed. OAuth and personal tokens need `read:packages`\n    and `write:packages` scopes, plus `repo` scope for certain registries.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RestoreAPackageVersionForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Restore a package version for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_USER_PROJECT",
    "enum": "GITHUB_CREATE_A_USER_PROJECT",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a user project",
    "description": "Creates a user project board. Returns a `410 Gone` status if the user does\n    not have existing classic projects. If you do not have sufficient privileges\n    to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
    "parameters": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "description": "Body of the project"
        },
        "name": {
          "type": "string",
          "description": "Name of the project"
        }
      },
      "required": [
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateAUserProjectResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a user project"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public email addresses for the authenticated user",
    "description": "This text guides on setting the visibility of a user's email address via\n    the specified GitHub endpoint. It mentions that OAuth app tokens and personal\n    access tokens require the `user:email` scope to access this feature.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicEmailAddressesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public email addresses for the authenticated user"
  },
  {
    "name": "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
    "enum": "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public email addresses for the authenticated user",
    "description": "This text guides on setting the visibility of a user's email address via\n    the specified GitHub endpoint. It mentions that OAuth app tokens and personal\n    access tokens require the `user:email` scope to access this feature.\u003c\u003cDEPRECATED\n    use list_public_email_addresses_for_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicEmailAddressesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List public email addresses for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories for the authenticated user",
    "description": "The text outlines that the authenticated user can access repositories they\n    own, collaborate on, or are part of through an organization, given explicit\n    `:read`, `:write`, or `:admin` permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "before": {
          "type": "string",
          "description": "Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories for the authenticated user"
  },
  {
    "name": "GITHUB_REPO_S_LIST_FOR_AUTHENTICATED_USER",
    "enum": "GITHUB_REPO_S_LIST_FOR_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories for the authenticated user",
    "description": "The text outlines that the authenticated user can access repositories they\n    own, collaborate on, or are part of through an organization, given explicit\n    `:read`, `:write`, or `:admin` permissions.\u003c\u003cDEPRECATED use list_repositories_for_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "before": {
          "type": "string",
          "description": "Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List repositories for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository for the authenticated user",
    "description": "Creates a new repository for the authenticated user. OAuth app tokens and\n    personal access tokens (classic) need the `public_repo` or `repo` scope\n    to create a public repository, and `repo` scope to create a private repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_auto_merge": {
          "type": "boolean",
          "description": "Whether to allow Auto-merge to be used on pull requests."
        },
        "allow_merge_commit": {
          "type": "boolean",
          "description": "Whether to allow merge commits for pull requests."
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "description": "Whether to allow rebase merges for pull requests."
        },
        "allow_squash_merge": {
          "type": "boolean",
          "description": "Whether to allow squash merges for pull requests."
        },
        "auto_init": {
          "type": "boolean",
          "description": "Whether the repository is initialized with a minimal README."
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "description": "Whether to delete head branches when pull requests are merged"
        },
        "description": {
          "type": "string",
          "description": "A short description of the repository."
        },
        "gitignore_template": {
          "type": "string",
          "description": "The desired language or platform to apply to the .gitignore."
        },
        "has_discussions": {
          "type": "boolean",
          "description": "Whether discussions are enabled."
        },
        "has_downloads": {
          "type": "boolean",
          "description": "Whether downloads are enabled."
        },
        "has_issues": {
          "type": "boolean",
          "description": "Whether issues are enabled."
        },
        "has_projects": {
          "type": "boolean",
          "description": "Whether projects are enabled."
        },
        "has_wiki": {
          "type": "boolean",
          "description": "Whether the wiki is enabled."
        },
        "homepage": {
          "type": "string",
          "description": "A URL with more information about the repository."
        },
        "is_template": {
          "type": "boolean",
          "description": "Whether this repository acts as a template that can be used to generate new repositories. "
        },
        "license_template": {
          "type": "string",
          "description": "The license keyword of the open source license for this repository."
        },
        "merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the repository."
        },
        "private": {
          "type": "boolean",
          "description": "Whether the repository is private."
        },
        "squash_merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "squash_merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. "
        }
      },
      "required": [
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a repository for the authenticated user"
  },
  {
    "name": "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
    "enum": "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a repository for the authenticated user",
    "description": "Creates a new repository for the authenticated user. OAuth app tokens and\n    personal access tokens (classic) need the `public_repo` or `repo` scope\n    to create a public repository, and `repo` scope to create a private repository.\u003c\u003cDEPRECATED\n    use create_a_repository_for_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "allow_auto_merge": {
          "type": "boolean",
          "description": "Whether to allow Auto-merge to be used on pull requests."
        },
        "allow_merge_commit": {
          "type": "boolean",
          "description": "Whether to allow merge commits for pull requests."
        },
        "allow_rebase_merge": {
          "type": "boolean",
          "description": "Whether to allow rebase merges for pull requests."
        },
        "allow_squash_merge": {
          "type": "boolean",
          "description": "Whether to allow squash merges for pull requests."
        },
        "auto_init": {
          "type": "boolean",
          "description": "Whether the repository is initialized with a minimal README."
        },
        "delete_branch_on_merge": {
          "type": "boolean",
          "description": "Whether to delete head branches when pull requests are merged"
        },
        "description": {
          "type": "string",
          "description": "A short description of the repository."
        },
        "gitignore_template": {
          "type": "string",
          "description": "The desired language or platform to apply to the .gitignore."
        },
        "has_discussions": {
          "type": "boolean",
          "description": "Whether discussions are enabled."
        },
        "has_downloads": {
          "type": "boolean",
          "description": "Whether downloads are enabled."
        },
        "has_issues": {
          "type": "boolean",
          "description": "Whether issues are enabled."
        },
        "has_projects": {
          "type": "boolean",
          "description": "Whether projects are enabled."
        },
        "has_wiki": {
          "type": "boolean",
          "description": "Whether the wiki is enabled."
        },
        "homepage": {
          "type": "string",
          "description": "A URL with more information about the repository."
        },
        "is_template": {
          "type": "boolean",
          "description": "Whether this repository acts as a template that can be used to generate new repositories. "
        },
        "license_template": {
          "type": "string",
          "description": "The license keyword of the open source license for this repository."
        },
        "merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "name": {
          "type": "string",
          "description": "The name of the repository."
        },
        "private": {
          "type": "boolean",
          "description": "Whether the repository is private."
        },
        "squash_merge_commit_message": {
          "type": "string",
          "description": ""
        },
        "squash_merge_commit_title": {
          "type": "string",
          "description": ""
        },
        "team_id": {
          "type": "integer",
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. "
        }
      },
      "required": [
        "name"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateARepositoryForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Create a repository for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repository invitations for the authenticated user",
    "description": "When authenticating as a user, this endpoint will list all currently open\n    repository invitations for that user.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoryInvitationsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repository invitations for the authenticated user"
  },
  {
    "name": "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
    "enum": "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Accept a repository invitation",
    "description": "Accept a repo invitation with invitation_id. Responses: 204 (Accepted),\n    403 (Forbidden), 409 (Conflict), 404 (Not Found), 304 (Not Modified). See\n    docs: https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "integer",
          "description": "The unique identifier of the invitation."
        }
      },
      "required": [
        "invitation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AcceptARepositoryInvitationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Accept a repository invitation"
  },
  {
    "name": "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
    "enum": "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Decline a repository invitation",
    "description": "Authenticated users can delete a repository invitation by invitation ID.\n    If declined, it returns 204, and for conflicts/errors such as 404 or 403,\n    see GitHub Docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "integer",
          "description": "The unique identifier of the invitation."
        }
      },
      "required": [
        "invitation_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeclineARepositoryInvitationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Decline a repository invitation"
  },
  {
    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List social accounts for the authenticated user",
    "description": "Lists all of your social accounts.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSocialAccountsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List social accounts for the authenticated user"
  },
  {
    "name": "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Add social accounts for the authenticated user",
    "description": "Add one or more social accounts to the authenticated user's profile. OAuth\n    app tokens and personal access tokens (classic) need the `user` scope to\n    use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "account_urls": {
          "type": "array",
          "description": "Full URLs for the social media profiles to add."
        }
      },
      "required": [
        "account_urls"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "AddSocialAccountsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Add social accounts for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete social accounts for the authenticated user",
    "description": "Deletes one or more social accounts from the authenticated user's profile.\n    OAuth app tokens and personal access tokens (classic) need the `user` scope\n    to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "account_urls": {
          "type": "array",
          "description": "Full URLs for the social media profiles to delete."
        }
      },
      "required": [
        "account_urls"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteSocialAccountsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete social accounts for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List ssh signing keys for the authenticated user",
    "description": "Lists the SSH signing keys for the authenticated user's GitHub account.\n    OAuth app tokens and personal access tokens (classic) need the `read:ssh_signing_key`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSshSigningKeysForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List ssh signing keys for the authenticated user"
  },
  {
    "name": "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Create a ssh signing key for the authenticated user",
    "description": "Creates an SSH signing key for the authenticated user's GitHub account.\n    OAuth app tokens and personal access tokens (classic) need the `write:ssh_signing_key`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The public SSH key to add to your GitHub account. For more information, see \"[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).\" "
        },
        "title": {
          "type": "string",
          "description": "A descriptive name for the new key."
        }
      },
      "required": [
        "key"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CreateASshSigningKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Create a ssh signing key for the authenticated user"
  },
  {
    "name": "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get an ssh signing key for the authenticated user",
    "description": "Gets extended details for an SSH signing key. OAuth app tokens and personal\n    access tokens (classic) need the `read:ssh_signing_key` scope to use this\n    endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "ssh_signing_key_id": {
          "type": "integer",
          "description": "The unique identifier of the SSH signing key."
        }
      },
      "required": [
        "ssh_signing_key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAnSshSigningKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get an ssh signing key for the authenticated user"
  },
  {
    "name": "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete an ssh signing key for the authenticated user",
    "description": "Deletes an SSH signing key from the authenticated user's GitHub account.\n    OAuth app tokens and personal access tokens (classic) need the `admin:ssh_signing_key`\n    scope to use this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "ssh_signing_key_id": {
          "type": "integer",
          "description": "The unique identifier of the SSH signing key."
        }
      },
      "required": [
        "ssh_signing_key_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAnSshSigningKeyForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete an ssh signing key for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories starred by the authenticated user",
    "description": "This endpoint lists starred repositories of the authenticated user and supports\n    media type `application/vnd.github.star+json` to include star creation timestamps.\n    More on media types at GitHub docs.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesStarredByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories starred by the authenticated user"
  },
  {
    "name": "GITHUB_ACTIVITY_LIST_REPO_S_STARRED_BY_AUTHENTICATED_USER",
    "enum": "GITHUB_ACTIVITY_LIST_REPO_S_STARRED_BY_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories starred by the authenticated user",
    "description": "This endpoint lists starred repositories of the authenticated user and supports\n    media type `application/vnd.github.star+json` to include star creation timestamps.\n    More on media types at GitHub docs.\u003c\u003cDEPRECATED use list_repositories_starred_by_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesStarredByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List repositories starred by the authenticated user"
  },
  {
    "name": "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a repository is starred by the authenticated user",
    "description": "Whether the authenticated user has starred the repository.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfARepositoryIsStarredByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a repository is starred by the authenticated user"
  },
  {
    "name": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity",
      "important",
      "important"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Star a repository for the authenticated user",
    "description": "Note that you'll need to set `Content-Length` to zero when calling out to\n    this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StarARepositoryForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Star a repository for the authenticated user"
  },
  {
    "name": "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
    "enum": "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Star a repository for the authenticated user",
    "description": "Note that you'll need to set `Content-Length` to zero when calling out to\n    this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"\u003c\u003cDEPRECATED\n    use star_a_repository_for_the_authenticated_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "StarARepositoryForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Star a repository for the authenticated user"
  },
  {
    "name": "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Unstar a repository for the authenticated user",
    "description": "Unstar a repository that the authenticated user has previously starred.",
    "parameters": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "The account owner of the repository. The name is not case sensitive."
        },
        "repo": {
          "type": "string",
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive. "
        }
      },
      "required": [
        "owner",
        "repo"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "UnstarARepositoryForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Unstar a repository for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories watched by the authenticated user",
    "description": "Lists repositories the authenticated user is watching.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesWatchedByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories watched by the authenticated user"
  },
  {
    "name": "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "teams"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List teams for the authenticated user",
    "description": "This endpoint lists all teams across organizations for the authenticated\n    user, requiring `user`, `repo`, or `read:org` scope. For fine-grained tokens,\n    it shows teams from the token owner's organization only.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListTeamsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List teams for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_USERS",
    "enum": "GITHUB_LIST_USERS",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List users",
    "description": "The text describes a feature listing GitHub users by signup order, including\n    individuals and organizations, with pagination managed via the `since` parameter\n    and the Link header for navigating pages.",
    "parameters": {
      "type": "object",
      "properties": {
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "integer",
          "description": "A user ID. Only return users with an ID greater than this ID."
        }
      },
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUsersResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List users"
  },
  {
    "name": "GITHUB_GET_A_USER",
    "enum": "GITHUB_GET_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a user",
    "description": "GitHub discloses publicly set user email information and offers an Emails\n    API for email visibility control. This access necessitates GitHub authentication.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a user"
  },
  {
    "name": "GITHUB_USERS_GET_BY_USERNAME",
    "enum": "GITHUB_USERS_GET_BY_USERNAME",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a user",
    "description": "GitHub discloses publicly set user email information and offers an Emails\n    API for email visibility control. This access necessitates GitHub authentication.\u003c\u003cDEPRECATED\n    use get_a_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get a user"
  },
  {
    "name": "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION",
    "enum": "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Findconflictingpackagesfordockermigration",
    "description": "This endpoint lists user-specific packages with migration conflicts accessible\n    to the requester, requiring `read:packages` scope via OAuth or classic tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "FindConflictingPackagesForDockerMigrationResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Findconflictingpackagesfordockermigration"
  },
  {
    "name": "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List events for the authenticated user",
    "description": "If you are authenticated as the given user, you will see your private events.\n    Otherwise, you'll only see public events.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEventsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List events for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organization events for the authenticated user",
    "description": "This is the user's organization dashboard. You must be authenticated as\n    the user to view this.",
    "parameters": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "The organization name. The name is not case sensitive."
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username",
        "org"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationEventsForTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organization events for the authenticated user"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
    "enum": "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public events for a user",
    "description": "This endpoint lists a GitHub user's public events, accepting `username`\n    and optional `per_page` and `page` parameters for pagination. It shows activities\n    such as watched repos and pushed commits.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicEventsForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public events for a user"
  },
  {
    "name": "GITHUB_LIST_FOLLOWERS_OF_A_USER",
    "enum": "GITHUB_LIST_FOLLOWERS_OF_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List followers of a user",
    "description": "Lists the people following the specified user.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListFollowersOfAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List followers of a user"
  },
  {
    "name": "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
    "enum": "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List the people a user follows",
    "description": "Lists the people who the specified user follows.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListThePeopleAUserFollowsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List the people a user follows"
  },
  {
    "name": "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
    "enum": "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Check if a user follows another user",
    "description": "Endpoint checks if a user follows another on GitHub. Pass 'username' \u0026 'target_user'\n    in path. Response: 204 if follows, 404 if not. Supports GitHub Apps. [API\n    Docs](https://docs.github.com/rest/users/followers#check-if-a-user-follows-another-user)",
    "parameters": {
      "type": "object",
      "properties": {
        "target_user": {
          "type": "string",
          "description": "Target User"
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username",
        "target_user"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "CheckIfAUserFollowsAnotherUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Check if a user follows another user"
  },
  {
    "name": "GITHUB_LIST_GISTS_FOR_A_USER",
    "enum": "GITHUB_LIST_GISTS_FOR_A_USER",
    "tags": [
      "gists"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gists for a user",
    "description": "Lists public gists for the specified user:",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "since": {
          "type": "string",
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGistsForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gists for a user"
  },
  {
    "name": "GITHUB_LIST_GPG_KEYS_FOR_A_USER",
    "enum": "GITHUB_LIST_GPG_KEYS_FOR_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List gpg keys for a user",
    "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListGpgKeysForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List gpg keys for a user"
  },
  {
    "name": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
    "enum": "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get contextual information for a user",
    "description": "This hovercard feature provides detailed info about someone's involvement\n    in pull requests, issues, repositories, and organizations, using `subject_type`\n    and `subject_id` for context. OAuth tokens require `repo` scope to access\n    this endpoint.",
    "parameters": {
      "type": "object",
      "properties": {
        "subject_id": {
          "type": "string",
          "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. "
        },
        "subject_type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetContextualInformationForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get contextual information for a user"
  },
  {
    "name": "GITHUB_USERS_GET_CONTEXT_FOR_USER",
    "enum": "GITHUB_USERS_GET_CONTEXT_FOR_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get contextual information for a user",
    "description": "This hovercard feature provides detailed info about someone's involvement\n    in pull requests, issues, repositories, and organizations, using `subject_type`\n    and `subject_id` for context. OAuth tokens require `repo` scope to access\n    this endpoint.\u003c\u003cDEPRECATED use get_contextual_information_for_a_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "subject_id": {
          "type": "string",
          "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. "
        },
        "subject_type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetContextualInformationForAUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "Get contextual information for a user"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
    "enum": "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public keys for a user",
    "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicKeysForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public keys for a user"
  },
  {
    "name": "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
    "enum": "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
    "tags": [
      "orgs"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List organizations for a user",
    "description": "This method lists only public organization memberships for a specified user.\n    To access both public and private memberships for an authenticated user,\n    use the List organizations API.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListOrganizationsForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List organizations for a user"
  },
  {
    "name": "GITHUB_LIST_PACKAGES_FOR_A_USER",
    "enum": "GITHUB_LIST_PACKAGES_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List packages for a user",
    "description": "This endpoint lists packages in a user's namespace accessible to the requester,\n    requiring `read:packages` scope, and `repo` scope for certain GitHub Packages\n    registries. It directs to a doc for registry-specific permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_type": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        },
        "visibility": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "package_type",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPackagesForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List packages for a user"
  },
  {
    "name": "GITHUB_GET_A_PACKAGE_FOR_A_USER",
    "enum": "GITHUB_GET_A_PACKAGE_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a package for a user",
    "description": "To access a user's public package metadata, OAuth and classic tokens need\n    `read:packages` scope; `repo` scope is also required for repository-scoped\n    GitHub Packages. Refer to GitHub documentation for specific registry information.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPackageForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a package for a user"
  },
  {
    "name": "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
    "enum": "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete a package for a user",
    "description": "Deleting a package requires admin rights. Public packages with \u003e5,000 downloads\n    need GitHub support. OAuth/personal tokens must have `read:packages`, `delete:packages`,\n    and `repo` scope for some registries.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeleteAPackageForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete a package for a user"
  },
  {
    "name": "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
    "enum": "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Restore a package for a user",
    "description": "A deleted GitHub Package can be restored within 30 days, provided the namespace/version\n    are unchanged and admin rights with specific permissions are available.\n    OAuth/personal tokens need `read:packages` and `write:packages` scopes.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "token": {
          "type": "string",
          "description": "package token"
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RestoreAPackageForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Restore a package for a user"
  },
  {
    "name": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
    "enum": "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List package versions for a package owned by a user",
    "description": "This endpoint lists a user's public package versions, needing `read:packages`\n    scope. For registry-specific packages, `repo` scope is also required. Refer\n    to GitHub's Packages permissions for more.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPackageVersionsForAPackageOwnedByAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List package versions for a package owned by a user"
  },
  {
    "name": "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
    "enum": "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get a package version for a user",
    "description": "Fetch a specific public package version with an OAuth or classic token having\n    `read:packages` scope. If `package_type` is in a registry needing repository-scoped\n    permissions, `repo` scope is needed. See GitHub for registry details.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "package_version_id",
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAPackageVersionForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get a package version for a user"
  },
  {
    "name": "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
    "enum": "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Delete package version for a user",
    "description": "Users can delete a package version unless it's public with over 5,000 downloads.\n    Admin permissions are required for certain registry types, with `read:packages`\n    and `delete:packages` scopes needed. Contact GitHub support if unable to\n    delete.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "username",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "DeletePackageVersionForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Delete package version for a user"
  },
  {
    "name": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
    "enum": "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
    "tags": [
      "packages"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Restore package version for a user",
    "description": "Users can restore a deleted package within 30 days if the namespace/version\n    is available and not reused. Admin permissions might be needed, and specific\n    OAuth or personal access tokens are required depending on the package registry's\n    permissions.",
    "parameters": {
      "type": "object",
      "properties": {
        "package_name": {
          "type": "string",
          "description": "The name of the package."
        },
        "package_type": {
          "type": "string",
          "description": ""
        },
        "package_version_id": {
          "type": "integer",
          "description": "Unique identifier of the package version."
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "package_type",
        "package_name",
        "username",
        "package_version_id"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "RestorePackageVersionForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Restore package version for a user"
  },
  {
    "name": "GITHUB_LIST_USER_PROJECTS",
    "enum": "GITHUB_LIST_USER_PROJECTS",
    "tags": [
      "projects"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List user projects",
    "description": "Lists projects for a user.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "state": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListUserProjectsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List user projects"
  },
  {
    "name": "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
    "enum": "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List events received by the authenticated user",
    "description": "These are events that you've received by watching repositories and following\n    users. If you are authenticated as the given user, you will see private\n    events. Otherwise, you'll only see public events.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListEventsReceivedByTheAuthenticatedUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List events received by the authenticated user"
  },
  {
    "name": "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
    "enum": "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List public events received by a user",
    "description": "This endpoint displays a GitHub user's public events, including event type\n    and repository, with pagination and event type filtering. It integrates\n    with GitHub apps and requires a `username`. Visit GitHub Docs for details.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListPublicEventsReceivedByAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List public events received by a user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
    "enum": "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
    "tags": [
      "repos"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories for a user",
    "description": "Lists public repositories for the specified user.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories for a user"
  },
  {
    "name": "GITHUB_REPO_S_LIST_FOR_USER",
    "enum": "GITHUB_REPO_S_LIST_FOR_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories for a user",
    "description": "Lists public repositories for the specified user.\u003c\u003cDEPRECATED use list_repositories_for_a_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "type": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesForAUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List repositories for a user"
  },
  {
    "name": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER",
    "enum": "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER",
    "tags": [
      "billing"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github actions billing for a user",
    "description": "The summary details GitHub Actions' used minutes, covering both free and\n    paid, applicable only in private repos for GitHub-hosted runners, including\n    re-runs and OS multipliers, rounded up by minute. Usage requires `user`\n    scope for tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubActionsBillingForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github actions billing for a user"
  },
  {
    "name": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER",
    "enum": "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER",
    "tags": [
      "billing"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get github packages billing for a user",
    "description": "The text provides information on tracking free and paid GitHub Packages\n    storage in GB, noting paid storage is for private repos. It links to billing\n    management and mentions OAuth tokens need the `user` scope.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetGithubPackagesBillingForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get github packages billing for a user"
  },
  {
    "name": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER",
    "enum": "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER",
    "tags": [
      "billing"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get shared storage billing for a user",
    "description": "The text provides guidance on estimating costs for GitHub Actions and Packages\n    for private repositories, emphasizing the need to consult billing documentation\n    and the requirement for `user` scope when using OAuth or personal access\n    tokens.",
    "parameters": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetSharedStorageBillingForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get shared storage billing for a user"
  },
  {
    "name": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
    "enum": "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List social accounts for a user",
    "description": "Lists social media accounts for a user. This endpoint is accessible by anyone.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSocialAccountsForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List social accounts for a user"
  },
  {
    "name": "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
    "enum": "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
    "tags": [],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List social accounts for a user",
    "description": "Lists social media accounts for a user. This endpoint is accessible by anyone.\u003c\u003cDEPRECATED\n    use list_social_accounts_for_a_user\u003e\u003e",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSocialAccountsForAUserResponse",
      "type": "object"
    },
    "deprecated": true,
    "display_name": "List social accounts for a user"
  },
  {
    "name": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER",
    "enum": "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER",
    "tags": [
      "users"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List ssh signing keys for a user",
    "description": "Lists the SSH signing keys for a user. This operation is accessible by anyone.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListSshSigningKeysForAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List ssh signing keys for a user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
    "enum": "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories starred by a user",
    "description": "This endpoint lists repositories a user has starred and supports media types\n    like `application/vnd.github.star+json`, which includes the star's creation\n    timestamp. For more, visit GitHub's documentation on media types.",
    "parameters": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "description": ""
        },
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "sort": {
          "type": "string",
          "description": ""
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesStarredByAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories starred by a user"
  },
  {
    "name": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
    "enum": "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
    "tags": [
      "activity"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "List repositories watched by a user",
    "description": "Lists repositories a user is watching.",
    "parameters": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "per_page": {
          "type": "integer",
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\" "
        },
        "username": {
          "type": "string",
          "description": "The handle for the GitHub user account."
        }
      },
      "required": [
        "username"
      ]
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "ListRepositoriesWatchedByAUserResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "List repositories watched by a user"
  },
  {
    "name": "GITHUB_GET_ALL_API_VERSIONS",
    "enum": "GITHUB_GET_ALL_API_VERSIONS",
    "tags": [
      "meta"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get all api versions",
    "description": "Get all supported GitHub API versions.",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetAllApiVersionsResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get all api versions"
  },
  {
    "name": "GITHUB_GET_THE_ZEN_OF_GITHUB",
    "enum": "GITHUB_GET_THE_ZEN_OF_GITHUB",
    "tags": [
      "meta"
    ],
    "logo": "https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png",
    "appId": "github",
    "appName": "github",
    "displayName": "Get the zen of github",
    "description": "Get a random sentence from the Zen of GitHub",
    "parameters": {
      "type": "object",
      "properties": {},
      "required": null
    },
    "response": {
      "properties": {
        "data": {
          "title": "Data",
          "type": "object"
        },
        "successful": {
          "description": "Whether or not the action execution was successful or not",
          "title": "Successful",
          "type": "boolean"
        },
        "error": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Error if any occurred during the execution of the action",
          "title": "Error"
        }
      },
      "required": [
        "data",
        "successful"
      ],
      "title": "GetTheZenOfGithubResponse",
      "type": "object"
    },
    "deprecated": false,
    "display_name": "Get the zen of github"
  }
]
